%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: isometric air conditioning.eps
%%Creator: Adobe Illustrator(R) 24.1
%%For: 
%%CreationDate: 12/21/2022
%%BoundingBox: 0 0 520 450
%%HiResBoundingBox: 0 0 520 450
%%CropBox: 0 0 520 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 24.1.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 24.1.2 x408 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 6.0-c002 79.164360, 2020/02/13-01:07:22        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Mobile</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:CreatorTool>Adobe Illustrator 24.1 (Windows)</xmp:CreatorTool>
         <xmp:CreateDate>2022-12-21T19:43:19+06:00</xmp:CreateDate>
         <xmp:ModifyDate>2022-12-21T19:43:20+06:00</xmp:ModifyDate>
         <xmp:MetadataDate>2022-12-21T19:43:20+06:00</xmp:MetadataDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>224</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA4AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8Am+bV5V2KuxV2KuxV2Kux&#xA;V2KuxV2KqkFvJM3FB06k9BgJplGJKZQ2UEA5uQzDqzdBkCbbowAUrnUVoUiHKuxY9PowiLGWTuS7&#xA;JtLsVdirsVdirsVdiqW639iy/wCYyD/iWY+o/h/rBy9Jzl/UkmWZDiPT7Rv9Fh/4xr+oZSXYxOyr&#xA;ywJt3LFbdyxW3csVt3LFbdyxW3csVt3LFbdyxW3leXutdirsVbVWYhVBJPQDFNL5oJISofYsK0wA&#xA;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&#xA;zGj4QxeHxbe5uODMZ8XD9of/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:OriginalDocumentID>uuid:C1BCCE1871B8DB11993190FCD52B4E9F</xmpMM:OriginalDocumentID>
         <xmpMM:DocumentID>xmp.did:5efa0f40-b4e1-da4e-9e82-83469d4d62bf</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:5efa0f40-b4e1-da4e-9e82-83469d4d62bf</xmpMM:InstanceID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:8772ede6-8fb2-ba40-8b7d-46287cecb9be</stRef:instanceID>
            <stRef:documentID>xmp.did:8772ede6-8fb2-ba40-8b7d-46287cecb9be</stRef:documentID>
            <stRef:originalDocumentID>uuid:C1BCCE1871B8DB11993190FCD52B4E9F</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:8772ede6-8fb2-ba40-8b7d-46287cecb9be</stEvt:instanceID>
                  <stEvt:when>2022-12-21T18:54:14+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator 24.1 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:5efa0f40-b4e1-da4e-9e82-83469d4d62bf</stEvt:instanceID>
                  <stEvt:when>2022-12-21T19:43:20+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator 24.1 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Mobile</illustrator:StartupProfile>
         <illustrator:CreatorSubTool>Adobe Illustrator</illustrator:CreatorSubTool>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>520.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=251 G=176 B=59</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>251</xmpG:red>
                           <xmpG:green>176</xmpG:green>
                           <xmpG:blue>59</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=41 G=171 B=226</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>41</xmpG:red>
                           <xmpG:green>171</xmpG:green>
                           <xmpG:blue>226</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=251 G=176 B=59</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>251</xmpG:red>
                           <xmpG:green>175</xmpG:green>
                           <xmpG:blue>59</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=117 G=76 B=36</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>117</xmpG:red>
                           <xmpG:green>75</xmpG:green>
                           <xmpG:blue>35</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=63 G=57 B=107</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>63</xmpG:red>
                           <xmpG:green>56</xmpG:green>
                           <xmpG:blue>107</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Grays</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=0 G=0 B=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=51 G=51 B=51</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>51</xmpG:red>
                           <xmpG:green>51</xmpG:green>
                           <xmpG:blue>51</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=77 G=77 B=77</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>77</xmpG:red>
                           <xmpG:green>77</xmpG:green>
                           <xmpG:blue>77</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=102 G=102 B=102</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>102</xmpG:red>
                           <xmpG:green>102</xmpG:green>
                           <xmpG:blue>102</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=128 G=128 B=128</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>128</xmpG:red>
                           <xmpG:green>128</xmpG:green>
                           <xmpG:blue>128</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=153 G=153 B=153</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>153</xmpG:red>
                           <xmpG:green>153</xmpG:green>
                           <xmpG:blue>153</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=179 G=179 B=179</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>179</xmpG:red>
                           <xmpG:green>179</xmpG:green>
                           <xmpG:blue>179</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=204 G=204 B=204</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>204</xmpG:red>
                           <xmpG:green>204</xmpG:green>
                           <xmpG:blue>204</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=230 G=230 B=230</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>230</xmpG:red>
                           <xmpG:green>230</xmpG:green>
                           <xmpG:blue>230</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=242 G=242 B=242</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>242</xmpG:red>
                           <xmpG:green>242</xmpG:green>
                           <xmpG:blue>242</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
520 450 li
520 0 li
cp
clp
470.184 311.816 mo
435.326 311.816 li
435.326 269 li
379.826 269 li
380.083 267.644 380.321 266.176 380.529 264.535 cv
380.926 261.31 380.159 258.509 380.159 255.707 cv
380.266 240.801 371.306 235.515 371.306 235.515 cv
371.306 235.515 370.697 234.801 367.764 234.643 cv
367.426 234.623 367.069 234.612 366.694 234.612 cv
365.018 234.612 362.977 234.825 360.601 235.408 cv
359.802 235.612 359.001 235.935 358.18 236.344 cv
358.18 198 li
362.732 198 li
365.598 198 li
382.691 198 li
388.33 198 li
403.492 198 li
403.677 198 li
423.132 198 li
429.634 198 li
440.347 198 li
443.629 198 li
448.645 198 li
452.02 198 453.082 193.302 449.974 191.988 cv
449.144 191.638 448.233 191.444 447.275 191.444 cv
446.083 191.444 444.964 191.748 443.984 192.278 cv
442.957 187.362 438.601 183.67 433.38 183.67 cv
432.45 183.67 431.553 183.8 430.691 184.02 cv
428.36 178.52 422.912 174.662 416.562 174.662 cv
409.2 174.662 403.055 179.852 401.57 186.772 cv
399.52 184.446 396.528 182.971 393.185 182.971 cv
391.633 182.971 390.155 183.288 388.813 183.859 cv
386.375 178.985 381.352 175.631 375.531 175.631 cv
368.014 175.631 361.815 181.222 360.829 188.469 cv
360.009 188.056 359.119 187.763 358.18 187.618 cv
358.18 89.9999 li
368.406 89.9999 li
375.884 89.9999 li
398.257 89.9999 li
398.47 89.9999 li
415.905 89.9999 li
422.39 89.9999 li
442.048 89.9999 li
445.343 89.9999 li
458.505 89.9999 li
460.838 89.9999 462.637 87.8087 462.039 85.5538 cv
460.885 81.1943 456.896 77.9408 452.13 77.9408 cv
450.475 77.9408 448.916 78.3424 447.532 79.0391 cv
446.397 70.7046 439.271 64.2754 430.624 64.2754 cv
423.932 64.2754 418.154 68.1328 415.352 73.7373 cv
413.807 73.0806 412.107 72.7163 410.323 72.7163 cv
406.477 72.7163 403.036 74.4131 400.679 77.0879 cv
398.973 69.1299 391.905 63.1611 383.438 63.1611 cv
376.136 63.1611 369.871 67.5982 367.189 73.9228 cv
366.199 73.6695 365.167 73.52 364.098 73.52 cv
361.955 73.52 359.94 74.0604 358.18 75.0127 cv
358.18 .183582 li
520 .183582 li
520 19.9932 li
518.869 19.6381 517.665 19.4467 516.416 19.4467 cv
512.627 19.4467 509.256 21.2143 507.065 23.9643 cv
505.613 23.1836 503.954 22.7387 502.189 22.7387 cv
498.39 22.7387 495.077 24.8008 493.29 27.8619 cv
492.712 27.7265 492.112 27.6475 491.492 27.6475 cv
487.29 27.6475 483.868 30.9501 483.657 35.1006 cv
482.704 33.4736 480.942 32.3775 478.92 32.3775 cv
478.752 32.3775 478.585 32.3847 478.42 32.3998 cv
474.93 32.7168 475.295 38 478.8 38 cv
520 38 li
520 127.227 li
518.058 126.505 515.957 126.111 513.763 126.111 cv
504.456 126.111 496.805 133.193 495.9 142.262 cv
494.738 141.803 493.475 141.543 492.149 141.543 cv
491.538 141.543 490.915 141.598 490.281 141.714 cv
486.749 142.363 483.829 144.927 482.56 148.287 cv
482.485 148.489 li
481.529 151.187 483.652 154 486.514 154 cv
498.813 154 li
502.139 154 li
520 154 li
520 251.571 li
470.184 251.571 li
470.184 311.816 li
false sop
/0 
[/DeviceRGB] /CSA add_res
level3{
gsave
clp
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
/0 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.313726 .8 .94902 ]
/C1 [.811765 .956863 1 ]
/N 1.67306 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~:f'tb:f'tb:f'tb:f'tc;,L1f;,L4h;GpCj;c?Un;cH^q<)cjt<E3(#<`W:'='&L+=BSd0=^#!4>?b<:
>[1Q??!^iD?XI/J?t!JP@U`eV@q9+\AS#IcAnPaiBPD0pC2.O"Ci!s*D/O60DfBZ8EH6)@F*)MHF`qqP
GBe@XH$Xd`I!g?jIXZcrJ:W9'JqJ]/KnY89LPUbCM2I4LN/WaVNfT9`OcbfjPE_>tQC!r*R@0M5S"-%?
StDXJTqS3UUnjiaVPgAlWN*#"XKAY.YHY::ZEppF[C3QR\@K2^]=bhk^;%J"_SX4/`Q#p<aN;TIbKS5V
~>
<~bfn;Tbfn;Tbfn;Tbfn;Tbfn;Tbfn;Tbfn;Tbg"DWc-=MXc-=MXc-=MYcHa_\cHa_\cHa_]cd0q`cd0q`
cd:%cd*U.dd*U1fdF$@hdF$@idaHRldaHRme'ldpe'lgreC<!teCE+"e^`4#f%/F'f%/F(f@SX+f@\a.
f\"j0g"G'3g"P06g=k98gY:K;gYCT>gt^`Ah;-oDhVR,GhV[5Jhr!AMi8EPPiSibSio8tWj5]1[j5f:^
jQ,FajlPXek2tghkND$lkih6ol07HslK[["lg*m&lg4!)m-X3-mI'E1mdKW5n*oi9nF?&=nac8Ao(2JE
~>
<~o()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABoCMSFoCMSF
oCMSFoCMSFoCMSFoCMSFoCMSFo^qeJo^qeJo^qeJo^qeJo^qeJo^qeKp%A"Np%A"Np%A"Np%A"Np%A"O
p@e4Rp@e4Rp@e4Rp@e4Rp@n=Up\4FVp\4FVp\4FVp\4IXq"XXZq"XXZq"XXZq"aa]q>'j^q>'j^q>'j^
qYL'bqYL'bqYL'bqYL*dqtp9fqtp9fqtp9gr;?Kjr;?Kjr;?KjrVc]nrVc]nrVc]nrVlfqrr2orrr2or
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
gsave
520 450 mo
70.1836 450 li
70.1836 .183582 li
520 .183582 li
520 450 li
clp
428.184 450 mo
370.736 450 li
370.736 338.176 li
373.537 336.467 375.333 333.767 376.428 330.592 cv
381.184 330.592 li
381.184 320.092 li
377.918 320.092 li
377.913 316.308 377.476 312.576 376.961 309.493 cv
376.776 308.384 376.592 307.353 376.406 306.428 cv
376.353 306.216 li
376.353 306.216 li
375.957 304.022 li
375.957 304.022 li
375.798 303.626 375.692 303.229 375.613 302.912 cv
375.613 302.912 li
375.613 302.912 li
375.561 299.688 li
375.534 296.516 li
375.831 281.697 378.199 277.608 379.826 269 cv
435.326 269 li
435.326 311.816 li
428.184 311.816 li
428.184 450 li
412.184 386.092 mo
412.184 396.592 li
417.184 396.592 li
417.184 386.092 li
412.184 386.092 li
376.184 386.092 mo
376.184 396.592 li
381.184 396.592 li
381.184 386.092 li
376.184 386.092 li
412.184 364.092 mo
412.184 374.592 li
417.184 374.592 li
417.184 364.092 li
412.184 364.092 li
376.184 364.092 mo
376.184 374.592 li
381.184 374.592 li
381.184 364.092 li
376.184 364.092 li
400.184 342.092 mo
400.184 352.592 li
405.184 352.592 li
405.184 342.092 li
400.184 342.092 li
388.184 342.092 mo
388.184 352.592 li
393.184 352.592 li
393.184 342.092 li
388.184 342.092 li
412.184 320.092 mo
412.184 330.592 li
417.184 330.592 li
417.184 320.092 li
412.184 320.092 li
388.184 320.092 mo
388.184 330.592 li
393.184 330.592 li
393.184 320.092 li
388.184 320.092 li
424.184 298.092 mo
424.184 308.592 li
429.184 308.592 li
429.184 298.092 li
424.184 298.092 li
400.184 298.092 mo
400.184 308.592 li
405.184 308.592 li
405.184 298.092 li
400.184 298.092 li
412.184 276.092 mo
412.184 286.592 li
417.184 286.592 li
417.184 276.092 li
412.184 276.092 li
level3{
gsave
clp
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
/1 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.227451 .501961 .619608 ]
/C1 [.352941 .541176 .631373 ]
/N 1.67306 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
clp
/1 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~3BB2^3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]fDb4$,Mc4$,Mc4$,Mc4$5Vf4?P_g4?P_g4?P_h
4Ztqk4Ztqk4Zttm5!D.o5!D.o5!M7r5<h@s5<h@t5X7S"5X7S"5s[e&5s[e&6:+"*6:+"*6UO4.6UO4.
6psF26psF277BX677BX77Rfj:7Rfm<7n6'>7n?0A84Z9C8P)KF8P)NH8kM]J91qoN91qrP9MA,R9he>V
9heAX:/4PZ:JXb^:Jaka:f'tc;,L1f;GpCj;H$Lm;c?Uo<)cgr<E3%!<E<.$<`W:'='&I*=BJ[-=]nm1
~>
<~It3'"J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#
J:W9&JUrB'JUrB'JUrB'JUrB'JUrB'JUrB'JUrB'JUrE)JqAT+JqAT+JqAT+JqAT+JqAT+JqAT+JqJ].
K7ef/K7ef/K7ef/K7ef/K7ef/K7no2KS5#3KS5#3KS5#3KS5#3KS5&5KnY57KnY57KnY57KnY57Knb>:
L5(G;L5(G;L5(G;L5(G<LPLY?LPLY?LPLY?LPLY?LPUbBLkpkCLkpkCLkpkCLl$tFM2@(GM2@(GM2@(G
~>
<~SXuFESt;OFSt;OFSt;OFSt;OFSt;OFSt;OFSt;OFSt;OFSt;OFSt;OFSt;OFSt;OFSt;OFSt;OFSt;OF
St;OFSt;OFSt;OFSt;OFSt;OFSt;OFSt;OFSt;OFSt;OFSt;OFSt;OFSt;OFSt;OFSt;OFSt;OFSt;OF
St;OFStDXIT:_aJT:_aJT:_aJT:_aJT:_aJT:_aJT:_aJT:_aJT:_aJT:_aJT:_aJT:_aJT:_aJT:_aJ
T:_aJT:_aJT:hjMTV.sNTV.sNTV.sNTV.sNTV.sNTV.sNTV.sNTV.sNTV.sNTV.sNTV.sNTV.sNTV.sN
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /1 /Gradient get_res exec grestore
}if
np
417.184 286.592 mo
412.184 286.592 li
412.184 276.092 li
417.184 276.092 li
417.184 286.592 li
level3{
gsave
clp
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
/2 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.784314 .890196 .721569 ]
/C1 [.909804 .929412 .737255 ]
/N 1.67306 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
clp
/2 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~a2l?CaN2HDaN2HDaN2HDaN2HDaN2HDaN2HDaN2HDaN;QGaiVZHaiVZHaiVZHai_cKb0%lLb0%lLb0%lM
bKJ)PbKJ)PbKJ,Rbfn;Tbfn;Tbg"DWc-=MXc-=MYcHa_\cHa_\cd0q`cd0q`d*U.dd*U.ddF$@hdF$@h
daHRldaHRle'ldpe'ldqeC<!teC<%!e^`4#e^i=&f%/F(f@SX+f@S[-f\"j/g"G'3g"G*5g=k97gY:K;
gY:N=gt^]?h;-oCh;7#FhVR,Hhr!>Ki8EPOi8NYRiSibTio8tWj5]1[j5f:^jQ,FajlPUdk2tggkND$k
~>
<~ioB(Zj5]1[j5]1[j5]1[j5]1[j5]1[j5]1[j5]1[j5]1[j5]1[j5]1[j5]1[j5]1[j5]1[j5]1[j5]1[
j5f:^jQ,C_jQ,C_jQ,C_jQ,C_jQ,C_jQ,C_jQ,C_jQ,FajlPUcjlPUcjlPUcjlPUcjlPUcjlPUcjlY^f
k2tggk2tggk2tggk2tggk2tggk3(pjkND$kkND$kkND$kkND$kkND'mkih6okih6okih6okih6okiq?r
l07Hsl07Hsl07Hsl07HtlK[["lK[["lK[["lK[["lKdd%lg*m&lg*m&lg*m&lg4!)m-O**m-O**m-O**
~>
<~\%&rX\@B&Y\@B&Y\@B&Y\@B&Y\@B&Y\@B&Y\@B&Y\@B&Y\@B&Y\@B&Y\@B&Y\@B&Y\@B&Y\@B&Y\@B&Y
\@B&Y\@B&Y\@B&Y\@B&Y\@B&Y\@B&Y\@B&Y\@B&Y\@B&Y\@B&Y\@B&Y\@B&Y\[f8]\[f8]\[f8]\[f8]
\[f8]\[f8]\[f8]\[f8]\[f8]\[f8]\[f8]\[f8]\[f8]\[f8]\[f;_]"5Ja]"5Ja]"5Ja]"5Ja]"5Ja
]"5Ja]"5Ja]"5Ja]"5Ja]"5Ja]"5Ja]=Y\e]=Y\e]=Y\e]=Y\e]=Y\e]=Y\e]=Y\e]=Y\e]=Y\e]=Y\e
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /2 /Gradient get_res exec grestore
}if
np
429.184 308.592 mo
424.184 308.592 li
424.184 298.092 li
429.184 298.092 li
429.184 308.592 li
level3{
gsave
clp
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
405.184 308.592 mo
400.184 308.592 li
400.184 298.092 li
405.184 298.092 li
405.184 308.592 li
level3{
gsave
clp
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
417.184 330.592 mo
412.184 330.592 li
412.184 320.092 li
417.184 320.092 li
417.184 330.592 li
level3{
gsave
clp
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
393.184 330.592 mo
388.184 330.592 li
388.184 320.092 li
393.184 320.092 li
393.184 330.592 li
level3{
gsave
clp
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
381.184 330.592 mo
376.428 330.592 li
377.525 327.41 377.919 323.75 377.918 320.136 cv
377.918 320.121 377.918 320.107 377.918 320.092 cv
381.184 320.092 li
381.184 330.592 li
level3{
gsave
clp
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
405.184 352.592 mo
400.184 352.592 li
400.184 342.092 li
405.184 342.092 li
405.184 352.592 li
level3{
gsave
clp
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
393.184 352.592 mo
388.184 352.592 li
388.184 342.092 li
393.184 342.092 li
393.184 352.592 li
level3{
gsave
clp
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
417.184 374.592 mo
412.184 374.592 li
412.184 364.092 li
417.184 364.092 li
417.184 374.592 li
level3{
gsave
clp
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
381.184 374.592 mo
376.184 374.592 li
376.184 364.092 li
381.184 364.092 li
381.184 374.592 li
level3{
gsave
clp
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
417.184 396.592 mo
412.184 396.592 li
412.184 386.092 li
417.184 386.092 li
417.184 396.592 li
level3{
gsave
clp
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
381.184 396.592 mo
376.184 396.592 li
376.184 386.092 li
381.184 386.092 li
381.184 396.592 li
level3{
gsave
clp
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
520 450 mo
493.326 450 li
493.326 311.816 li
470.184 311.816 li
470.184 251.571 li
520 251.571 li
520 281.092 li
517.184 281.092 li
517.184 291.592 li
520 291.592 li
520 325.092 li
517.184 325.092 li
517.184 335.592 li
520 335.592 li
520 391.092 li
517.184 391.092 li
517.184 401.592 li
520 401.592 li
520 435.092 li
517.184 435.092 li
517.184 445.592 li
520 445.592 li
520 450 li
503.184 435.092 mo
503.184 445.592 li
508.184 445.592 li
508.184 435.092 li
503.184 435.092 li
503.184 413.092 mo
503.184 423.592 li
508.184 423.592 li
508.184 413.092 li
503.184 413.092 li
503.184 369.092 mo
503.184 379.592 li
508.184 379.592 li
508.184 369.092 li
503.184 369.092 li
503.184 303.092 mo
503.184 313.592 li
508.184 313.592 li
508.184 303.092 li
503.184 303.092 li
489.184 281.092 mo
489.184 291.592 li
494.184 291.592 li
494.184 281.092 li
489.184 281.092 li
503.184 259.092 mo
503.184 269.592 li
508.184 269.592 li
508.184 259.092 li
503.184 259.092 li
475.184 259.092 mo
475.184 269.592 li
480.184 269.592 li
480.184 259.092 li
475.184 259.092 li
level3{
gsave
clp
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
493.326 450 mo
475.184 450 li
475.184 444.092 li
470.184 444.092 li
470.184 450 li
439.184 450 li
439.184 444.092 li
434.184 444.092 li
434.184 450 li
428.184 450 li
428.184 311.816 li
435.326 311.816 li
470.184 311.816 li
493.326 311.816 li
493.326 450 li
470.184 423.092 mo
470.184 433.592 li
475.184 433.592 li
475.184 423.092 li
470.184 423.092 li
434.184 423.092 mo
434.184 433.592 li
439.184 433.592 li
439.184 423.092 li
434.184 423.092 li
482.184 402.092 mo
482.184 412.592 li
487.184 412.592 li
487.184 402.092 li
482.184 402.092 li
458.184 402.092 mo
458.184 412.592 li
463.184 412.592 li
463.184 402.092 li
458.184 402.092 li
446.184 402.092 mo
446.184 412.592 li
451.184 412.592 li
451.184 402.092 li
446.184 402.092 li
470.184 381.092 mo
470.184 391.592 li
475.184 391.592 li
475.184 381.092 li
470.184 381.092 li
446.184 381.092 mo
446.184 391.592 li
451.184 391.592 li
451.184 381.092 li
446.184 381.092 li
434.184 381.092 mo
434.184 391.592 li
439.184 391.592 li
439.184 381.092 li
434.184 381.092 li
482.184 360.092 mo
482.184 370.592 li
487.184 370.592 li
487.184 360.092 li
482.184 360.092 li
446.184 360.092 mo
446.184 370.592 li
451.184 370.592 li
451.184 360.092 li
446.184 360.092 li
458.184 339.092 mo
458.184 349.592 li
463.184 349.592 li
463.184 339.092 li
458.184 339.092 li
434.184 339.092 mo
434.184 349.592 li
439.184 349.592 li
439.184 339.092 li
434.184 339.092 li
470.184 318.092 mo
470.184 328.592 li
475.184 328.592 li
475.184 318.092 li
470.184 318.092 li
446.184 318.092 mo
446.184 328.592 li
451.184 328.592 li
451.184 318.092 li
446.184 318.092 li
level3{
gsave
clp
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
/3 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.25098 .54902 .678431 ]
/C1 [.376471 .588235 .690196 ]
/N 1.67306 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
clp
/3 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~5<qJ!5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X7S"5X@\%5s[e&5s[e&5s[e&5sdn)6:+"*6:+"*6:+"+
6UO4.6UO4.6UO706psF26psF26q'O577BX677BX77Rfj:7Rfj:7n6'>7n6'>84Z9B84Z9B8P)KF8P)KF
8kM]J8kM]J91qoN91qoO9MA,R9MA/T9he>V9hnGY:/4P[:JXb^:JXe`:f'tb;,L1f;,L4h;GpCj;c?Un
;c?Xp<)cgr<E3%!<E<.$<`W7&='&I)=BJ[-=BSd0=]nm2>$>*5>?b<9>?kE<>[1Q??!U`B?=$rE?XI/I
~>
<~Mi<URN/W^SN/W^SN/W^SN/W^SN/W^SN/W^SN/W^SN/W^SN/W^SN/W^SN/W^SN/W^SN/W^SN/W^SN/W^S
N/`gVNK&pWNK&pWNK&pWNK&pWNK&pWNK&pWNK&pWNK&sYNfK-[NfK-[NfK-[NfK-[NfK-[NfK-[NfT6^
O,o?_O,o?_O,o?_O,o?_O,o?_O-#HbOH>QcOH>QcOH>QcOH>QcOH>TeOcbcgOcbcgOcbcgOcbcgOcklj
P*1ukP*1ukP*1ukP*1ulPEV2oPEV2oPEV2oPEV2oPE_;rPa%DsPa%DsPa%DsPa.N!Q'IW"Q'IW"Q'IW"
~>
<~XKAV,Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-
Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-Xf\_-
Xf\_-Xfeh0Y-+q1Y-+q1Y-+q1Y-+q1Y-+q1Y-+q1Y-+q1Y-+q1Y-+q1Y-+q1Y-+q1Y-+q1Y-+q1Y-+q1
Y-+q1Y-+q1Y-5%4YHP.5YHP.5YHP.5YHP.5YHP.5YHP.5YHP.5YHP.5YHP.5YHP.5YHP.5YHP.5YHP.5
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /3 /Gradient get_res exec grestore
}if
np
370.736 450 mo
358.18 450 li
358.18 424.32 li
358.18 411.59 li
358.18 347.69 li
360.653 346.452 363.013 344.798 365.173 342.638 cv
366.072 341.766 366.839 340.761 367.473 339.704 cv
367.552 339.545 li
368.736 339.214 369.793 338.752 370.736 338.176 cv
370.736 450 li
level3{
gsave
clp
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
508.184 269.592 mo
503.184 269.592 li
503.184 259.092 li
508.184 259.092 li
508.184 269.592 li
level3{
gsave
clp
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
480.184 269.592 mo
475.184 269.592 li
475.184 259.092 li
480.184 259.092 li
480.184 269.592 li
level3{
gsave
clp
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
475.184 328.592 mo
470.184 328.592 li
470.184 318.092 li
475.184 318.092 li
475.184 328.592 li
level3{
gsave
clp
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
451.184 328.592 mo
446.184 328.592 li
446.184 318.092 li
451.184 318.092 li
451.184 328.592 li
level3{
gsave
clp
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
463.184 349.592 mo
458.184 349.592 li
458.184 339.092 li
463.184 339.092 li
463.184 349.592 li
level3{
gsave
clp
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
439.184 349.592 mo
434.184 349.592 li
434.184 339.092 li
439.184 339.092 li
439.184 349.592 li
level3{
gsave
clp
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
487.184 370.592 mo
482.184 370.592 li
482.184 360.092 li
487.184 360.092 li
487.184 370.592 li
level3{
gsave
clp
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
451.184 370.592 mo
446.184 370.592 li
446.184 360.092 li
451.184 360.092 li
451.184 370.592 li
level3{
gsave
clp
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
475.184 391.592 mo
470.184 391.592 li
470.184 381.092 li
475.184 381.092 li
475.184 391.592 li
level3{
gsave
clp
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
451.184 391.592 mo
446.184 391.592 li
446.184 381.092 li
451.184 381.092 li
451.184 391.592 li
level3{
gsave
clp
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
439.184 391.592 mo
434.184 391.592 li
434.184 381.092 li
439.184 381.092 li
439.184 391.592 li
level3{
gsave
clp
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
487.184 412.592 mo
482.184 412.592 li
482.184 402.092 li
487.184 402.092 li
487.184 412.592 li
level3{
gsave
clp
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
463.184 412.592 mo
458.184 412.592 li
458.184 402.092 li
463.184 402.092 li
463.184 412.592 li
level3{
gsave
clp
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
451.184 412.592 mo
446.184 412.592 li
446.184 402.092 li
451.184 402.092 li
451.184 412.592 li
level3{
gsave
clp
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
475.184 433.592 mo
470.184 433.592 li
470.184 423.092 li
475.184 423.092 li
475.184 433.592 li
level3{
gsave
clp
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
439.184 433.592 mo
434.184 433.592 li
434.184 423.092 li
439.184 423.092 li
439.184 433.592 li
level3{
gsave
clp
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
475.184 450 mo
470.184 450 li
470.184 444.092 li
475.184 444.092 li
475.184 450 li
level3{
gsave
clp
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
439.184 450 mo
434.184 450 li
434.184 444.092 li
439.184 444.092 li
439.184 450 li
level3{
gsave
clp
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
520 291.592 mo
517.184 291.592 li
517.184 281.092 li
520 281.092 li
520 291.592 li
level3{
gsave
clp
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
494.184 291.592 mo
489.184 291.592 li
489.184 281.092 li
494.184 281.092 li
494.184 291.592 li
level3{
gsave
clp
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
508.184 313.592 mo
503.184 313.592 li
503.184 303.092 li
508.184 303.092 li
508.184 313.592 li
level3{
gsave
clp
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
520 335.592 mo
517.184 335.592 li
517.184 325.092 li
520 325.092 li
520 335.592 li
level3{
gsave
clp
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
508.184 379.592 mo
503.184 379.592 li
503.184 369.092 li
508.184 369.092 li
508.184 379.592 li
level3{
gsave
clp
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
520 401.592 mo
517.184 401.592 li
517.184 391.092 li
520 391.092 li
520 401.592 li
level3{
gsave
clp
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
508.184 423.592 mo
503.184 423.592 li
503.184 413.092 li
508.184 413.092 li
508.184 423.592 li
level3{
gsave
clp
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
520 445.592 mo
517.184 445.592 li
517.184 435.092 li
520 435.092 li
520 445.592 li
level3{
gsave
clp
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
508.184 445.592 mo
503.184 445.592 li
503.184 435.092 li
508.184 435.092 li
508.184 445.592 li
level3{
gsave
clp
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
520 154 mo
502.139 154 li
498.813 154 li
486.514 154 li
483.652 154 481.529 151.187 482.485 148.489 cv
482.56 148.287 li
483.829 144.927 486.749 142.363 490.281 141.714 cv
490.915 141.598 491.538 141.543 492.149 141.543 cv
493.475 141.543 494.738 141.803 495.9 142.262 cv
496.805 133.193 504.456 126.111 513.763 126.111 cv
515.957 126.111 518.058 126.505 520 127.227 cv
520 154 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 450 ]ct
[39.84 0 0 29.28 480.96 295.44 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 83 
/H 61 
/M[83 0 0 -61 0 61 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 83 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 83 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 83 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
Y0GMeg@;?Er6;Rmd.-#`Y5S+=\BN.djRKDOo#n_i`pr<`Y5I\1_TTdcmd[IXkfUrg]^bU`Y5I>%bfR?`
q!bHahT4*cZLIh^Y5Htof#Y#`!;s%ueAp=aY42>d[/A7ii5VqhpADK!b/WP_Y41uZ^APshlG]ppm/4d!
^r5][Y4(QOaS`ZfoY[j#ir%(![_qpYY3t-DdepAerkbi+ebn/!Y/1&(ZgQ3<hu'Xmp[5QZbP^H!Y/'Vr
^$`o<l27^!mI%jZ_>Na!Y.j,ea6gP;oDGc*j6b(X\,?%!Y.`]ZdI"7:rVNb2g$RAXY5842YIi<Og[20@
qms/Gcg9TVY5@q(\[orMjm9/In[ZBE`U)mVY5@Rq_mmMKn*I4SkI8OA]Bo1VY5@4fc*t.Jq<Y9]h6tb?
Z0VDTY5?bWg9n*Lr;3htd'_c=Y3PcY\GOIVjKu)To)$,t`j=p9Y3PEO_Y_0Tm]s"\kkiEt]X%.7Y3P'E
bknlRpoppchYY^tZEX;3Y3FX:f))VR!9p]OeGJ"tY-.Zd[->p6i;9[[p?B-Pb5:;tY-%6Y^?NW6lMI`c
m-)@N_#*TtY,gaLaQU85o_YekioeSL[eomtY,U7?dc[n4rqijte`YZLY5A-pZ_u15hrh0=pSYO!bNIsL
Y57^d]r&g3l/o/FmA7[r_<11JY57@Ya/-H2oB*4Pj.snp\*!JJY57"MdA+#0rT:9Zfq[,nY2oZ[YPQbB
gS(e3qt[Vpc_99jY3#BQ\bXC@je/d<nbKopJ,~>

%%EndBinary
grestore
np
520 38 mo
478.8 38 li
475.295 38 474.93 32.7168 478.42 32.3998 cv
478.585 32.3847 478.752 32.3775 478.92 32.3775 cv
480.942 32.3775 482.704 33.4736 483.657 35.1006 cv
483.868 30.9501 487.29 27.6475 491.492 27.6475 cv
492.112 27.6475 492.712 27.7265 493.29 27.8619 cv
495.077 24.8008 498.39 22.7387 502.189 22.7387 cv
503.954 22.7387 505.613 23.1836 507.065 23.9643 cv
509.256 21.2143 512.627 19.4467 516.416 19.4467 cv
517.665 19.4467 518.869 19.6381 520 19.9932 cv
520 38 li
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 450 ]ct
[46.56 0 0 20.16 474.24 411.12 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 97 
/H 42 
/M[97 0 0 -42 0 42 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 97 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 97 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 97 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
T]>)-^A,\Ih#F;4qW"7DlMn?nbi714Y5%V`T`=QAYi=.,cM4gIm/Na;q"Ui`gAf4n]\qo0T_SQeUAs31
^u3-*hY<rIr;WGIkkM^`b5^)nXPWX,T_IpTZN&>/d,),'me<CSp>)e*f_<M^])UsnT\]S?V"W^G_Z.I-
i7t+$rq<#bk1mT(aS+<\WrMhnT\JN#^@oPGh#F;+qV%V9lMn?nbh:P"Y4hJ\T`=Q8Yh@M!cM"[Gm/Na2
q":WZgAf4n][u8sT_8?bUAs3'^t-ErhY!`Fr;WG@kk2LZb5^)nXO[!oT_7dRZN&>%d+#Dpme*7Qp=$(k
f_*AZ])UsnT[Wl4V"NXF_Z.I#i6nCmrq)l`k0^fgaRn0XWrMhnT[Dfk^@T>Dh#F;!qTto,lMe9lbg4hc
Y4M8VT`4K-Yg:eicL\ICm/E['q"(KVgA].l][#WaT_&3_UAj,q^s'^fhXdTCr;NA5kjl:Tb5U#lXNU:[
T^qRNZMr7od)r]cmdd%Mp;sAWf^d/T])LmlTZR0'V"3FB_Z%Bmi5h\arpl`]k/Y*SaRRsRWrDblJ,~>

%%EndBinary
grestore
np
458.505 89.9999 mo
445.343 89.9999 li
442.048 89.9999 li
422.39 89.9999 li
415.905 89.9999 li
398.47 89.9999 li
398.257 89.9999 li
375.884 89.9999 li
368.406 89.9999 li
358.18 89.9999 li
358.18 75.0127 li
359.94 74.0604 361.955 73.52 364.098 73.52 cv
365.167 73.52 366.199 73.6695 367.189 73.9228 cv
369.871 67.5982 376.136 63.1611 383.438 63.1611 cv
391.905 63.1611 398.973 69.1299 400.679 77.0879 cv
403.036 74.4131 406.477 72.7163 410.323 72.7163 cv
412.107 72.7163 413.807 73.0806 415.352 73.7373 cv
418.154 68.1328 423.932 64.2754 430.624 64.2754 cv
439.271 64.2754 446.397 70.7046 447.532 79.0391 cv
448.916 78.3424 450.475 77.9408 452.13 77.9408 cv
456.896 77.9408 460.885 81.1943 462.039 85.5538 cv
462.637 87.8087 460.838 89.9999 458.505 89.9999 cv
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 450 ]ct
[105.6 0 0 28.32 357.6 359.28 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 220 
/H 59 
/M[220 0 0 -59 0 59 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 220 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 220 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 220 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
K%ZsQht;To`q@%EK)Y!5S(W_Qq"973XnC9EK)X*q[+Ku_n^s#tPkFMEK)W4Xc.IX#f\!7tK(]!5M>j(F
k1>4:^XpEsK(\*qUAfiFs4;kSVUsYsK([4X]DdE]lMcCdUt4GrK([.V^&EW_kl.(&Mq7[rK(Z8=f)C:#
ci1<%K%9DAP4Y"2n,@q<[f4P$K%/H&X7V#9qXfXDSc7d$K%.Qb`:SZRiUilDK`;#$K%-[Ih=Q<kaRm+D
K)Y'7K$pICht)Hk`q-nCK)Y!5S'm5Cq"'+/Xn1-CK)X*q[*aKQn^3NkPk4ACK)W4Xc-_-jf[6bkK(Jj1
M>a"Dk0S_,^X0pjK(IsmUA]cDs3H;CVU+)iK(I(T]D[?[lMZ=\UsIriK(I"R^&<Q]kl%!rMpD+gK(?&7
f):4!ci(5rK$No3P4Fk.n,7k:[f+IqK$DrmX7Cl5qXTLASc.]qK$D'T`:ANNiUW`AK`1qpK$:+9h=?0g
aRZtAK)P!5K$0t5hsuBi`q$hAK)Op3S'-`5q!s%-Xn('AK)O$o[*"!Cn]I$bPk"5@K)N.Vc,kRZfZC2a
K(8^-M>a"Dk/i4s^WFFaK(7giUA]cDs2]f5VT@T_K(-kN]D[?[lMZ=TUrVB^K(-eL^&<Q]kl%!kMoYV^
K(,o3f):4!ci(5jK#[?#P44_*n,.e8[f"CiK#ZH_X71`1qXB@>Sc%WhK#PLD`:/BJiUET>K`(kgK#FP)
h=-$caRHh>K)Fp3K#FJ'hsZ0c`p^V=K)Fj1S&:0%q!Wh'Xmaj=K)Esm[).F3n\UIXPje)=K)E(Tc,#"J
fYOWWK(&R)M>WqBk.uYc^VRkWK(%[eUAT]Bs1j6%VSM$VK($eL]DR9YlMQ7KUqbgTK'pYH^&3K[kkppb
Mnf&TK'oc/f)1-tcht/aK"gchP4"S&n,.e8[f"CaK"fmOX6kN+qX'.;Sc%W`K"\q4`9i0DiU*B;K`(k_
K"Rtnh<fg]aR-V;K)Fp3K"RnlhsH$_`pLJ;K)Fj1S%FTjq!E\#XmO^;K)Esm[(:k#n[anNPjRr;K)E(T
c+8M<fXe-NK'iF%M>WqBk.-)S^U_;LK'_I_UAT]Bs1!ZjVRYIKK'^SF]DR9YlMQ7CUpo7JK'^MD^&3K[
kkppZMmrKJK']W+f)1-tcht/XK!k-VP3eG"n,.e8[f"CXK!j7=X6bH)qWs(:Sc%WWK!`;"`9`*BiU!<:
K`$?~>

%%EndBinary
grestore
np
448.645 198 mo
443.629 198 li
440.347 198 li
429.634 198 li
423.132 198 li
403.677 198 li
403.492 198 li
388.33 198 li
382.691 198 li
365.598 198 li
362.732 198 li
358.18 198 li
358.18 187.618 li
359.119 187.763 360.009 188.056 360.829 188.469 cv
361.815 181.222 368.014 175.631 375.531 175.631 cv
381.352 175.631 386.375 178.985 388.813 183.859 cv
390.155 183.288 391.633 182.971 393.185 182.971 cv
396.528 182.971 399.52 184.446 401.57 186.772 cv
403.055 179.852 409.2 174.662 416.562 174.662 cv
422.912 174.662 428.36 178.52 430.691 184.02 cv
431.553 183.8 432.45 183.67 433.38 183.67 cv
438.601 183.67 442.957 187.362 443.984 192.278 cv
444.964 191.748 446.083 191.444 447.275 191.444 cv
448.233 191.444 449.144 191.638 449.974 191.988 cv
453.082 193.302 452.02 198 448.645 198 cv
/0 /CSA get_res setcolorspace
gsave
clp
[1 0 0 -1 0 450 ]ct
[96 0 0 24.96 357.6 251.28 ]ct
snap_to_device
Adobe_AGM_Image/AGMIMG_fl cf /ASCII85Decode fl /RunLengthDecode filter ddf
<<
/T 1
/W 200 
/H 52 
/M[200 0 0 -52 0 52 ]
/BC 8 
/D[0 1 0 1 0 1 ]
/DS [
[AGMIMG_fl 200 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 200 string /rs cvx /pop cvx] cvx
[AGMIMG_fl 200 string /rs cvx /pop cvx] cvx
]
/O 2
>>
%%BeginBinary: 1
img
K#G1;bO:&OmdHG=V>T2gK#HE^W:,o<nbe":aS`ZfK#@T*L$uG<cMW:llhm-fU;PsXK'q:ZX8J%VoYQ3s
`PT@WK'rO(M#=RVdD1@LkeN\TTC(_;K)F0sY.oq1p[*S"_X2sQ\GXObK"p`gQ0kF8hYVp%g\[q`P.pJR
K'gYH]DI3WrqhD_[CslPK'_giR/<WTiOjcTfY"9OO6lN9K)<Oa^:T!/qn%[NZL$!9K)=d/S%>6'jQqKb
ea0I9N;N@[K"8b/K'Tr4bPQngme`9ZV7>CJK'V1WW;DbTn[F+ZaLAeIK'WF%L&8:TcF/>5laE2HU?ge7
K)4-rX0n"ro]h%n`Tk26K)5B@LpXIpdHZ>Kkj"Z6TDIWTK!X"6Y3Lu2p\KL<_YSki\?a<CK'MdhQ27?R
hQ_[;gTd^BP3VT6K)3Rb]<Hmkrih+@[HZ!5K)4g0R'36fiTPmWf]]C4O8ALOK!*(q^?C14qrik4ZMMtN
K!"7=S*6L.jSFK)ebZGMN3)d;K':)8K)3"RbH$5qm]2W9V<?_3K)46uW2c#\n`PMeaQL23K)5KCKrVP\
cKBfBlfXZ3UAEiIJuI>#X65Q,o_O19`VR<HJuALDLuu#*dJAIkkk^dGT;L]3K'(VGY54+RpSEJ<_PMkH
\E;!1K)+j1Q)(7PhWBFPgZGI1P54XDJu$J`]B+Y+roJk0[JA+CJtqY,R,t((iVA*$f_MSBO.u:.K&su5
^A3BVqtZ&@ZCoV,K&u4XS,&]PjI_$reXs#*N9'a/K)*:ZJtBKDbN+99mc9Z/V>8u=Jt:YeW8s-&nbIe4
aSEH<Jt2h1L#fZ&cM<(flhQp;U7:-%K&bMDX8.hPoU:B#`L=O$K&cagM#"@Pd@#TSka@q"TAnr-K)*sm
Y*b08pYpea_W$1C\G==7JsYnlQ/\Y"hYDd!g\Ie6P*YXsK&Of0]D7'SrqV85[?]%rK&Q%SR/*KPiKSqY
fT`GqO5]a+K)!=[^6=/4qicioZJa.*K)"R)J,~>

%%EndBinary
grestore
np
grestore
gsave
520 450 mo
0 450 li
0 0 li
520 0 li
520 450 li
clp
326.446 542.318 mo
-40.7944 542.318 li
-40.7944 -23.7017 li
326.446 -23.7017 li
326.446 542.318 li
.752941 .933333 .980392 rgb
f
237.649 238.339 mo
217.214 226.541 li
217.214 36.0078 li
237.649 47.8062 li
237.649 238.339 li
cp
.901961 .901961 .901961 rgb
f
237.65 216.67 mo
214.75 229.72 li
208.9 233.06 li
188.03 244.95 li
185.45 246.42 li
181.08 248.91 li
165.05 258.05 li
164.92 258.13 li
162.57 259.47 li
162.48 259.52 li
162.38 259.57 li
154.55 264.03 li
153.61 264.57 li
86.8101 302.65 li
28.7402 335.75 li
-7.28998 326.92 li
76.2402 278.69 li
114.86 256.39 li
168.05 225.68 li
196.79 209.09 li
210.66 201.08 li
237.65 216.67 li
1 1 1 rgb
f
209.112 183.292 mo
161.358 91.5671 li
174.086 84.2671 li
209.202 151.717 li
209.112 183.292 li
188.666 174.925 mo
186.055 170.994 183.392 167.437 180.671 164.293 cv
147.074 99.7596 li
148.968 98.6737 li
188.666 174.925 li
139.687 148.807 mo
136.246 146.82 li
136.362 105.904 li
140.879 103.313 li
161.252 142.447 li
161.135 142.445 161.017 142.444 160.898 142.444 cv
156.125 142.444 149.704 144.017 141.102 147.99 cv
141.102 147.99 140.579 148.268 139.687 148.807 cv
209.36 95.9829 mo
196.552 71.3817 li
209.451 63.9839 li
209.36 95.9829 li
.454902 .8 .933333 rgb
f
180.671 164.293 mo
178.558 161.851 176.409 159.658 174.223 157.733 cv
174.229 151.156 172.132 142.627 161.252 142.447 cv
140.879 103.313 li
147.074 99.7596 li
180.671 164.293 li
.729412 .901961 .968627 rgb
f
209.096 188.88 mo
190.874 178.36 li
190.142 177.185 189.406 176.041 188.666 174.925 cv
148.968 98.6737 li
161.358 91.5671 li
209.112 183.292 li
209.096 188.88 li
f
209.202 151.717 mo
174.086 84.2671 li
196.552 71.3817 li
209.36 95.9829 li
209.202 151.717 li
f
133.694 148.303 mo
136.246 146.82 li
211.64 190.349 li
209.088 191.831 li
133.694 148.303 li
.501961 .501961 .501961 rgb
f
134.071 15.2998 mo
136.623 13.8168 li
136.246 146.82 li
133.694 148.303 li
134.071 15.2998 li
f
218.91 53.4453 mo
221.461 51.9629 li
221.023 206.602 li
218.472 208.085 li
218.91 53.4453 li
cp
f
124.68 -.958567 mo
127.231 -2.44093 li
221.461 51.9628 li
218.91 53.4453 li
124.68 -.958567 li
f
209.088 191.831 mo
209.465 58.8282 li
134.071 15.2998 li
133.694 148.303 li
209.088 191.831 li
124.68 -.958567 mo
218.91 53.4453 li
218.472 208.085 li
124.242 153.682 li
124.68 -.958567 li
1 1 1 rgb
f
195.237 185.783 mo
188.485 173.638 181.391 163.929 173.848 157.405 cv
152.348 169.726 li
162.313 180.469 171.468 187.838 180.396 194.718 cv
196.213 187.008 li
195.888 186.595 195.563 186.182 195.237 185.783 cv
.129412 .294118 .443137 rgb
f
124.209 318.603 mo
123.277 320.566 124.103 324.486 125.332 328.854 cv
127.472 333.079 131.643 331.843 135.379 331.649 cv
138.484 331.489 141.1 332.235 143.814 332.982 cv
147.409 333.97 151.174 334.959 156.471 333.84 cv
161.996 332.672 165.434 330.716 165.86 326.97 cv
165.692 325.321 164.407 323.88 162.1 322.628 cv
162.1 322.628 148.243 319.605 147.87 319.456 cv
147.497 319.307 140.949 316.348 140.749 315.934 cv
140.547 315.52 136.436 306.236 136.436 306.236 cv
122.787 309.098 li
124.209 318.603 li
0 0 0 rgb
f
104.397 339.817 mo
103.392 344.013 103.215 345.225 103.96 348.233 cv
104.679 349.805 105.343 350.488 106.162 352.669 cv
107.136 355.366 107.327 359.971 111.608 362.442 cv
116.748 365.967 126.189 365.505 128.879 361.194 cv
128.744 359.191 127.115 354.856 124.402 351.441 cv
119.008 342.862 li
118.75 334.5 li
104.79 332.41 li
104.397 339.817 li
f
118.234 210.929 mo
129.709 265.668 li
128.637 282.459 123.28 299.136 125.255 315.279 cv
126.655 321.957 140.496 320.586 143.016 315.576 cv
141.785 303.017 148.673 284.176 150.91 263.464 cv
150.983 243.031 150.189 222.028 145.603 205.939 cv
118.234 210.929 li
.0666667 .188235 .301961 rgb
f
146.232 210.603 mo
147.011 216.266 140.246 231.739 131.814 239.074 cv
132.243 251.221 132.094 272.334 130.979 286.162 cv
125.887 306.359 121.312 325.698 120.801 338.303 cv
118.676 341.378 111.83 342.979 107.377 341.658 cv
107.021 341.559 106.744 341.476 106.488 341.347 cv
106.394 341.307 106.29 341.258 106.186 341.22 cv
104.603 340.482 103.492 339.227 103.368 337.387 cv
102.403 321.478 104.221 305.211 107.614 288.726 cv
103.066 232.713 li
99.7265 225.183 97.7666 216.388 101.04 202.796 cv
104.827 203.453 li
146.232 210.603 li
.129412 .294118 .443137 rgb
f
173.374 165.262 mo
170.095 186.091 154.045 196.952 154.045 196.952 cv
150.728 203.58 li
146.371 212.307 li
108.76 228.573 101.04 202.796 101.04 202.796 cv
103.321 175.394 121.33 166.655 121.33 166.655 cv
128.044 154.928 141.102 147.99 141.102 147.99 cv
182.466 128.888 173.374 165.262 173.374 165.262 cv
f
147.202 212.436 mo
147.114 212.018 147.023 211.6 146.93 211.186 cv
150.728 203.58 li
150.729 203.58 150.729 203.58 150.729 203.58 cv
147.202 212.436 li
.423529 .603922 .705882 rgb
f
145.112 217.686 mo
145.755 215.669 146.156 213.84 146.264 212.353 cv
146.301 212.337 146.334 212.323 146.371 212.307 cv
146.93 211.186 li
147.023 211.6 147.114 212.018 147.202 212.436 cv
145.112 217.686 li
.0352941 .121569 .215686 rgb
f
105.43 261.835 mo
103.066 232.713 li
103.066 232.713 li
99.7265 225.183 97.767 216.388 101.04 202.796 cv
101.04 202.796 li
101.04 202.796 105.499 217.691 124.161 217.691 cv
130.024 217.691 137.295 216.218 146.264 212.353 cv
146.156 213.84 145.755 215.669 145.112 217.686 cv
142.738 223.649 li
136.857 226.191 131.797 227.43 127.443 227.709 cv
119.819 234.119 116.151 244.794 114.809 256.419 cv
105.43 261.835 li
.0705882 .188235 .317647 rgb
f
124.161 217.691 mo
105.499 217.691 101.04 202.796 101.04 202.796 cv
101.04 202.796 101.416 202.822 102.078 202.822 cv
106.222 202.822 121.582 201.817 126.105 187.222 cv
136.389 184.27 li
136.389 184.27 139.954 201.446 150.729 203.58 cv
150.728 203.58 li
146.93 211.186 li
146.371 212.307 li
146.334 212.323 146.301 212.337 146.264 212.353 cv
137.295 216.218 130.024 217.691 124.161 217.691 cv
f
173.85 172.31 mo
169.86 174.27 li
162.6 177.83 li
162.05 178.1 li
162.05 178.1 154.03 179.29 152.35 169.73 cv
150.61 159.84 155.83 158.69 155.83 158.69 cv
165.04 157.41 li
173.85 172.31 li
.968627 .6 .454902 rgb
f
162.6 177.83 mo
162.09 174.51 164.99 167.43 164.99 167.43 cv
165.66 167.43 li
169.86 174.27 li
162.6 177.83 li
.941176 .466667 .345098 rgb
f
164.467 169.594 mo
164.467 169.594 152.957 152.371 168.985 144.117 cv
173.524 141.779 184.638 142.797 189.332 151.18 cv
192.272 156.431 195.816 162.303 187.375 171.111 cv
187.581 173.831 li
187.866 175.218 187.386 176.098 186.229 176.139 cv
184.841 175.995 li
184.841 175.995 181.391 180.193 177.508 180.39 cv
173.624 180.587 165.603 176.622 164.467 169.594 cv
cp
.968627 .6 .454902 rgb
f
168.078 169.65 mo
170.425 170.955 li
173.967 169.294 176.932 169.956 179.248 165.108 cv
179.248 165.108 183.349 169.234 190.943 166.447 cv
190.943 166.447 190.733 165.198 191.537 163.822 cv
193.394 160.642 194.976 149.358 181.983 143.674 cv
178.177 142.009 172.232 140.012 165.383 145.947 cv
158.241 152.136 157.995 161.957 161.876 168.587 cv
163.168 170.793 166.197 171.381 168.078 169.65 cv
cp
0 0 0 rgb
f
170.409 167.671 mo
169.604 166.527 167.836 166.322 166.654 167.07 cv
165.473 167.819 164.893 169.313 165.008 170.707 cv
165.067 171.424 165.31 172.161 165.847 172.641 cv
166.564 173.283 167.675 173.327 168.569 172.97 cv
170.558 172.174 171.771 169.604 170.409 167.671 cv
cp
.968627 .6 .454902 rgb
f
187.064 158.503 mo
182.643 161.218 171.767 161.698 172.949 162.417 cv
178.828 165.989 193.027 177.297 201.671 168.362 cv
206.751 163.109 196.67 155.251 189.576 151.736 cv
188.427 154.087 190.606 156.328 187.064 158.503 cv
cp
.0666667 .188235 .301961 rgb
f
173.875 163.136 mo
168.461 161.797 162.192 158.974 159.582 155.879 cv
159.582 155.879 158.638 141.594 170.438 139.932 cv
189.281 137.278 193.735 152.877 191.997 156.697 cv
189.374 162.458 182.756 165.323 173.875 163.136 cv
cp
.129412 .294118 .443137 rgb
f
181.08 248.91 mo
165.05 258.05 li
164.92 258.13 li
162.48 259.52 li
162.38 259.57 li
154.55 264.03 li
153.61 264.57 li
86.8101 302.65 li
76.2402 278.69 li
114.86 256.39 li
168.05 225.68 li
180.34 247.59 li
181.08 248.91 li
1 1 1 rgb
f
-54.9346 259.834 mo
-52.3833 258.352 li
23.0103 301.881 li
20.459 303.362 li
-54.9346 259.834 li
cp
.501961 .501961 .501961 rgb
f
30.2813 164.977 mo
32.8325 163.495 li
32.394 318.134 li
29.8423 319.616 li
30.2813 164.977 li
cp
f
-63.9492 110.573 mo
-61.3979 109.091 li
32.8325 163.495 li
30.2813 164.977 li
-63.9492 110.573 li
cp
f
20.459 303.362 mo
20.8359 170.359 li
-54.5576 126.831 li
-54.9346 259.834 li
20.459 303.362 li
cp
-63.9492 110.573 mo
30.2813 164.977 li
29.8423 319.616 li
-64.3872 265.213 li
-63.9492 110.573 li
cp
1 1 1 rgb
f
237.65 216.67 mo
28.7402 335.75 li
28.7402 167.63 li
237.65 47.8101 li
237.65 216.67 li
-51.3599 -44.3799 mo
-51.3599 615.21 li
358.18 542.32 li
358.18 -107.97 li
-51.3599 -44.3799 li
.462745 .741176 .792157 rgb
f
237.649 216.668 mo
28.7378 335.748 li
28.7378 167.63 li
237.649 47.8062 li
237.649 216.668 li
18.7378 161.838 mo
18.7378 352.957 li
247.649 222.479 li
247.649 30.5425 li
18.7378 161.838 li
.337255 .670588 .729412 rgb
f
94.7085 288.602 mo
94.8574 288.454 li
95.5469 286.443 li
95.5747 286.359 95.647 286.289 95.7476 286.238 cv
95.8999 286.161 96.1172 286.128 96.3423 286.162 cv
98.7559 286.517 li
98.8647 286.533 98.9556 286.566 99.0366 286.606 cv
98.6323 287.783 li
98.5547 289.163 li
98.5454 289.345 98.8491 289.509 99.165 289.468 cv
99.8096 289.383 100.404 289.192 100.921 288.93 cv
102.106 288.328 102.885 287.35 102.934 286.402 cv
102.975 285.593 li
103.082 285.375 103.297 285.178 103.594 285.026 cv
122.35 275.509 li
122.819 275.271 123.456 275.188 124.096 275.237 cv
125.449 275.346 126.809 275.161 127.836 274.641 cv
128.048 274.532 128.247 274.411 128.427 274.274 cv
129.039 273.81 129.427 273.091 129.466 272.341 cv
129.534 271.007 li
129.586 270.195 129.197 269.296 128.165 268.68 cv
127.968 268.564 127.672 268.568 127.492 268.66 cv
127.359 268.778 li
126.265 270.831 li
126.08 270.996 li
125.909 271.083 125.658 271.113 125.415 271.063 cv
123.057 270.563 li
123.585 269.443 li
123.674 268.036 li
123.765 267.9 123.417 267.679 123.043 267.734 cv
122.324 267.845 121.659 268.06 121.091 268.348 cv
119.945 268.93 119.196 269.809 119.169 270.723 cv
119.114 271.699 li
118.995 271.898 118.791 272.08 118.518 272.219 cv
99.7778 281.728 li
99.3252 281.957 98.7192 282.042 98.0947 282.002 cv
97.1421 281.941 96.1602 282.019 95.2524 282.263 cv
94.8579 282.368 94.5093 282.501 94.2051 282.655 cv
93.1343 283.199 92.6206 284.01 92.6006 284.842 cv
92.5303 286.121 li
92.4854 287.01 93.0093 287.93 94.0347 288.579 cv
94.2266 288.7 94.5254 288.694 94.7085 288.602 cv
cp
.301961 .301961 .301961 rgb
f
100.989 287.596 mo
100.472 287.857 99.8779 288.049 99.2329 288.133 cv
98.8906 288.178 98.563 287.981 98.6323 287.783 cv
99.3599 285.665 li
99.4297 285.454 99.1968 285.238 98.8242 285.183 cv
96.4106 284.828 li
96.186 284.794 95.9683 284.826 95.8154 284.903 cv
95.7153 284.954 95.6431 285.024 95.6152 285.108 cv
94.9258 287.119 li
94.7769 287.267 li
94.5938 287.36 94.2949 287.365 94.1035 287.244 cv
92.1401 286.001 92.0137 283.768 94.2051 282.655 cv
94.5093 282.501 94.8579 282.368 95.252 282.263 cv
96.1602 282.019 97.1421 281.941 98.0947 282.002 cv
98.7192 282.042 99.3252 281.957 99.7778 281.728 cv
118.518 272.219 li
119.019 271.964 119.313 271.574 119.212 271.176 cv
118.954 270.105 119.757 269.025 121.091 268.348 cv
121.659 268.06 122.324 267.845 123.043 267.734 cv
123.417 267.679 123.765 267.9 123.653 268.109 cv
122.612 270.059 li
122.5 270.262 122.702 270.487 123.057 270.563 cv
125.415 271.063 li
125.658 271.113 125.909 271.083 126.08 270.996 cv
126.265 270.831 li
127.359 268.778 li
127.492 268.66 li
127.672 268.568 127.968 268.564 128.165 268.68 cv
130.087 269.828 129.793 271.954 128.496 272.939 cv
128.314 273.076 128.117 273.198 127.904 273.306 cv
126.877 273.827 125.517 274.012 124.165 273.903 cv
123.524 273.854 122.887 273.938 122.418 274.175 cv
103.663 283.692 li
103.188 283.933 102.911 284.29 102.978 284.666 cv
103.167 285.729 102.344 286.908 100.989 287.596 cv
cp
.8 .8 .8 rgb
f
68.041 291.777 mo
68.0435 290.97 67.4756 289.986 66.7725 289.58 cv
65.585 288.895 li
65.2314 288.69 64.9111 288.672 64.6792 288.807 cv
96.9395 270.079 li
97.1709 269.945 97.4912 269.964 97.8452 270.168 cv
99.0327 270.854 li
99.7358 271.26 100.303 272.243 100.301 273.051 cv
100.3 273.452 100.158 273.734 99.9302 273.867 cv
67.6699 292.594 li
67.8984 292.461 68.04 292.179 68.041 291.777 cv
cp
.741176 .545098 .333333 rgb
f
80.0742 285.058 mo
80.0767 284.166 79.4502 283.082 78.6753 282.634 cv
77.3652 281.878 li
76.9751 281.652 76.7017 281.827 76.4463 281.976 cv
76.394 281.862 76.4897 281.696 76.6689 281.604 cv
97.4863 269.475 li
97.7417 269.326 98.0947 269.348 98.4849 269.572 cv
99.7954 270.329 li
100.57 270.776 101.197 271.861 101.194 272.752 cv
101.193 273.194 101.037 273.506 100.785 273.652 cv
80.3076 285.587 li
80.0298 285.747 79.8267 285.655 79.7529 285.581 cv
79.9072 285.478 79.749 285.583 80.0327 285.417 cv
80.0962 285.327 80.0737 285.264 80.0742 285.058 cv
cp
.890196 .258824 .282353 rgb
f
66.0112 299.028 mo
70.6206 298.695 li
73.2012 297.197 li
73.2109 292.492 li
70.624 293.994 li
66.0142 294.311 li
66.0112 299.028 li
cp
.309804 .309804 .309804 rgb
f
66.0142 294.311 mo
55.1074 288.017 li
55.0913 292.726 li
66.0112 299.028 li
66.0142 294.311 li
cp
.345098 .345098 .345098 rgb
f
70.624 293.994 mo
73.2104 292.489 li
60.1323 284.938 li
55.1064 288.019 li
66.0142 294.311 li
70.624 293.994 li
cp
.215686 .215686 .215686 rgb
f
61.5298 295.527 mo
62.2329 295.933 62.8042 295.607 62.8066 294.8 cv
62.8086 293.992 62.2412 293.009 61.5381 292.603 cv
60.3506 291.917 li
59.6479 291.512 59.0762 291.837 59.0742 292.645 cv
59.0718 293.452 59.6396 294.436 60.3423 294.841 cv
61.5298 295.527 li
cp
.741176 .545098 .333333 rgb
f
gsave
153.61 264.57 mo
153.61 264.57 153.61 264.57 153.61 264.57 cv
153.61 264.57 li
154.55 264.03 li
154.55 264.03 li
154.54 264.037 154.531 264.044 154.522 264.051 cv
153.61 264.57 li
185.45 246.42 mo
185.45 246.42 li
188.03 244.95 li
188.03 244.95 li
188.029 244.951 188.028 244.952 188.027 244.953 cv
185.46 246.416 li
185.457 246.417 185.454 246.419 185.45 246.42 cv
185.45 246.42 li
213.601 230.376 mo
214.75 229.72 li
214.75 229.72 214.75 229.721 214.749 229.721 cv
213.601 230.376 li
clp
153.61 229.72 mo
214.75 229.72 li
214.75 264.57 li
153.61 264.57 li
cp
.603922 .8 .85098 rgb
f
grestore
180.34 247.59 mo
180.34 247.59 li
168.05 225.68 li
196.79 209.09 li
197.06 209.26 197.32 209.44 197.59 209.61 cv
201.99 212.5 206.4 215.39 210.81 218.28 cv
211.92 219.01 213.06 219.76 213.81 220.85 cv
214.57 221.94 214.86 223.46 214.17 224.6 cv
213.72 225.34 212.99 225.74 212.15 225.93 cv
212.98 226.42 213.72 227.04 214.31 227.85 cv
214.69 228.37 214.99 229.02 214.79 229.62 cv
214.75 229.72 li
213.601 230.376 li
208.84 233.089 li
208.763 233.127 208.69 233.161 208.61 233.2 cv
208.1 233.452 207.511 233.703 206.961 233.703 cv
206.701 233.703 206.45 233.648 206.22 233.51 cv
205.41 233.03 205.39 231.9 205.31 230.96 cv
205.15 228.94 204.24 227.3 203.03 225.73 cv
202.78 225.39 202.57 225.1 202.41 224.85 cv
200.42 224.52 198.44 224.18 196.45 223.85 cv
195.435 223.675 194.4 223.5 193.369 223.5 cv
192.928 223.5 192.487 223.532 192.05 223.61 cv
190.59 223.86 189.15 224.71 188.6 226.08 cv
187.46 228.9 190.4 231.56 191.57 234.37 cv
193.11 238.07 191.24 242.5 188.03 244.95 cv
188.03 244.95 li
185.45 246.42 li
183.84 247.1 182.11 247.46 180.34 247.59 cv
.8 .854902 .870588 rgb
f
153.61 264.57 mo
151.35 263.95 124.41 260.76 121.47 260.2 cv
118.77 259.68 115.29 259.42 114.86 257.32 cv
114.77 257.35 li
114.76 257.17 114.78 256.99 114.82 256.83 cv
114.82 256.69 114.84 256.54 114.86 256.39 cv
168.05 225.68 li
180.34 247.59 li
180.34 247.59 li
179.835 247.626 179.326 247.643 178.816 247.643 cv
177.329 247.643 175.832 247.498 174.38 247.26 cv
170.06 246.55 165.89 245.08 161.56 244.39 cv
160.141 244.16 158.682 244.022 157.231 244.022 cv
154.263 244.022 151.328 244.599 148.83 246.15 cv
142.15 248.35 li
148.25 252.019 162.52 253.45 165.44 257.8 cv
165.32 257.88 165.19 257.97 165.05 258.05 cv
165.05 258.05 li
165.047 258.051 li
162.403 259.559 li
162.38 259.57 li
159.83 260.94 156.68 262.53 154.55 264.03 cv
154.55 264.03 li
153.61 264.57 li
f
153.76 264.63 mo
153.76 264.61 153.71 264.59 153.61 264.57 cv
154.522 264.051 li
154.234 264.262 153.983 264.446 153.76 264.63 cv
162.403 259.559 mo
162.403 259.559 li
165.047 258.051 li
164.92 258.13 li
164.27 258.54 163.46 258.99 162.57 259.47 cv
162.48 259.52 li
162.403 259.559 li
185.46 246.416 mo
188.027 244.953 li
187.738 245.181 187.429 245.39 187.12 245.58 cv
186.583 245.908 186.037 246.187 185.46 246.416 cv
208.84 233.089 mo
213.601 230.376 li
214.749 229.721 li
214.529 230.27 213.93 230.6 213.38 230.86 cv
211.89 231.59 210.39 232.33 208.9 233.06 cv
208.88 233.07 208.86 233.08 208.84 233.089 cv
.270588 .572549 .635294 rgb
f
206.196 216.213 mo
206.731 222.885 li
205.921 226.77 li
205.436 229.268 li
205.724 233.393 li
205.762 235.971 208.384 234.743 208.257 232.971 cv
208.257 230.208 li
209.687 227.442 li
211.523 229.337 li
212.692 234.052 li
212.45 238.027 li
212.197 239.688 214.33 239.417 214.505 238.309 cv
214.477 239.463 li
214.448 240.785 216.62 240.59 216.797 239.545 cv
217.165 238.168 li
217.165 239.322 219.008 239.068 219.142 237.708 cv
219.368 236.262 li
219.486 237.296 221 237.099 221 235.551 cv
221.653 230.344 li
220.422 224.265 li
214.454 217.359 li
208.279 215.174 li
206.196 216.213 li
cp
.968627 .6 .454902 rgb
f
196.213 187.008 mo
180.396 194.718 li
180.929 195.128 181.46 195.537 181.991 195.944 cv
189.798 208.588 197.372 217.065 206.58 223.611 cv
207.649 219.958 210.548 217.86 214.814 217.691 cv
208.647 205.762 202.865 195.457 196.213 187.008 cv
cp
.129412 .294118 .443137 rgb
f
144.992 249.033 mo
148.506 257.963 li
148.506 257.963 150.07 261.702 151.021 262.8 cv
152.2 264.159 153.761 264.626 153.761 264.626 cv
155.063 271.303 li
155.396 273.158 156.605 272.923 157.346 272.116 cv
157.927 273.937 li
158.297 275.085 159.771 274.723 159.952 273.227 cv
160.587 275.063 162.423 273.748 162.029 272.415 cv
161.743 270.483 li
162.333 272.229 163.76 271.595 163.76 269.6 cv
163.534 261.158 li
161.766 256.77 li
163.595 257.117 li
166.18 258.921 li
167.733 259.792 169.365 259.054 168.025 257.355 cv
164.803 254.231 li
155.248 251.443 li
149.163 247.703 li
144.992 249.033 li
cp
.968627 .6 .454902 rgb
f
118.625 188.697 mo
125.334 223.941 li
126.259 229.193 125.37 233.591 132.145 240.651 cv
141.444 250.116 142.147 252.891 148.262 257.343 cv
148.457 254.828 152.089 250.732 155.485 251.379 cv
142.75 225.28 li
142.564 200.412 li
144.987 181.625 118.823 164.652 118.625 188.697 cv
cp
.129412 .294118 .443137 rgb
f
192.249 228.65 mo
175.145 238.49 li
175.053 238.522 174.959 238.671 174.959 238.9 cv
174.959 239.302 175.24 239.787 175.586 239.986 cv
175.757 240.085 175.913 240.093 176.026 240.027 cv
193.128 230.188 li
195.415 229.501 li
197.147 227.833 li
196.262 226.299 li
193.982 226.997 li
192.249 228.65 li
cp
.6 .6 .6 rgb
f
163.338 243.001 mo
175.086 237.222 li
175.364 237.084 175.733 237.116 176.131 237.348 cv
176.914 237.803 177.537 238.883 177.542 239.795 cv
177.545 240.263 177.386 240.605 177.124 240.778 cv
166.208 248.008 li
166.582 247.794 166.813 247.332 166.813 246.674 cv
166.813 245.367 165.9 243.786 164.774 243.141 cv
164.214 242.819 163.707 242.789 163.338 243.001 cv
cp
1 .231373 .258824 rgb
f
162.734 244.334 mo
162.734 243.027 163.646 242.494 164.774 243.141 cv
165.9 243.786 166.813 245.367 166.813 246.674 cv
166.813 247.98 165.9 248.515 164.774 247.869 cv
163.646 247.222 162.734 245.642 162.734 244.334 cv
cp
.639216 .129412 .14902 rgb
f
197.147 227.833 mo
195.225 229.268 li
194.101 227.321 li
196.262 226.299 li
197.147 227.833 li
cp
.901961 .901961 .901961 rgb
f
194.022 229.661 mo
195.225 229.268 li
194.101 227.321 li
193.168 228.101 li
192.798 228.41 192.7 228.911 192.914 229.281 cv
193.121 229.64 193.581 229.807 194.022 229.661 cv
cp
.701961 .701961 .701961 rgb
f
207.676 392.81 mo
207.676 380.088 li
225.578 369.753 li
245.866 358.039 li
245.866 370.763 li
207.676 392.81 li
.611765 .811765 .85098 rgb
f
248.253 369.384 mo
248.253 356.661 li
266.154 346.325 li
268.541 344.947 li
272.146 342.866 li
272.075 346.103 272.172 350.549 272.365 355.462 cv
248.253 369.384 li
f
227.965 365.987 mo
227.965 353.263 li
245.866 342.928 li
248.253 341.55 li
266.154 331.214 li
266.154 343.939 li
248.253 354.274 li
245.866 355.652 li
227.965 365.987 li
f
268.541 342.561 mo
268.541 329.836 li
286.442 319.501 li
288.829 318.123 li
306.73 307.787 li
306.73 320.512 li
299.983 324.407 li
298.181 324.86 296.506 325.306 295 325.722 cv
294.102 325.96 293.282 326.198 292.516 326.436 cv
289.185 327.387 287.203 328.048 287.203 328.048 cv
287.203 328.048 273.617 330.929 272.402 338.911 cv
272.34 339.33 272.289 339.835 272.248 340.42 cv
268.541 342.561 li
f
248.253 339.163 mo
248.253 326.439 li
266.154 316.104 li
268.541 314.727 li
286.442 304.391 li
286.442 317.114 li
268.541 327.449 li
266.154 328.827 li
248.253 339.163 li
f
339.876 450 mo
317.838 450 li
328.305 443.957 li
330.692 442.578 li
348.594 432.243 li
348.594 444.967 li
339.876 450 li
f
313.703 450 mo
291.664 450 li
308.017 440.559 li
310.403 439.181 li
328.305 428.846 li
328.305 441.569 li
313.703 450 li
f
330.69 440.19 mo
330.69 427.47 li
348.59 417.13 li
350.98 415.75 li
358.18 411.59 li
358.18 424.32 li
350.98 428.48 li
348.59 429.86 li
330.69 440.19 li
f
310.403 436.794 mo
310.403 424.07 li
328.305 413.735 li
330.692 412.357 li
348.594 402.021 li
348.594 414.745 li
330.692 425.08 li
328.305 426.459 li
310.403 436.794 li
f
125.087 450 mo
103.049 450 li
109.576 446.232 li
129.864 434.518 li
129.864 447.242 li
125.087 450 li
f
132.25 445.863 mo
132.25 433.141 li
150.152 422.805 li
152.539 421.427 li
170.44 411.092 li
170.44 423.814 li
132.25 445.863 li
f
111.963 442.467 mo
111.963 429.743 li
129.864 419.407 li
132.25 418.029 li
150.152 407.693 li
150.152 420.418 li
132.25 430.754 li
129.864 432.132 li
111.963 442.467 li
f
39.3579 404.156 mo
39.3579 391.433 li
57.2597 381.098 li
77.5478 369.384 li
77.5478 382.107 li
39.3579 404.156 li
f
79.9345 380.728 mo
79.9345 368.006 li
97.8359 357.671 li
100.223 356.292 li
118.124 345.957 li
118.124 358.681 li
79.9345 380.728 li
f
59.6465 377.332 mo
59.6465 364.607 li
77.5478 354.272 li
79.9345 352.894 li
97.8359 342.56 li
97.8359 355.283 li
79.9345 365.619 li
77.5478 366.997 li
59.6465 377.332 li
f
100.223 353.905 mo
100.223 341.181 li
118.124 330.846 li
120.511 329.468 li
138.413 319.132 li
138.413 331.856 li
120.511 342.192 li
118.124 343.57 li
100.223 353.905 li
f
79.9345 350.508 mo
79.9345 337.784 li
97.8359 327.449 li
100.223 326.071 li
118.124 315.735 li
118.124 328.459 li
100.223 338.794 li
97.8359 340.172 li
79.9345 350.508 li
f
131.057 80.2178 mo
131.057 67.4946 li
148.959 57.1592 li
169.247 45.4458 li
169.247 58.1695 li
131.057 80.2178 li
f
171.634 56.7911 mo
171.634 44.0679 li
189.535 33.7325 li
191.922 32.3546 li
209.823 22.019 li
209.823 34.7422 li
171.634 56.7911 li
f
151.346 53.3945 mo
151.346 40.6699 li
169.247 30.3345 li
171.634 28.9566 li
189.535 18.6211 li
189.535 31.3456 li
171.634 41.6807 li
169.247 43.0591 li
151.346 53.3945 li
f
171.634 26.5693 mo
171.634 13.8462 li
189.535 3.51131 li
191.922 2.13275 li
195.616 0 li
209.823 0 li
209.823 4.52054 li
191.922 14.8559 li
189.535 16.2339 li
171.634 26.5693 li
f
270.687 125.27 mo
270.687 112.547 li
288.589 102.211 li
308.877 90.498 li
308.877 103.221 li
270.687 125.27 li
f
311.264 101.843 mo
311.264 89.1196 li
329.165 78.7847 li
331.552 77.4067 li
336.284 74.6743 li
336.225 87.4318 li
311.264 101.843 li
338.269 86.2516 mo
338.328 73.4941 li
349.453 67.0713 li
349.453 79.7944 li
338.269 86.2516 li
f
290.976 98.4462 mo
290.976 85.7221 li
308.877 75.3867 li
311.264 74.0088 li
329.165 63.6734 li
329.165 76.398 li
311.264 86.7329 li
308.877 88.1108 li
290.976 98.4462 li
f
311.264 71.6221 mo
311.264 58.8984 li
329.165 48.563 li
331.552 47.1851 li
336.426 44.371 li
336.366 57.1286 li
331.552 59.9083 li
329.165 61.2861 li
311.264 71.6221 li
338.41 55.9483 mo
338.47 43.1907 li
349.453 36.8495 li
349.453 49.5727 li
338.41 55.9483 li
f
13.0688 87.5894 mo
13.0688 74.8662 li
30.9701 64.5308 li
51.2582 52.8174 li
51.2582 65.5405 li
13.0688 87.5894 li
f
53.6451 64.1621 mo
53.6451 51.439 li
71.5464 41.1039 li
73.9332 39.7255 li
82.4902 34.7856 li
82.4902 47.5088 li
53.6451 64.1621 li
f
33.3569 60.7657 mo
33.3569 48.0415 li
51.2582 37.706 li
53.6451 36.328 li
71.5464 25.9927 li
71.5464 38.7168 li
53.6451 49.0523 li
51.2582 50.4301 li
33.3569 60.7657 li
f
255.203 288.436 mo
255.128 261.734 li
324.339 221.775 li
324.414 248.477 li
255.203 288.436 li
.368627 .635294 .690196 rgb
f
278.36 280.353 mo
255.278 266.934 li
255.125 214.354 li
255.262 214.43 li
278.213 227.768 li
278.229 234.002 li
278.36 280.353 li
cp
.701961 .701961 .701961 rgb
f
347.426 187.811 mo
324.339 174.394 li
255.128 214.353 li
278.214 227.77 li
347.426 187.811 li
cp
1 1 1 rgb
f
347.575 240.39 mo
278.36 280.353 li
278.213 227.768 li
278.344 227.691 347.428 187.81 347.428 187.81 cv
347.444 194.198 li
347.575 240.39 li
cp
.901961 .901961 .901961 rgb
f
316.61 214.097 mo
281.338 234.462 li
281.338 275.191 li
316.61 254.827 li
316.61 214.097 li
cp
.6 .6 .6 rgb
f
314.578 235.636 mo
314.578 225.684 307.592 221.651 298.974 226.626 cv
290.356 231.602 283.37 243.702 283.37 253.653 cv
283.37 263.604 290.356 267.638 298.974 262.662 cv
307.592 257.687 314.578 245.586 314.578 235.636 cv
cp
.4 .4 .4 rgb
f
313.01 236.541 mo
313.01 227.59 306.726 223.961 298.974 228.438 cv
291.223 232.912 284.938 243.797 284.938 252.748 cv
284.938 261.698 291.223 265.327 298.974 260.852 cv
306.726 256.376 313.01 245.491 313.01 236.541 cv
cp
0 0 0 rgb
f
gsave
313.01 236.541 mo
313.01 227.59 306.726 223.961 298.974 228.438 cv
291.223 232.912 284.938 243.797 284.938 252.748 cv
284.938 261.698 291.223 265.327 298.974 260.852 cv
306.726 256.376 313.01 245.491 313.01 236.541 cv
clp
299.367 251.241 mo
299.367 247.95 296.861 244.338 295.581 245.077 cv
294.19 245.88 295.147 247.181 291.784 254.011 cv
289.571 258.505 291.946 259.11 295.581 256.998 cv
297.672 255.782 299.367 254.533 299.367 251.241 cv
cp
.501961 .501961 .501961 rgb
f
285.666 252.135 mo
288.518 250.489 292.897 245.066 292.897 243.588 cv
292.897 241.982 291.293 244.014 287.06 242.575 cv
284.273 241.628 282.563 245.358 282.574 249.548 cv
282.581 251.959 282.815 253.781 285.666 252.135 cv
cp
f
291.743 232.807 mo
291.743 236.099 294.248 239.71 295.529 238.971 cv
296.92 238.168 295.963 236.867 299.326 230.037 cv
301.539 225.543 299.163 224.938 295.529 227.051 cv
293.438 228.266 291.743 229.515 291.743 232.807 cv
cp
f
305.443 231.913 mo
302.593 233.56 298.212 238.981 298.212 240.46 cv
298.212 242.066 299.816 240.034 304.051 241.474 cv
306.836 242.421 308.548 238.689 308.535 234.5 cv
308.528 232.09 308.294 230.268 305.443 231.913 cv
cp
f
299.809 239.714 mo
299.809 237.082 297.96 236.016 295.681 237.331 cv
293.401 238.647 291.554 241.848 291.554 244.479 cv
291.554 247.111 293.401 248.179 295.681 246.862 cv
297.96 245.547 299.809 242.346 299.809 239.714 cv
cp
.2 .2 .2 rgb
f
292.763 247.151 mo
294.675 248.256 li
300.512 238.146 li
298.6 237.042 li
292.763 247.151 li
cp
f
301.721 240.818 mo
301.721 238.187 299.873 237.119 297.594 238.436 cv
295.314 239.751 293.466 242.952 293.466 245.584 cv
293.466 248.216 295.314 249.283 297.594 247.967 cv
299.873 246.65 301.721 243.45 301.721 240.818 cv
cp
.4 .4 .4 rgb
f
301.418 241.836 mo
301.418 239.863 300.033 239.063 298.323 240.05 cv
296.615 241.036 295.229 243.436 295.229 245.409 cv
295.229 247.383 296.615 248.183 298.323 247.195 cv
300.033 246.209 301.418 243.81 301.418 241.836 cv
cp
.2 .2 .2 rgb
f
grestore
287.878 269.41 mo
288.623 269.41 li
288.623 232.262 li
287.878 232.262 li
287.878 269.41 li
cp
.301961 .301961 .301961 rgb
f
293.24 266.314 mo
293.984 266.314 li
293.984 229.166 li
293.24 229.166 li
293.24 266.314 li
cp
f
298.602 263.219 mo
299.347 263.219 li
299.347 226.07 li
298.602 226.07 li
298.602 263.219 li
cp
f
303.964 260.123 mo
304.708 260.123 li
304.708 222.974 li
303.964 222.974 li
303.964 260.123 li
cp
f
309.325 257.027 mo
310.07 257.027 li
310.07 219.879 li
309.325 219.879 li
309.325 257.027 li
cp
f
282.981 238.896 mo
315.152 220.321 li
314.967 219.999 li
282.795 238.573 li
282.981 238.896 li
cp
f
282.981 242.272 mo
315.152 223.698 li
314.967 223.376 li
282.795 241.95 li
282.981 242.272 li
cp
f
282.981 245.649 mo
315.152 227.076 li
314.967 226.753 li
282.795 245.327 li
282.981 245.649 li
cp
f
282.981 249.027 mo
315.152 230.453 li
314.967 230.13 li
282.795 248.704 li
282.981 249.027 li
cp
f
282.981 252.404 mo
315.152 233.83 li
314.967 233.508 li
282.795 252.081 li
282.981 252.404 li
cp
f
282.981 255.781 mo
315.152 237.207 li
314.967 236.885 li
282.795 255.459 li
282.981 255.781 li
cp
f
282.981 259.158 mo
315.152 240.584 li
314.967 240.262 li
282.795 258.836 li
282.981 259.158 li
cp
f
282.981 262.535 mo
315.152 243.961 li
314.967 243.639 li
282.795 262.213 li
282.981 262.535 li
cp
f
282.981 265.912 mo
315.152 247.339 li
314.967 247.016 li
282.795 265.59 li
282.981 265.912 li
cp
f
282.981 269.29 mo
315.152 250.716 li
314.967 250.393 li
282.795 268.967 li
282.981 269.29 li
cp
f
314.688 217.428 mo
283.261 235.572 li
283.261 271.86 li
314.688 253.717 li
314.688 217.428 li
cp
282.516 235.143 mo
315.433 216.138 li
315.433 254.146 li
282.516 273.15 li
282.516 235.143 li
cp
f
347.444 194.198 mo
278.36 234.078 li
278.344 227.691 li
347.428 187.81 li
347.444 194.198 li
cp
.8 .8 .8 rgb
f
257.85 251.006 mo
269.104 257.462 li
268.706 257.233 268.459 256.74 268.459 256.04 cv
257.203 249.584 li
257.203 250.285 257.45 250.777 257.85 251.006 cv
cp
.901961 .901961 .901961 rgb
f
272.225 238.926 mo
260.969 232.47 li
259.382 233.357 li
270.637 239.813 li
272.225 238.926 li
cp
f
268.459 243.589 mo
257.203 237.133 li
257.203 249.584 li
268.459 256.04 li
268.459 243.589 li
cp
f
266.249 244.869 mo
259.413 240.948 li
259.413 245.191 li
266.249 249.111 li
266.249 244.869 li
cp
.301961 .301961 .301961 rgb
f
270.637 239.813 mo
259.382 233.357 li
258.179 234.047 257.203 235.736 257.203 237.133 cv
268.459 243.589 li
268.459 242.192 269.435 240.503 270.637 239.813 cv
cp
.8 .8 .8 rgb
f
268.459 256.04 mo
268.459 257.433 269.435 258.003 270.637 257.313 cv
272.225 256.427 li
272.225 238.926 li
270.637 239.813 li
269.435 240.503 268.459 242.192 268.459 243.589 cv
268.459 256.04 li
cp
1 1 1 rgb
f
332.041 241.413 mo
331.09 240.873 li
321.785 246.223 li
322.735 246.763 li
332.041 241.413 li
cp
.301961 .301961 .301961 rgb
f
322.735 246.763 mo
321.785 246.223 li
321.785 251.095 li
322.735 251.635 li
322.735 246.763 li
cp
f
332.041 241.413 mo
322.735 246.763 li
322.735 251.635 li
332.041 246.286 li
332.041 241.413 li
cp
1 1 1 rgb
f
343.467 234.816 mo
342.516 234.276 li
333.211 239.626 li
334.161 240.165 li
343.467 234.816 li
cp
.301961 .301961 .301961 rgb
f
334.161 240.165 mo
333.211 239.626 li
333.211 244.498 li
334.161 245.038 li
334.161 240.165 li
cp
f
343.467 234.816 mo
334.161 240.165 li
334.161 245.038 li
343.467 239.688 li
343.467 234.816 li
cp
1 1 1 rgb
f
343.494 199.813 mo
322.35 212.021 li
321.522 212.499 320.852 213.66 320.852 214.615 cv
320.852 216.192 li
320.852 217.146 321.522 217.534 322.35 217.056 cv
343.494 204.848 li
344.32 204.371 344.991 203.21 344.991 202.255 cv
344.991 200.678 li
344.991 199.723 344.32 199.336 343.494 199.813 cv
cp
.301961 .301961 .301961 rgb
f
344.072 200.147 mo
322.928 212.355 li
322.101 212.833 321.431 213.994 321.431 214.948 cv
321.431 216.526 li
321.431 217.48 322.101 217.868 322.928 217.39 cv
344.072 205.183 li
344.899 204.705 345.569 203.544 345.569 202.589 cv
345.569 201.012 li
345.569 200.057 344.899 199.67 344.072 200.147 cv
cp
1 1 1 rgb
f
343.494 207.889 mo
322.35 220.097 li
321.522 220.574 320.852 221.735 320.852 222.69 cv
320.852 224.268 li
320.852 225.222 321.522 225.609 322.35 225.132 cv
343.494 212.924 li
344.32 212.447 344.991 211.286 344.991 210.331 cv
344.991 208.753 li
344.991 207.798 344.32 207.412 343.494 207.889 cv
cp
.301961 .301961 .301961 rgb
f
344.072 208.223 mo
322.928 220.431 li
322.101 220.908 321.431 222.069 321.431 223.024 cv
321.431 224.601 li
321.431 225.556 322.101 225.943 322.928 225.466 cv
344.072 213.258 li
344.899 212.781 345.569 211.62 345.569 210.665 cv
345.569 209.087 li
345.569 208.132 344.899 207.746 344.072 208.223 cv
cp
1 1 1 rgb
f
343.494 215.965 mo
322.35 228.173 li
321.522 228.649 320.852 229.811 320.852 230.766 cv
320.852 232.343 li
320.852 233.298 321.522 233.686 322.35 233.207 cv
343.494 221 li
344.32 220.522 344.991 219.361 344.991 218.406 cv
344.991 216.829 li
344.991 215.874 344.32 215.487 343.494 215.965 cv
cp
.301961 .301961 .301961 rgb
f
344.072 216.299 mo
322.928 228.507 li
322.101 228.984 321.431 230.146 321.431 231.1 cv
321.431 232.677 li
321.431 233.632 322.101 234.019 322.928 233.541 cv
344.072 221.333 li
344.899 220.856 345.569 219.695 345.569 218.74 cv
345.569 217.163 li
345.569 216.208 344.899 215.821 344.072 216.299 cv
cp
1 1 1 rgb
f
261.004 267.159 mo
261.744 266.732 li
262.14 266.504 262.384 266.015 262.384 265.318 cv
262.384 263.927 261.406 262.233 260.2 261.537 cv
259.598 261.189 259.052 261.156 258.656 261.385 cv
257.917 261.812 li
261.004 267.159 li
cp
.301961 .301961 .301961 rgb
f
257.277 263.225 mo
257.277 261.833 258.255 261.269 259.46 261.965 cv
260.666 262.661 261.644 264.354 261.644 265.746 cv
261.644 267.139 260.666 267.703 259.46 267.007 cv
258.255 266.311 257.277 264.617 257.277 263.225 cv
cp
.8 .8 .8 rgb
f
250.86 262.257 mo
250.276 261.92 li
249.965 261.739 249.534 261.766 249.058 262.04 cv
248.106 262.59 247.335 263.926 247.335 265.024 cv
247.335 265.574 247.527 265.96 247.84 266.141 cv
248.424 266.478 li
250.86 262.257 li
cp
.301961 .301961 .301961 rgb
f
249.643 266.357 mo
248.69 266.906 247.919 266.461 247.919 265.362 cv
247.919 264.264 248.69 262.927 249.643 262.378 cv
250.594 261.828 251.365 262.273 251.365 263.372 cv
251.365 264.472 250.594 265.808 249.643 266.357 cv
cp
.8 .8 .8 rgb
f
249.628 263.024 mo
248.963 263.408 248.424 264.343 248.424 265.11 cv
248.424 265.52 248.579 265.793 248.822 265.907 cv
251.246 267.311 li
253.164 268.417 255.912 268.501 257.638 267.505 cv
260.41 265.904 li
260.629 265.758 260.756 265.497 260.756 265.128 cv
260.756 264.36 260.217 263.427 259.552 263.042 cv
259.231 262.858 258.943 262.838 258.728 262.947 cv
255.935 264.555 li
255.322 264.908 253.885 264.9 252.949 264.36 cv
250.534 262.966 li
250.278 262.816 249.971 262.826 249.628 263.024 cv
cp
.901961 .901961 .901961 rgb
f
261.541 260.123 mo
262.281 259.695 li
262.676 259.467 262.92 258.979 262.92 258.282 cv
262.92 256.89 261.943 255.196 260.737 254.5 cv
260.135 254.152 259.588 254.119 259.193 254.348 cv
258.453 254.774 li
261.541 260.123 li
cp
.301961 .301961 .301961 rgb
f
257.813 256.188 mo
257.813 254.796 258.791 254.231 259.997 254.928 cv
261.202 255.624 262.18 257.316 262.18 258.709 cv
262.18 260.102 261.202 260.666 259.997 259.97 cv
258.791 259.273 257.813 257.58 257.813 256.188 cv
cp
.8 .8 .8 rgb
f
251.397 255.22 mo
250.813 254.883 li
250.501 254.702 250.07 254.729 249.595 255.003 cv
248.643 255.553 247.871 256.889 247.871 257.988 cv
247.871 258.537 248.064 258.924 248.376 259.104 cv
248.96 259.44 li
251.397 255.22 li
cp
.301961 .301961 .301961 rgb
f
250.179 259.32 mo
249.227 259.869 248.456 259.424 248.456 258.325 cv
248.456 257.227 249.227 255.89 250.179 255.341 cv
251.13 254.791 251.902 255.236 251.902 256.336 cv
251.902 257.435 251.13 258.771 250.179 259.32 cv
cp
.8 .8 .8 rgb
f
250.164 255.987 mo
249.499 256.371 248.96 257.306 248.96 258.073 cv
248.96 258.482 249.115 258.756 249.358 258.87 cv
251.783 260.273 li
253.7 261.381 256.448 261.464 258.174 260.468 cv
260.946 258.867 li
261.166 258.721 261.292 258.461 261.292 258.092 cv
261.292 257.323 260.753 256.39 260.088 256.005 cv
259.769 255.82 259.479 255.801 259.265 255.91 cv
256.471 257.518 li
255.858 257.871 254.421 257.863 253.486 257.323 cv
251.071 255.929 li
250.814 255.779 250.508 255.789 250.164 255.987 cv
cp
.901961 .901961 .901961 rgb
f
330.389 359.611 mo
330.389 359.611 333.499 364.897 333.81 369.147 cv
334.121 373.396 334.742 375.885 330.389 377.75 cv
326.036 379.616 322.897 375.781 320.994 375.678 cv
319.091 375.573 310.103 376.978 308.029 375.423 cv
305.956 373.868 303.144 369.747 310.688 367.663 cv
315.88 366.229 319.194 360.233 319.194 360.233 cv
330.389 359.611 li
cp
0 0 0 rgb
f
313.016 323.964 mo
318.286 338.572 316.95 362.145 316.95 362.145 cv
315.843 363.996 330.118 372.298 334.598 365.798 cv
334.797 365.509 334.498 360.377 334.62 358.612 cv
335.231 349.815 332.903 328.164 333.495 320.987 cv
322.281 312.803 li
322.404 311.232 322.374 309.458 322.343 307.624 cv
322.23 302.007 322.078 295.819 326.043 293.189 cv
319.998 292.832 314.851 293.077 313.016 294.402 cv
308.774 297.46 307.756 309.346 313.016 323.964 cv
.0666667 .188235 .301961 rgb
f
345.8 333.783 mo
345.905 333.862 346.011 333.942 346.117 334.021 cv
349.923 336.664 354.231 338.885 358.672 339.783 cv
361.605 340.364 364.592 340.364 367.552 339.545 cv
379.473 336.215 378.627 319.458 376.961 309.493 cv
376.776 308.384 376.592 307.353 376.406 306.428 cv
376.353 306.216 li
376.195 305.396 376.036 304.71 375.904 304.101 cv
375.798 303.626 375.692 303.229 375.613 302.912 cv
375.455 302.357 375.375 302.04 375.375 302.04 cv
373.922 301.775 360.442 299.397 351.139 297.124 cv
349.844 306.058 li
348.39 316.075 li
348.02 318.507 li
347.2 324.136 li
345.8 333.783 li
.129412 .294118 .443137 rgb
f
323.22 296.176 mo
323.954 294.973 324.881 293.954 326.043 293.189 cv
329.326 293.383 332.862 293.75 336.288 294.219 cv
338.061 294.463 339.805 294.728 341.457 295.014 cv
344.29 295.503 346.869 296.043 349.041 296.605 cv
349.705 296.779 350.408 296.956 351.131 297.133 cv
345.8 333.782 li
337.767 328.133 332.048 320.804 332.048 320.804 cv
331.925 320.702 li
327.776 317.339 li
321.467 312.211 li
321.15 310.528 320.936 308.734 320.886 306.94 cv
320.783 303.016 321.426 299.07 323.22 296.176 cv
.0666667 .188235 .301961 rgb
f
329.536 317.967 mo
333.685 321.33 li
333.277 308.853 339.984 299.434 343.216 295.642 cv
341.564 295.356 339.821 295.091 338.048 294.847 cv
330.127 302.798 329.281 312.931 329.536 317.967 cv
.984314 .690196 .231373 rgb
f
323.237 296.148 mo
323.969 294.957 324.89 293.947 326.043 293.189 cv
324.89 293.948 323.969 294.957 323.237 296.148 cv
.0392157 .113725 .211765 rgb
f
329.966 298.972 mo
328.334 298.021 326.842 297.296 325.636 296.95 cv
324.738 296.696 323.933 296.431 323.22 296.176 cv
323.225 296.166 323.231 296.157 323.237 296.148 cv
323.969 294.957 324.89 293.948 326.043 293.189 cv
326.043 293.189 li
326.855 293.237 327.682 293.295 328.52 293.364 cv
328.761 294.383 329.123 295.51 329.545 296.728 cv
329.545 296.728 li
329.966 298.972 li
f
285.979 391.998 mo
290.782 400.785 li
290.782 400.785 294.5 407.834 294.415 410.325 cv
294.33 412.815 294.841 414.854 289.403 416.129 cv
283.967 417.403 281.173 418.667 276.066 421.141 cv
274.497 421.9 261.957 424.794 261.25 422.557 cv
261.25 422.557 257.364 416.846 269.375 410.722 cv
279.265 405.681 277.426 398.828 277.426 398.828 cv
285.979 391.998 li
cp
0 0 0 rgb
f
274.622 403.666 mo
280.384 409.956 294.154 402.477 294.154 402.477 cv
294.154 402.477 293.335 395.789 292.859 388.389 cv
292.489 381.676 292.383 374.381 293.493 370.865 cv
296.374 361.509 291.273 347.422 291.273 347.422 cv
293.044 347.977 295.581 348.426 298.489 348.77 cv
305.546 349.615 315.008 349.906 322.541 350.012 cv
328.224 350.012 li
332.373 350.012 335.095 349.959 335.095 349.959 cv
344.61 351.835 356.504 351.307 365.173 342.638 cv
366.072 341.766 366.839 340.761 367.473 339.704 cv
367.552 339.545 li
369.429 336.427 370.353 332.699 370.75 329.132 cv
371.306 323.978 370.83 319.167 370.513 316.867 cv
370.38 315.969 370.274 315.467 370.274 315.467 cv
366.522 313.749 li
365.913 313.458 li
349.844 306.058 li
336.549 299.952 li
329.545 296.728 li
332.69 313.484 li
333.747 319.035 li
329.836 319.009 330.311 319.405 326.162 320.039 cv
325.264 320.198 324.311 320.251 323.387 320.304 cv
322.461 320.383 321.51 320.462 320.532 320.516 cv
311.176 321.572 301.502 323.925 295 325.722 cv
294.102 325.96 293.282 326.198 292.516 326.436 cv
289.185 327.387 287.203 328.048 287.203 328.048 cv
287.203 328.048 273.617 330.929 272.402 338.911 cv
271.212 346.893 274.173 386.909 274.675 392.01 cv
275.177 397.085 274.622 403.666 274.622 403.666 cv
.129412 .294118 .443137 rgb
f
321.642 345.65 mo
322.012 347.606 322.329 349.14 322.541 350.012 cv
328.224 350.012 li
327.722 348.478 327.298 346.973 326.981 345.519 cv
323.862 332.938 325.422 323.29 326.162 320.039 cv
325.264 320.145 324.338 320.251 323.387 320.304 cv
322.461 320.383 321.51 320.462 320.532 320.516 cv
319.025 328.683 320.478 339.387 321.642 345.65 cv
.984314 .690196 .231373 rgb
f
322.872 336.459 mo
349.982 340.114 352.001 325.631 351.914 319.575 cv
354.06 319.575 li
354.412 325.069 353.206 339.029 330.431 339.029 cv
328.004 339.029 325.396 338.855 322.6 338.479 cv
322.872 336.459 li
cp
f
335.806 177.271 mo
336.774 -30.3456 li
336.782 -30.9087 337.227 -31.3476 337.808 -31.3506 cv
338.371 -31.3427 338.821 -30.8799 338.813 -30.3168 cv
337.844 177.271 li
337.571 193.622 337.246 217.796 337.523 227.591 cv
337.954 242.886 338.404 305.445 338.409 306.076 cv
338.413 306.639 337.96 307.099 337.39 307.103 cv
336.83 307.103 336.375 306.651 336.37 306.091 cv
336.365 305.461 335.915 242.922 335.484 227.649 cv
335.208 217.824 335.532 193.64 335.806 177.271 cv
.458824 .298039 .141176 rgb
f
340.151 213.178 mo
344.089 210.904 348.592 209.328 352.968 208.505 cv
352.838 208.427 352.721 208.344 352.587 208.267 cv
345.247 204.03 335.769 199.614 326.147 205.167 cv
315.61 211.25 324.176 216.195 331.516 220.433 cv
331.671 220.522 331.836 220.602 331.994 220.688 cv
333.4 218.127 336.156 215.484 340.151 213.178 cv
cp
.0666667 .188235 .301961 rgb
f
327.622 272.107 mo
327.681 273.296 li
327.681 274.854 327.745 275.114 327.799 276.7 cv
328.089 284.18 328.197 291.389 328.224 291.573 cv
328.329 293.001 328.857 294.745 329.545 296.728 cv
331.236 301.591 333.88 307.855 333.8 314.013 cv
333.8 314.356 333.773 314.7 333.747 315.07 cv
333.747 315.388 335.412 315.704 338.108 315.942 cv
338.399 315.942 338.69 315.969 338.98 315.995 cv
341.518 316.154 344.821 316.207 348.39 316.075 cv
354.179 315.863 360.681 315.123 365.913 313.458 cv
366.574 313.247 367.208 313.009 367.816 312.77 cv
371.173 311.449 373.764 309.679 374.952 307.3 cv
375.402 306.401 375.666 305.45 375.666 304.393 cv
375.692 303.996 375.666 303.573 375.613 303.124 cv
375.613 302.912 li
375.561 299.688 li
375.534 296.516 li
375.878 279.362 378.996 276.587 380.529 264.535 cv
380.926 261.31 380.159 258.509 380.159 255.707 cv
380.266 240.801 371.306 235.515 371.306 235.515 cv
371.306 235.515 370.697 234.801 367.764 234.643 cv
365.913 234.536 363.508 234.694 360.601 235.408 cv
357.693 236.148 354.765 238.478 350.88 240.724 cv
346.254 243.394 340.329 246.509 335.756 251.108 cv
334.461 252.403 333.272 253.725 332.161 255.072 cv
330.761 256.765 330.308 259.163 329.329 260.802 cv
328.087 262.916 327.622 266.927 327.622 272.107 cv
.129412 .294118 .443137 rgb
f
375.971 274.498 mo
370.702 280.273 362.858 286.966 352.966 291.571 cv
352.966 267.825 348.966 251.727 335.756 251.122 cv
340.322 246.518 345.766 242.4 350.39 239.707 cv
354.273 237.464 357.688 236.156 360.595 235.415 cv
373.844 238.029 377.103 257.678 375.971 274.498 cv
cp
1 1 1 rgb
f
343.541 240.365 mo
337.054 236.551 li
334.089 234.987 332.937 229.377 332.473 225.253 cv
331.499 216.607 li
332.963 211.107 li
353.138 210.008 li
358.297 223.481 li
355.902 236.892 li
343.541 240.365 li
cp
.968627 .6 .454902 rgb
f
341.137 246.751 mo
341.179 235.557 li
353.907 230.729 li
359.857 237.352 li
356.291 243.213 349.433 245.716 341.137 246.751 cv
cp
f
333.339 218.783 mo
336.852 222.161 li
337.695 222.834 338.261 223.796 338.439 224.861 cv
339.156 229.147 li
342.001 231.3 li
342.139 235.654 li
342.139 235.654 347.038 241.104 354.896 237.444 cv
360.368 234.896 359.401 233.95 360.353 223.931 cv
360.951 217.624 360.521 211.509 354.247 207.151 cv
348.536 203.184 339.835 204.209 335.756 208.722 cv
333.628 211.076 331.251 216.132 333.339 218.783 cv
cp
0 0 0 rgb
f
342.669 228.096 mo
343.235 228.945 343.409 229.995 343.462 231.015 cv
343.51 231.945 343.451 232.936 342.932 233.708 cv
342.412 234.481 341.296 234.916 340.51 234.416 cv
339.401 233.709 338.313 229.869 338.492 228.544 cv
338.792 226.319 341.599 226.494 342.669 228.096 cv
cp
.968627 .6 .454902 rgb
f
347.982 293.989 mo
343.925 296.218 340.371 297.358 337.108 297.411 cv
332.706 297.517 330.847 294.847 328.727 289.546 cv
328.7 289.175 327.432 278.757 327.432 278.359 cv
327.192 269.554 325.2 265.823 328.595 260.068 cv
329.576 258.424 330.769 256.753 332.149 255.082 cv
332.706 255.082 li
346.683 254.153 347.293 273.594 347.982 293.989 cv
1 1 1 rgb
f
381.2 255.435 mo
381.181 258.244 380.927 261.308 380.518 264.547 cv
379.678 252.391 377.414 238.731 367.756 234.653 cv
370.683 234.79 372.244 235.513 372.244 235.513 cv
372.244 235.513 381.298 240.546 381.2 255.435 cv
cp
.94902 .94902 .94902 rgb
f
344.898 227.259 mo
339.963 226.985 334.265 222.821 331.516 220.433 cv
331.516 220.433 328.855 207.313 339.284 203.844 cv
360.55 196.771 360.809 219.576 360.809 219.576 cv
359.492 225.375 354.619 227.259 344.898 227.259 cv
cp
.129412 .294118 .443137 rgb
f
332.69 313.484 mo
333.747 319.035 li
338.61 321.942 343.103 323.502 347.2 324.136 cv
357.588 325.748 365.464 321.281 370.513 316.867 cv
372.283 315.309 373.685 313.775 374.741 312.507 cv
376.222 310.735 376.961 309.493 376.961 309.493 cv
376.406 306.428 li
376.353 306.216 li
375.957 304.022 li
375.825 304.207 375.746 304.313 375.666 304.393 cv
375.481 304.684 375.243 304.974 375.032 305.265 cv
372.706 308.331 370.301 310.815 367.816 312.77 cv
367.394 313.114 366.971 313.432 366.522 313.749 cv
360.76 317.819 354.574 319.22 348.02 318.507 cv
344.795 318.136 341.491 317.264 338.108 315.942 cv
336.681 315.388 335.254 314.753 333.8 314.013 cv
333.43 313.854 333.061 313.67 332.69 313.484 cv
.984314 .690196 .231373 rgb
f
320.532 320.516 mo
321.451 320.413 322.371 320.366 323.281 320.313 cv
322.389 320.389 321.473 320.464 320.532 320.516 cv
.0352941 .121569 .215686 rgb
f
292.516 326.436 mo
293.282 326.198 294.102 325.96 295 325.722 cv
301.502 323.925 311.176 321.572 320.532 320.516 cv
320.354 321.479 320.218 322.477 320.117 323.5 cv
311.67 324.046 301.809 324.944 292.516 326.436 cv
325.598 323.181 mo
325.786 321.834 325.995 320.773 326.162 320.039 cv
326.162 320.039 li
330.181 319.425 329.861 319.034 333.39 319.034 cv
333.505 319.034 333.624 319.034 333.747 319.035 cv
333.747 319.035 li
333.747 319.035 li
336.333 320.581 338.814 321.745 341.186 322.593 cv
341.191 322.605 341.196 322.617 341.201 322.63 cv
339.234 322.677 333.36 322.779 325.598 323.181 cv
.0705882 .188235 .317647 rgb
f
320.117 323.5 mo
320.218 322.477 320.354 321.479 320.532 320.516 cv
320.532 320.516 li
320.532 320.516 li
321.473 320.464 322.389 320.389 323.281 320.313 cv
324.255 320.255 325.219 320.189 326.162 320.039 cv
325.995 320.773 325.786 321.834 325.598 323.181 cv
323.859 323.271 322.023 323.377 320.117 323.5 cv
.552941 .447059 .164706 rgb
f
328.52 293.363 mo
328.52 293.363 li
328.368 292.723 328.264 292.124 328.224 291.573 cv
328.197 291.389 327.377 284.358 327.087 276.878 cv
327.351 276.825 li
327.371 276.82 li
327.396 277.316 327.417 277.828 327.432 278.359 cv
327.432 278.549 327.72 281.019 328.025 283.591 cv
328.15 288.082 328.206 291.448 328.224 291.573 cv
328.264 292.124 328.368 292.723 328.52 293.363 cv
.258824 .478431 .572549 rgb
f
339.064 316.304 mo
338.746 316.188 338.428 316.067 338.108 315.942 cv
338.108 315.942 li
338.108 315.942 li
338.399 315.942 338.69 315.969 338.98 315.995 cv
338.98 315.995 li
339.008 316.098 339.036 316.201 339.064 316.304 cv
333.8 314.013 mo
333.434 313.856 333.069 313.674 332.703 313.49 cv
329.545 296.728 li
331.236 301.591 333.88 307.855 333.8 314.013 cv
333.8 314.013 li
.0705882 .188235 .317647 rgb
f
338.98 315.995 mo
338.69 315.969 338.399 315.942 338.108 315.942 cv
338.108 315.942 li
336.681 315.388 335.254 314.753 333.8 314.013 cv
333.8 314.013 li
333.8 314.013 li
333.88 307.855 331.236 301.591 329.545 296.728 cv
329.545 296.728 li
329.123 295.51 328.761 294.383 328.52 293.363 cv
328.368 292.723 328.264 292.124 328.224 291.573 cv
328.206 291.448 328.15 288.082 328.025 283.591 cv
328.359 286.41 328.713 289.352 328.727 289.546 cv
330.737 294.572 332.512 297.233 336.443 297.405 cv
336.444 298.246 336.496 299.086 336.549 299.952 cv
336.814 305.186 337.553 310.683 338.98 315.995 cv
f
336.443 297.405 mo
332.512 297.233 330.737 294.572 328.727 289.546 cv
328.713 289.352 328.359 286.41 328.025 283.591 cv
327.72 281.019 327.432 278.549 327.432 278.359 cv
327.417 277.828 327.396 277.316 327.371 276.82 cv
342.622 273.296 li
341.592 276.732 336.152 287.397 336.443 297.389 cv
336.443 297.394 336.443 297.4 336.443 297.405 cv
.564706 .647059 .721569 rgb
f
341.186 322.593 mo
338.814 321.745 336.333 320.581 333.747 319.035 cv
333.747 319.035 li
332.703 313.49 li
333.069 313.674 333.434 313.856 333.8 314.013 cv
333.8 314.013 li
335.254 314.753 336.681 315.388 338.108 315.942 cv
338.108 315.942 li
338.428 316.067 338.746 316.188 339.064 316.304 cv
339.653 318.457 340.36 320.561 341.186 322.593 cv
.552941 .447059 .164706 rgb
f
289.049 288.436 mo
283.195 287.306 li
279.673 286.893 276.497 286.056 274.316 284.006 cv
272.395 281.262 270.754 278.55 270.149 275.955 cv
272.417 276.588 274.63 276.852 276.763 276.585 cv
278.679 274.058 li
276.999 270.437 li
276.314 269.043 277.049 267.983 278.761 269.521 cv
281.655 272.236 li
283.938 277.727 li
295.567 284.28 li
289.049 288.436 li
cp
.968627 .6 .454902 rgb
f
318.42 273.801 mo
321.757 269.859 325.446 265.501 328.601 260.076 cv
334.911 250.3 349.982 263.842 342.694 277.575 cv
339.648 282.029 335.77 285.735 331.672 289.048 cv
324.222 287.584 319.012 280.956 318.42 273.801 cv
cp
1 1 1 rgb
f
283.938 277.727 mo
291.038 279.801 312.201 281.735 312.201 281.735 cv
313.878 279.163 316.063 276.582 318.42 273.801 cv
319.012 280.956 324.222 287.584 331.672 289.048 cv
326.688 293.077 322.505 294.062 317.887 297.414 cv
312.118 299.24 285.114 287.677 285.114 287.677 cv
282.209 287.67 282.127 280.63 283.938 277.727 cv
cp
.968627 .6 .454902 rgb
f
367.552 339.545 mo
369.429 336.427 370.353 332.699 370.75 329.132 cv
370.75 329.132 li
371.146 328.497 371.49 327.836 371.808 327.176 cv
373.975 322.63 374.503 317.607 374.741 312.507 cv
374.741 312.507 li
376.222 310.735 376.961 309.493 376.961 309.493 cv
376.961 309.493 li
377.478 312.588 377.917 316.337 377.918 320.136 cv
377.919 323.75 377.525 327.41 376.428 330.592 cv
374.964 334.836 372.249 338.233 367.552 339.545 cv
376.961 309.493 mo
376.406 306.428 li
376.592 307.353 376.776 308.384 376.961 309.493 cv
.0705882 .188235 .317647 rgb
f
375.903 304.097 mo
375.797 303.624 375.692 303.229 375.613 302.912 cv
375.692 303.229 375.798 303.626 375.957 304.022 cv
375.938 304.049 375.92 304.074 375.903 304.097 cv
level3{
gsave
clp
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
/4 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~+]ED);fX$[EZnA%+]ED);fX$[EZnA%+]ED*;fX'\E["G&,#`M+;fX'\E["G&,?&V-;fX*]E[+M',?&V-
;fX-^E[4S(,ZJe0<,s9aE[=\*-<,"4<,s<cE[Fe,-WP17<H9HeE[Ok--rk:9<H9KfF"(+1.91F=<HBWj
F"143.op^A<c]clF"C@5/66gC<c]inF"LI7/Q[!G=*-)sF>$a<03E<M=EH6!F>6m>0j&NP=EH<#F>I'A
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-2.75433e-14 -449.816 -449.816 2.75433e-14 295.092 450 ]ct
clp
/4 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<VdL+<_mO+X&!P+X&!P+X&!P+X&!P+X&!P+X&!P+X/*S
+sJ3T+sJ3T+sJ3T+sJ3T+sJ3T+sJ6V,9nEX,9nEX,9nEX,9nHZ,U=W\,U=Z^,pai`,pai`,pai`,palb
-71&d-71&d-71&d-71&e-RU8h-RU8h-RU8i-n$Jl-n$Jm.4H\p.4H\p.4H\q.Olnt.Olnt.Olnu.k<,#
.k<,#.k<,#/1`>'/1`>'/1`>'/M/P+/hSb//hSb//hSb/0/"t30/"t30JG170JG170JG170ekC;1,:U?
~>
<~;GpCj;GpCj;GpCj;GpCj;GpCj;GpCj;GpCj;GpCj;GpCj;GpCj;GpCj;GpCj;GpCj;GpCj;GpCj;GpCj
;GpCj;GpCj;GpCj;GpCj;GpCj;GpCj;GpCj;GpFl;c?Un;c?Un;c?Un;c?Un;c?Un;c?Xp<)cgr<)cgr
<)cgr<)cgr<)cgr<)cgr<)cgr<)cgr<)cgr<)cgr<)cgr<)cgs<E3%!<E3%!<E3%!<E3%!<E3%!<E3%!
<E3%!<E3%!<E3%!<`W7%<`W7%<`W7%<`W7%='&I)='&I)='&I)='&I)='&I)='&I)='&I)='&I)=BJ[-
~>
<~EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<
EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<
EH,u<EH,u<EH,u<EH,u<EH,u<EH,u=EcQ2@EcQ2@EcQ2@EcQ2@EcQ2@EcQ2@EcQ2@EcQ2@EcQ2@EcQ2@
EcQ2@EcQ2@EcQ2@EcQ2@EcQ2@F)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDDF)uDD
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /4 /Gradient get_res exec grestore
}if
np
375.666 304.393 mo
375.666 304.393 li
375.692 303.996 375.666 303.573 375.613 303.124 cv
375.613 302.912 li
375.613 302.912 li
375.692 303.229 375.797 303.624 375.903 304.097 cv
375.802 304.237 375.735 304.325 375.666 304.393 cv
375.666 304.393 li
.0705882 .188235 .317647 rgb
f
292.859 388.389 mo
290.771 382.786 290.11 376.521 289.74 370.47 cv
289.212 361.298 289.608 350.805 285.485 342.585 cv
296.976 344.623 308.662 345.655 320.332 345.655 cv
320.768 345.655 321.206 345.653 321.642 345.65 cv
321.642 345.65 li
322.012 347.606 322.329 349.14 322.541 350.012 cv
315.008 349.906 305.546 349.615 298.489 348.77 cv
295.581 348.426 293.044 347.977 291.273 347.422 cv
291.273 347.422 li
291.273 347.422 li
291.273 347.422 294.371 355.977 294.375 364.181 cv
294.376 366.505 294.129 368.8 293.493 370.865 cv
292.832 372.96 292.602 376.395 292.603 380.249 cv
292.603 382.866 292.71 385.675 292.859 388.389 cv
343.833 350.845 mo
340.812 350.845 337.853 350.503 335.095 349.959 cv
335.095 349.959 332.373 350.012 328.224 350.012 cv
328.224 350.012 li
327.722 348.478 327.298 346.973 326.981 345.519 cv
329.941 345.439 332.901 345.28 335.862 345.043 cv
342.865 344.487 349.923 343.536 356.398 340.841 cv
357.165 340.523 357.904 340.18 358.672 339.783 cv
363.562 337.352 367.948 333.783 370.75 329.132 cv
370.353 332.699 369.429 336.427 367.552 339.545 cv
367.552 339.545 li
367.473 339.704 li
366.839 340.761 366.072 341.766 365.173 342.638 cv
359.017 348.794 351.235 350.845 343.833 350.845 cv
f
328.224 350.012 mo
322.541 350.012 li
322.541 350.012 li
322.329 349.14 322.012 347.606 321.642 345.65 cv
323.413 345.624 325.21 345.598 326.981 345.519 cv
326.981 345.519 li
327.298 346.973 327.722 348.478 328.224 350.012 cv
328.224 350.012 li
.552941 .447059 .164706 rgb
f
375.03 305.267 mo
375.031 305.249 375.032 305.23 375.032 305.212 cv
375.085 304.154 375.164 303.071 375.27 302.014 cv
375.349 301.221 375.455 300.454 375.561 299.688 cv
375.613 302.912 li
375.613 303.124 li
375.666 303.573 375.692 303.996 375.666 304.393 cv
375.666 304.393 li
375.481 304.684 375.243 304.974 375.032 305.265 cv
375.031 305.266 375.031 305.266 375.03 305.267 cv
.0705882 .188235 .317647 rgb
f
374.741 312.507 mo
374.847 310.763 374.873 309.018 374.952 307.3 cv
374.979 306.629 375.005 305.985 375.03 305.267 cv
375.031 305.266 375.031 305.266 375.032 305.265 cv
375.243 304.974 375.481 304.684 375.666 304.393 cv
375.666 304.393 li
375.735 304.325 375.802 304.237 375.903 304.097 cv
375.92 304.074 375.938 304.049 375.957 304.022 cv
375.957 304.022 li
376.353 306.216 li
376.406 306.428 li
376.406 306.428 li
376.961 309.493 li
376.961 309.493 li
376.961 309.493 376.222 310.735 374.741 312.507 cv
.552941 .447059 .164706 rgb
f
grestore
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 /1 /2 /3 /4 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 24.1.2
%%Title: (isometric air conditioning.eps)
%%CreationDate: 12/21/2022 7:43 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj9=QoCqjff@B?J5bV"HYU%C"FNX`MQE@7EWC[MoA8@M)oXssKp1J!u`""MYl.qp^2*NCqa4`EIBkB2bkN9(XG-tGP?=n!Q
%XD5>TCe1EpY&!n4HZO6]9*\e05D1)2aO^ddMH=Z^2eiN"g!&!h[754;bPcO`g5^LdDd;\#="`*RB\B[q\:uu2/U=d%.XN,B7`B4Y
%Am-RV32=R89o&rZi'#JiZ`ORr%_YmN$3=j>^'C.\E0`a`)q)1*!B8f=FlC+F1DmGlD;jD%r2XZuL&:48@4l!j9CUfC%Da`Ql0->G
%0reWu&f?6g4)@)l'Lb(=.,;%KM.q#`,f^i+@d5j@0a5LW(.;QAeVQTD_M86^ZIE\JgfCCTrC$*0>GeFjTiZHg$`N*c`o($NQWi7X
%E80K?C'lNu"h1U&9dRPU7nStS62;rbo/#br0tU*B>g!QU$\J'/iB>eGAuL+Np[aaW<rl!#1F0WqIK\5g!E']3OP$g.?DUtO>97bq
%2taQ-Q8t<$:\^Us(g)Cl/i.b:(l"e;9?u"`Y\_RkJRh'u=?s)NpYuB]k^>+05?>1YSm1h*5-nf=Xi&T%^f8C_^qDr-TO%70a44&q
%Ra37JUH2q`<qOO2h&uP`fd4oOeWt[_&4^WudVHZqWKl5j+01j4GM__q/)0Jf%gN:41YJgUeYCh)'m/+cT^(=:2/\5W@7l)u.3u6r
%`hY4D#8ktZ6)[$.S_U3:rB)c"9WjSAARVe0_l27(PV,VZ<FBQY=`DD':n*GB0c3\%f*q=>BrC@Fs%_a,^Za#UXd3&U1_/PY\Xh*g
%eC-L7R.Yd5R&a5k8"04?"m3#*E%TZorO9TF]n7TaFh]\"38:Q$KMiNu^41'&]sH&YbADL7fr2=E>LeYcrHep?@dVt"::rooepoq:
%C4#,NiF,Sf+Onbu)K#T(JELg;Zs0O`%S75sg$gik(?3bPkMJ8h@I+',"UQUBHM+mOY15lGX)N&Vgb69>\"V3-DM$W>n*n>NFpaDN
%J6qPYX>GK4lHh)H$AH$QrdY!B=0]%t^1gQSojS5RiKi7'L,o1j[L-*jV=S;hr,Q\c>e4a]orCtVb;S)!/+'99.sLTBGi*ASn2krM
%0aD=u7DHD^<<70J_fi$@"o6XtFdt\(_^i3Vj<3OBi$9&PC0O\QAo*Mt:!9r6X]e-q8Et6f^^s`IBA[i95Kdk_j6Rl:39*]q\ta[Y
%!5?p&3=\j=O&FLb4tb]c)u$@7NMq$fo\kcVL#T$j1#$a`\TMCNjTI4a.@7pR[7jO@]s#$CpuF0R75\-!Wtq2\jOIb%/cq`@`@CW.
%b'C*oC0#rGL+)q:UK&e.]u-JeQ5@DMGm4p`G[ai_^422ZfkPckg2+:<'$P^'g;7j;l;h:^](AQ4LNK8h0^D%\`V]BngqWUEr]Q#G
%]_)3Hh?[EQh(,\3qtK#-f=eKG.moZ`?g>u.09\$Q?c'Q;>g.r5++J,-(2LfkLFZ/%NioIKJ]iU;-&$iG-/gWC!r:R0(5#8hFE7Pe
%F`[N\4Yq"gl,pg'W9d7O-V_JmFE*MlV9="mnhMT!F?+;K;(W*jV3E+38j`rq5`h>De;XpIer@>)1U:t2%*,TG3$<[tAJi;B"uCA+
%+kB(gj?scd$sZnS$Sht_<#>]::eB%0#$gIVcZ;4l1\^?$]73VSmaL9Zb8bJ(TmK!dV&0qF?2ZMTo<:OtoGXOXqbGu#4e\Tk%,Zd0
%kt<a9;lTMWU]6;^f/H[pc=Pf+\+:;V$2S$$;$Ea4]G'+ZX*<Cflg$4TF7IU'r6&^rg%dGgZIB%,W^5^mQ%;SJClYY\>fb#+GYr6!
%Iri2_j+0KF3W+M<KVJUgM?=ZTPH:1).h<GT+WO/%^,WDX>_5Ea(;Ze$Lh"i+Z'hG.R\u:[JYSUP1QH<\_k;OsRP],'_M&C@"l_um
%&-_P,n:iqC0&[XD+Y8KS_&Og)=4YJRH"Yrana((&oF/o^(d]q/T\:`'D*oHDb@Yd_HtGOJOk$cH/e3NYJ4;9"(''P^c"+06>W*,E
%H?LO2k?&49VjtgGct"I;hTe-l9J2gXjmotTg]hmCoNc@e?[feuhL@hKOS[3PYMZilcc(5`&\7simbbohs,u3]$scp.ZFcIP]e\Co
%X"HptgT<m5\*dTBl<;fO(\9<J?c'Pds+6q7i+i+Tj^4Qm`M"gB?Wjs$%AkoJr,(B"Tl0p\_(VRAqj3r`+M#sFh)E)lM45<WfLLk4
%N49\".#2-kONRu<OCHQ-L-=I8DRhO]$W7D)ZB83Q6PEBg?I47biqeY8qaZ'IBQIh>"plr/R[J]LSBM7"dnST+.%hGQU)?5uJ-dt_
%8R5i;NcEHUE:sZ:ZVAY@RZ9(%/C"7-kSC:F>]sp#L81NGau%RtFbU[WoN,L3^=dlV&p?[W\7-R`'-kUX"@9fCf"5"tHfaHhJ!o`d
%F>"s!=`g?:75GFL.'k2tA4a?5fYrdEQ];l%%ZY@Z14ZZZip+i5R?;(nS:Bta_tf5k*b?W-(P>?c^/R(CR$E:*iT/pYS8#fmJMWu#
%'*q>XbSOX<8Os"E,GEW\Ki":"NNV3=`6GqJA3(u@RNtubO\uLMl[Y]i&gU>5KL#f@Vr8#E3XLdK-o<8FJg-&-H:U$>F9P#G$@>3.
%#DGGT"@4"Q@??ZqLgja-.h<B#@-3d1i.<aaXo\.b%-B3Vi!`0F2U'Gn1Dm>5j,=!XDZD-IJ<?PiPq:gXXUL@f+:.sh?nrCa!N:3[
%?J-9!VV?0Phg;'rlg)A^0DbW<4h20iaW.RPl:o=N*%V^(3dh@NX*QYQYBaLBaS9M)jXV.%Y>h`&hZgd[q!%sG1#0g`b)e!u-VtV\
%Y+i^['k,!]&9?:XNisF!O+U7EoK)^Cc!J/a$=m,^P87X&4jU]f%k7QmK%TsDW;h.0"4i;6Z9:;m_d)-k_)b+#3T:0TGi/n_QagTs
%L*_<<3?lBT2uC28gHgmEqE2:3mNoIbi:?rE)!6EV5$7P*O^)R)42_;nOc=`"N,IVXi!I)tSG$tjTPd6h6YEcM`d;@:".&a&0oRI]
%ooY$>,2^]]^;:0@@TQP<F+q8l.t%$Z#$1e3!)I-^/!)F$>era3&OqM*06daCIYfF;E0J)k!X(Y,B(C'U$$.e?A>&7)&2GPfT)s[G
%*Mg,+#f^"t%L3,P'1?XHg#62"KqWD#N$4jE)h^=Vk\_'DKL8VfU&Q.sEsY"36a,XF2_?d"kg4**kUd2=8O/P!8@<Z72^J"sK-%hZ
%c]DUH;O_0S,PGS^S(,m=cIg8HENsYcD5h)<iMM`l/P;d3[H7@6&L/hh^-XF9CV+0pCQ4EFW%Nl1mEPRp2uQ%"^\MemMB/:=>=SIl
%5oM[sq$sc#(0W!pXg8&YAC+Wag.ap2=jW0=ZtC/!1_21N!KFsh]`kdS"Fc)N&:20D^;rX5jIp3ET_TGsPCTn\U":jZ3sS5H(.Lq<
%qJub-RDC9aJ?]`5g4K<IT\$NspN[Tq)l.p=;QUC+Ub,K71ScXuU:`c!1+1%CP"KPS.\%eBGhlGOQ1@S*0AqL]HaCH/M[D-/<F)Hb
%g0H"k<*WeHmARK7jgLr<i^a=hgTXl9X46"'dWQAZ5b/'9o7fS)8gPjM;3FObPNnJ\'lTYm3C^$<6&M+"C0?9*0iYnGI"dKBH6Z#K
%YXqj9P,Q.0Z'"ND_@m5O,WlZs-c.?^O)%>%)B\o]WTof.=QmM]2D&T'o"2/KTV7[R1IG>pA;V/RddJ#-Ne/>:@)-mWo'g12UJu-)
%"3F10?<`,][l`?V[A$1cq,.6a4l"''+g9J(KmtT6._K#0>HLBZ]\W.IMqVYHQt\D4RpcY*V/ij"<@J(&<jo$1i$JB0Ic<sT]NhCt
%ZU;f"CJe:rKH."Y]eR75jgH8mJgs-*0=M'R]**hA1A-<L4JH!\#L*^]fT/q8FVUZDI^i6T-F7i\.G(cY1H)m<V.,D[@%d&XR4GI_
%H.@dLPto+l<@:OQI`A>,cge0TD($"!_EZkG@HAIf9[qP&*8Un_DU[?RGi.4][1K6/DhK34p[[9#X0sO*KpMVlMhCKW^n[o.X5,`W
%?EJt6CmX14813=DX4&['Rs;h$V.'n9;E+-.<2`t^CmA1XgZI'`Fda!S*I-W6?;KdP?uoN]fUs,kQ\iAM@@\/`pu$T<8Je'2e?DQr
%l<_AFeJ^/g-3uZhQr'g>L5.nn&r%<)71O,#7`!hYcD5Gp'WXPF+"u^+g*B2?(rPGGQ%F+Ai<<?*HPbC>U<4d^gn.L+N'rrC=d;C?
%92rIZTZY5-P"_f$(BZH+9l@>,gdT,7(+o"+9$Kbj96@^4QV2G27$gPg\JVWZ0jRsXf)+m#&$ObtmDj<">K,m"M:$I3q%RL(nL?9L
%qG%HiT\1gW^$d7.#UG^@((NO.^-+-YDo;9?e-hK\5c11<OTIGsG-b=lX4c8)C:rZjg;QM0CCM]k,dLS^6n$%Up>Q@?4l5D;b;^Bo
%Y)"ks($!V9Iql(Rd867P;3"/;m'Ua^q]l[A1('(eRRD]:1Ac'6]-c)R#Q--n0fSpeP-P$O<?m5c;7#)gE!tN2_2[&"4i'Xc#jF&n
%"s^9VFrTcIe8&'f)J;V67i>G5j4>qcX#=2MSa%"ZR8AS>PV2_MhF@ObBU"!:W&q;0eJNKF=N7A[n(!!hP`2kS.ofg.nLQ)Ls'.8g
%rLpgica&DS1DW='e1G^rd3^R@CE9Z_DGog?G?a/G2["pk/R721TS>N0"-$('C!feS;ZpTJUXZlTGc`sKJJ/3"G8U<h%qRJ;JEo1[
%\/o'!if*ollIf)@2X2a^O"?oa/RO>oI3PP$Eh#NDpaupZP9TD\G`>?,>B1paSbSAbFS<`s/Oe[\PO-r3b:L]2bEjYZX-L"#chfZ@
%,"pq:oH,#;@o[1.Xgg+N0\q1O/0/5m3ZcGlNWXp)J0S"`VoW7C/E(f?VT`-Sa5T/J83W;&ANR:hr<bd]'EbY]:^rgF(n7Cn=]5W:
%EAkpt4,bKD2(mg0*lC*#1#m\-.f<\P@I$UgSU?VU^aIbB<f\Jn9^'Lk(qu:L[k[kENZ^>2?lZ("j,[\i^j+X9+Hlm7Ool%\0Q_2:
%e=K2bMc#o4#I?CG4T:@%0tO(sGC.;BpJjo+m#m41'U-.LX&Z?Nk`tB?e8\N$qP&qKIKqTnC$o<Br[9"_D=XN8^$HNIMH=Z^\Fmt6
%Ean84P;D;o_f:6u%mB-Fep#;`DMM;ZDW;"BSUb3%/;uZl='S9KL9Ja*eV-k0>Rn6gmL6,JGiN"uD2K!Pn4*mscK*o,N67)BDTA2n
%I^9'!gd[c^gKYCMT&OsEiYYBi\5@D378-LcMc.)*cf;5l]#qPE+7@GlI02a]EZ6_V6\QL[Q"5j=']U1CUI's?)@_a,LuEJrMoASp
%oKA5m&-O"RX^Xu'iMq#Uhk`pRY?u5C;,so,Wd8QASIGb3>hH$pEDR/L*EAr9[;$[n//6g'p&ImNT'cph*Z8/"ONM?YAFeI<l4?=I
%]kGnFE@)n;2H%f:Xd1HAf]Vds._uf=bZ:)\:DA-_4Ak,1aS9O+M'pF_%.:+og0U<0YpRa4V(bWX-ug^mp.,r,NlTtWSG8g(^*k3C
%3n*/J&uRMF%qa;LM\8D$T+G@oWL-s(?^/JFAR)+&C%=]L;jjn_EeZQH9W'O9/7DuB@6O-L)*`M<<aV*.2#3laWQa#TG-&eu6;4o(
%F-U>MI;34GjFm0eA07BZb=sSQM<$@DjSZkVQXHi=0?e7'jlmbMZeoSCSAb4RNZECC:AUC$drD8Wj3)X/AL>7$]AT-Gi*)'d88p/s
%[05).!nZ!B5Y8o%kn;T1m*l0g&leb?;(WC2VFjr`:b=u@^DbY>.mdm`g!*t=_(A+ir3,G/'=@h-%&:EF,:aX$0q'4&7`d@LiL.I@
%93"mAA./u5<Rue):4An@UT,%oi-so4YIn4cJ"HW$I@HFVIoCH69>dg[DETHo3P8qaLUXKI]U#)E187q]_sti5\trQM_cqjs00-UT
%oLHBTW^ZBN<5&5Daup;<pY8e5(3"rDNXQ+L[`3HL8bggnpjWb@iSQM;U&CB"'r05CmW.=1\;<]TJSI._O4IF*k+3FIrHQj1Hggp4
%r*nXG+1>.Le8%dGLA'=U5+b"nA*-hkq.l:Z`dYsU9N[bq+NS]Fd6s]o$o?Q/D<iq8NkdoTihnJn:"'DhDPP^mWd(X*_gVY1/[dnu
%p4*p2l)s&Gid-9#L][dhe[).`Ccm7+pJ*DPb>u*_2th?MR%?li&f2b[3'U,pi03O"H^q2;-L8G*HB$8Imr(DWEY;e>=oTMXXNC<W
%ZMkf^B?C#=,d..oTC,8$J&bsqQfKW$!Ts5^9Go?`o1de`P;V6.c$(?_*YZ<N>:a&b[,[[f5;C&%G)aLj`5JkgqN]=UWhAf[j)e((
%N%p*qEAu"[3&.ViDHq]%FVskspR^<<Wn1%M>d"#B?Fb+@nu;ioQ4%q\D2dc9N%i8H90l_9Id7:\F']cokod6m,o3fdCA]C8[iJrd
%=Y*ZNb[cQu/2<@e2IUCgZJg)Z2%Y_[25k?UZF9J?<%E<t[>%afX#8\tXm=\trG30(QlX)7l2FneZs1"f#Hh]uF[D+G$dBO=n]L>8
%di'&14(:!?^-p-32GS!3ohEOYm<dT[>pkg&Rrtn7;aFp)FpUj!3J'u+4T_LrBf8H!kr+%HXoD<)!ABbDY<U1N.MuZ5l'1lOf$++A
%M;]a8]Hi5u`:/p,?4t0!IpK%ln1n^4(Z3H2$no=0L?pRMiFRs*d)>Eo(W4G[VQp/Ma2-7EO:H\m-a=eRSHW_"c^C/l:"a`"]1MNX
%9FdQ-X@IQg7(Lh$G>#E6X!SG$VY6O:ps,Sn%qfn%cFBK$&a)E3EBdsm%t<2AD#*@74(Mf:4(;)7a5dr3$()b%-m4TL%%3X&1`eG`
%HjP)b-cb9NVI+-+ELU2$0J?.X,p53rl1+`5oVG,AI4;LFG'N*aCHmuCeD+8aEDBH<.t@1`5dHr/**).T`C86k@IY:C0kTTB%*QWb
%$>)$4B36V0Gb`(,Wr[4OijQD/V^q`aq3^'7+nIYX!5ARNPChk>;[17DB;Y?3fnkHLBP8'YTeSp,)d]ckV.)!24$VNae]m!!-LPQY
%7`=P[.kdL[=uYB<WjBo[N9\=nF%7Y?`iDKI!AV<93,ZNF-?b>>:b!,?`]+=@;f0RZ'0F4DfJ2B-7:O:So9hMA@uMps-[(HeNfhsK
%`lO0kWdi3Ojgd>;lcaZ9`gJ(7DU[?RGi.4][1GhR]+KL&2N\h_F4GGFYL%=)a4dg<%Qpa`'k1:G-:S5r;jjmL]bQ"&pXj/nL!t!l
%Zcftg;Oi.i.c/MZFd!op3=L\F;QFc+.D!P$L#J%aj]EqX'7)uR5<59I(bUjBFIqQ4Sm*^%qSRU<LdT;;4:sGDcK=pieXGL(H1Z3;
%%ofrOEMS`N-u0D^c+7T<.WHe>$5QS0pbPC#],Vd^V[Pd[mDaF`$kPOh7`"/UO>mTp#e/U.dS2+-<-u)K?AY@t3-Y9@L/OmEQbulY
%B:Red4`cc;:[u#/@[t0l<+a?[^>`+#\fJNWZp)/R$8EMH->l,C"dh8<9+%e0C-c=KIf.B$lpR15FLaumjl0]RU<P"<>b]J;Uc'#V
%j@lqknPb,SD/S^J\JT\K-WHLl;6rZY)m(l^GU4[$>b]Lil<L(/-0ea0cJ?tdjE.ABVmT^uZJiehhso=[@eJ!ak]4j_$FI?gQ'cH;
%/r%Z8*60aZ]dMsVno719.GacfS1?>>@qQ_*a/f_2`F+i??qLpM8.PJ9#M=q0/aS<[Wf&WG4R*=3X64''E4r+t;Q]@&9!+_dZ)mE=
%f$A@VZ_nm_<0`HrH'@eJfF@2GM&\r_4o%mEl*a/R<9AZ0i0bG=RfIeW>\ol@rFW@MQP]PZSeD3@nNU)9mc-OO8JutgF1!KGCH[\S
%I5=?em/1d7&&aPigPlTMi#NTgGbShHn57a%a&T5>d:G/B6\+8aW#i+tbm7fA\.k+FmC&V51$>?PRgka@_9VJ`V+Ni#.Tn^kW&iUj
%EMf"&L8UF$qbYpB<Je`ADa"GAPi>WU7.\cK]X>GnJ$L1R0lHm`1m-5ASN]M)0bRb9.3t(n-maQaP=T?EXoD>'<P;LdG^kr4(54f'
%]n<',+!hMV&u"M"$:TeFo\0aok`=[j-lP1@B^0F.e)kh%-al[,h>bUrXPk1>IG5Z\\0E]SkbbrB^0A0K!h2S+EuUt,<Q0l=_Ycef
%>5Y4QnV=G1@jb"tY")TL(lHW3D..bU^d^I]rXgg2Z/r%@:*8fd'9PtKalJg_NY=3/hGHHXq[#%'j>--:A/l!ppB`T=#)rN9(l+se
%[^gAj/]c&S#00a-q(lD53W8J<9/2PK1!Ks/:?<k[L)usBM,O?qqndSu0MujE;-X[)n:QQU+a.pW-d<pr!n28kMRr+OL=_f1j"P!k
%i$?,8fE5R$L#c^5YB*bN*3EgSXu1A,<G]<V@Tj<<R*n-UInVU9jVXH]1G\[$H(4/@%#o5m&'=Tfeu-pf8TMnj3/i2@lQTs^:"MtJ
%;s.E[/,24-CMn>mnKp[=Qu",O(?`lC'.H\3OY4ZI]8;*M]-6sFN1u.FW3KR`??hHh;Ic0^=!Ik7EU2SLHQK(&-Gg\H[2:De<8j%N
%G/p3$,=[lVG-u9COYAOb9U<+D?(6!qgJ$79e83.%+3_#8FUfQ0#Icf;2;Ds<,0lMh`fTAg(<RIWAMVuh)*dQ%ARb#n*d?'C-:MX<
%CsrX"]Of7I5D'*&W8ZMH+X_t>-dBX$&!c(5+$l@=Cbbm)]iscO%#JX18S>ZCl9;"1a1X&$oW37>WeTEd^UIFFGIDh,?Z*dM*dta.
%$C!!jc93c6BK*-%*Ok<?H4=_p;1p\7H`=!R3O`6G?)hVU%sh3UPuffAeQZa)U[5Ei,(_F^bEtaY_GRF@\;EgqAPl+t21Sm)QN%K&
%`@VhA.L/sW,e"s((V1):oUgUB0't=SHs>>VqX.)5d$Uubs*4&n7JW4'F4@fqUNMB*I5_0e?<:o,Wq:u6Z1%cRf*)0R"AHN;$r,r+
%=K9lo?8mtKmGUj]'+;"Q/lE2;-Z'`]`M$1DdrLgcd#AMl\8cV&8B[(h2M4jfNa-LPimTEfq[0\PckP2op>M4<(%9&`"!"h49+_Lu
%^?[bg_P>>k`X#R[Gl-j>AZsYT<(6N,mo&_1%gS1_Zdg2i4L>f'j6aV6HG)!"hqKeP[FE&B*?XCXNo+:uX_GD$lQG;r0PkH2:tsu-
%"\h(e+W.$XnJr9\\7!/d.YWMQ>V^0f.C2]"qc#W4EgTZ3'?e3#bAnSfCRU[&Ac%1E[Z*<#-F[M50gheV+>(m`?S,E1WDop)%k=f&
%TQ"!We'Or0)b4id;\bCf"Z8gi:h5S(ElZab6^;/K&>T[56E69K0RNBVIFH<`2Jm/<'"7$i$Xbm(c:tr[QBXGEiWcb&h/FMtPlU(U
%KnNE"!Js-1A=kX5lH-7(bqJV+_,DB&cli]Ye=hU.P^q]/^quJ/ku;\;6PJE/hYl>-L72:TG=iXH,_[I;MPmML8CQ^c[P1E)3Ah#j
%PXXC&$!YoV=@k$AUNA&F@9CVgF:d<m5f"DB1JX2m])VXV5ol%-i"m>k#Dk1!F(>A?E8<5G)[gS+$[@g)knNRJ9dadK@$?&GptJNt
%J>"+q@Va.peG2ur>@Q<t@q0/Ic0kV&`$BLWrat[Z?sMN0,]O3uM-kgN/7:CV,$(UH2fC`k!afloD\di7BgT:r(+.1s6H&apRK>"#
%*8CG,!s,t6WSh\1J%M]D[c'3uqRXdj@FC.WD5g!CVaNI^3f+4)62]!eDigp%F=NEu%?iiOF+[%$Nm@P$mA+E':ZH@/J,L)UZN7pe
%EVs]Qh_r8lcZIc'NMmu737EK37kYC&<mGJl9^;Y3`PEMCgN)ckSZ`d^'sH?6].I]^\[.P2!G>nilqqYN&CPqM?JhnU5iAdlnR!U6
%RrZ&6i1E(MW3FO;/^.:cBA_N7F)@ka#(c<`;!Vc'1sOmtM/TD/XZB^bKlH-WiS#5sn/R^h'D1fs<:IP"`=Kfqhb4#YJS,J+eh5K"
%7Rb52Ij\1mmu9)!-_<DXf+]MfpW"0iEI)rlN,Wu;=T'9_(,5*"0Kdpmcu-:,Pqdg(5K]_$9c(3>S3p^)`okkO@b_q5GD6"!b;3Ek
%\U!^T%/>/NOM"^K'rD5UR;U2)-m+JXEo=Li!VMKG&TfKon/:lGf?`G#c-TEGXEsEN,>KNkI7\hY'jLs>43cI*q@28;6=opP0"$kh
%D[%*jL=L)'D@T[(0rYu];mo^G<1ibc$Uftkn"R5A-s[<ir1_(#7iE>GK&BP/pLS.-C2lAS$CL5#U)XoOjVC/=q@/-uro_/B(4DrL
%/=m6'^6(]nM_V>LJ,r6@?)KQVQ<3_tg4$qTH7^_Ek38F&T%S.k*Nsab*Os@[f-pSjWs%.-f;t7l>t=o6&baq\HFjn:$FNW.fs]`%
%A_Xoj[/F1A?13`5A^1_-Y_?fDIb\2'<mNTb2i%9A](PJXe7Q77mZnBrHFqsk-u69XH,TlU3DMo#hY[/J<knSZ%dt?T'pbN;9Y9LH
%E1pO:CP<[ao)EA4mh3dklu.SsN!?]Gnoq:aW\lW3KM*9MHP,R5S2th'j1D5>^3bi#)WeQO&qR&gq]*7P_/EO7aS@F:"BK3Mp3tlB
%m',d+:P$9oS_A;GWO&IGM:%g%L;U3cPjg*t_<KJ*el=(0Bm8<UheV/dK<<RGDmN:jSl%GKs3h=$\[O)pKX]pc(m#U.>>JERkQQEY
%=Kf-^B),VM=O5RP/Z>JC[Cgum&OFZ<:q,..C!\,CVmZuW8F,NE&*%eECSP/fGIlo>M@I6'Df=s^)cObM=+9DB+Sp6j)B["@P6+-J
%0\t)PFg&'8mg0q^ItWc3=iY?;Auee@mS7Oe[r%ZGk$VcX[%T'T5IG@s]2t$NCeHj+f9)o!)Qc,:HQB9_".N0q)+rY#[*EH)USuRQ
%BJcSl2S:XV95\_Gp:qY;AMKp&9^=sD<W`&:Tbu,jA8]"&?!sBYFH`f<%6Q`[E\A08B'EYUDK3u)ef>ZPBPFZN[DFfn#8EpK!9d/N
%ksfOlbMPu)\u4#2<i;8&H7A71K\75KFgkJcdFV4?`m+-*DY#nsY0<2tBt%j58]$D?;5%T2[ta3e*(R'AFl:YZWR<E2TkS1RL1)uL
%4fuET!Sen:rRuS&":/0tVXB*qKe9l-G=H`#XaYJ`LI%4&TeYGDJ&Hk4QkQW;NW!#dl.<.<$FN@N.n90A[^'+QotG&o1j(UW6,.4o
%ggUSXaK66VaoCMY/bHbZgGna[%2Fd>Ub>be?;+S\5J2>T.U%edmOV^efP):,1?3Gl<^'u_aWS.mdQ_%UVO%ZD$69Z5n(pgOga^.Y
%haoPC:6+P*:@VBe4^k0d]e26JklOECXmf/=$>rkI2-cX"69#u,+#b+2mT03^pZ=;hr"cWG/>BMm)>j5hZi*A\!gn/3=t$k"5238l
%!n%r2_;lCI<Cr?55?1p:1*J*3EuCN#_mhOWkA*;^b(dK-Jc<rbK5B$<fa^qL799;i2]B(2o\5F1iu7!o`IV$#Wi?C<15,p'Sull(
%-T(&sClF7\;Zj\HK&"GV(+27YVq7b[0ih"gZeg4i%Os.i;CG=j<rSpB3XFDHicJt="qrF@eJ9PgXjTY[CCDh89TbcO->$c\Tn[iJ
%`X6k8_M9/8=DCo(0_B)Lejc=^!a/(Y?QmE!!G-2nGfn[c%M.hHWe)t0foSQ+n<fg0EY,Ps2+j,S[rHi]r@4!>XrG@$Hd,Tj8r[ir
%N![H1Fhuuq^<><X:kZH?(">KXeB$g_l?B'2o[IVPDim\If>&.d$4IER`#,GK$lTX9PbNrN+:d2FN'NOi\nY<lX)=na;\^?-=H5]\
%p>B'&I)esB>2lIpdR:Vc<[U#[0eAs]K1^=>50'h.<Ef^L6ZF$;#D#4D-3fLb$>@SY*r0hQYrVt>:?1c[@,@nie:O@&F)o;L&j*0m
%b[Zk=``0I`K0`0c*=SgtjTs1-$V+9K\01'hidU!'7HI=A5sM(c;cER5j]/^cMaB=\#]6VIDD*IaAW*ufBdedNDA-A,5AJ9:X*ga$
%i&aULI[_fn:Vo>3D67-!W.<\FJfEd&`DDCt\tuE-WiC<.[@c\n%5R>u:k^B5TKb_/"]$Y"ITk9,XmE'45>h)plZI^c2+KLNQQ$:E
%<<]l_>ulTr<6frAd"6*_FmUA$:oUG%X4QQSS\BM=lMtXm;6!-Bi/o6&k-.eQr1rEPLsb8*g]m=fN3G5M"bTE5!1S*M6\YnK6OI#H
%)Zk!`[7%,^"cgit0rKZA(8s<f6c97VMr`YLK8>)o(<E9R`$O^b\b$B?bb;mqBFLuCiKA9J9%,D<nV"Uq;U:mZVPnYDK=660X;9+l
%5&@7o:"":t%M,-5WO6V;K"&,T&6ifV5sF"9\F:ZklWRtO7hbq<C?;a&\08Y=@LRBVU33UXTVKeE9-%"jF-t_9Z=P*,fcof'R7jAS
%lYU;7<VA!:mb'CY?eKejXDPIgNMkIIMk/O<Z*p,o2,<ho]^bRN`Tl<<Q;cMiq=q/,pTAqP0u(8)s7bE#;lR_hq,HY,_jOJ=iRJ>^
%CWl,<]mkZ!a<nl51u<%'\9ZH:a.nUdl*:^VF)TuL`nnqRn2=:'k-$IhHu\`AgEPE8Hq9=a?OC#@n8XF/Zbg$qNfSN:nBq-M.R"X3
%0k7s1FgtSA_8MsVm/=+(E4>TV+-.P6c%kQ-@sE6OTk4cmkH9"4gcaN5kj,cWo4S:LWMhSE5$2^>bqc'')`b+l%3LZ$EI%N+ZYp4r
%j2-j%Zi'+$6'&$(%[>5&Pp!k3mc)^EJ'I_"rG)</8>"R[P&G!]@f,sGO^2,HcQ%@Kc>BXq+)tu_Khq$t%otpU0-7itbJ.qQcdZ^Z
%ScY(Q*a$S/VQP/m9C20GK+G$ZQP4Q3n%\Je#E9Osq5SON*\G-Rcdu+=fp/V\Z_^Eh5]lpZ3Z>X"pqlL:8([2E1%b0*"'T>\#2=Ig
%N//;kkc^YZ%psejqK8bNG\.]&B^ZAdC`NW^[YSY'D[rDoio=pFD._\=5KFfYT?h0%=(Vmkd6d^#gZPF2Zg4OTo<l&g2R=LM0A5[A
%io:j4hNbAiNXCs*6[lq;6VUCI^]'Oue1TJp:H#ZT9_3Dc,Zf<gEcl)EB:HU0p:OcbX`&.ERc6WFnF++Bf<8MYQCbK&QJY<b=0%b,
%a"OI'dUa"rbcT%.B5*b(T3LXM0/g*h<d2;bYIqSO19AV'G'p&I4)8'FQ[A&]qVub]ot/lbkg-G*fk'?kL\t1mlQIO?/\`]lCg#&S
%>LlF<6=_!g/[fcgI):FioB$eK]j8f$[Sp7#fl_bKR:2*:V&-[tk8AV,4d3W_r[@?jSXjCP44`lJIu0Tn:!G;rjj`WhTotin^AOEl
%j\H=nhF9,_HN'pu-(XQfD"5oNRFL6agMa&]X3Mr!G1F29`#lZ#TC?Q<A"dN#s-fk/jeWd<`Ch.W/L-IWk#4)-T2nmsO7Tu_#CPbu
%2.s`RSq"=!E>1N?eMgD7cc[D.MsH/+e>(W2l.".NR;D0Yalel;o#LF,WV$#W@VY#1oJECGp>;ZJe+-CG[e1ahg;detc9HT>1*=hk
%:0HqbOg8?\Lm55S]M,FKV`q$0$FJtKolU2_8j.OpC+o8XjQU7@7?oI$ZE'&WWSE9^Zdei!j$@Eis4`I]bIRJieCIrS2YDC,SOm\1
%F(_K.k=^`4rHWH7p#\A88f_g:(o_$Dm;_EerH0I[[e=r/p&==B'k[(-mBMrQr20BHp#S_.:7\!s*2\U3lOQl0`Fmr)X.%d8?-hgi
%;jGmWhbpkqoOdAmiUg?SopELa8Su$*RFun0B4a=h4$U&jp%EWB.JI)>=`2N5RF-66[2Hf(.Zho6r4;`>`nl-R0XJ2krAaE8U&/B_
%7H<45RG??/iQT=)f>c%cVlfO6p;`MH1OI(]A*0H^VE/eR3]WXSVaEcm1Zb$mZbt;Gb]sAt^0'.L1SnSPTJBaO1fN;@[kO<&_ddb2
%k-4A`G2@Im27lsO5Fl(D1geN`n]m_ko3uFbY.2a0-XYFWAmZO*I6X4YIC2$2nke52h*/N$3kPF^NA5ePp$)&6]@k/YZ_*cabcJGF
%2J0YG_oh=Irq\-U1L!#`?-P:j1RAVap7>VRGka7Bq-`IYk1'Q^mIf'913HiIi-[Zap>FWiHKmdKcQ58p.5K'WG*YnbK7h4hV[lPO
%X.'V`Y+4iCE*$[:4Lj$hIJ)Op9=+SihV(ZLV:O?r+e-%<\%CC99C7KVkLcqASMOK<V7@tco?ZR)qShFKk1,s%\Xh>J(Zu:1oS^8(
%1Te--T?GjDk)*M=k1nRp0Dfh`MaCu=<HO5rLY'L(oBH'CIGV2?f&g'.fn]A>V9B!O1V[Xq]Un#+HX31,RXb6Wrr&>2o6FCj)=s2d
%r%ML&T;Lf+bDW8/kF8Bm&!stp[h"I^:[*XMDq7*9beC4t&%D6BM\#PH5(!:u['WYZppkg\oC0VE\+Ho1]lj%QFoC;[U>a"&:K%Yc
%$g6o/l'SLZ:VYVcL%UG5[gP9JOUF\0_tf"I+5Oe#nPt!aTq'ZXKi[p?bi6OA='/_L/aY2pgY:$iT7:aU(H9+jRu@1.lf-pY=1Qf!
%0=B<q`R;(;b\$BLfp7]]o&#`SV<:(e4u,@a^HHoBd^Xbu;EXFi]pZ(7O5AF"c]?Apm`.iLV,&0S[;'=rQ518i5:pleG.+dOEoq`u
%s$a\)g3oJE0:hODD(N4Rc+0[S4*GqL203.k2NJ["B![Qo`n'S<-d/n.O4Tj?V8mq:k3V,PTD$7a_ABKV\8m%H\i`nS\mA^7Ha^:t
%XY+7P1V;O>QX?(4C<J!qUKINdnT8F>3dktTgqJ0>VjF\2G1,ONGrbi_WfGc.?_8m>VGFXm4@m)fO'ed-YH$]LR9/Cib4<Bbq2/IJ
%Pq0E=bKh\cX"CUIrqP%,'jsPBnnnEu\\>;0H(p5Wfk^PsF>rhnXo2E$j>)4bT>(t9Y<p6FDJNZ"Z=.QnEJ6P=>eFNMY.hf6CDLRG
%/6??3Qhr.XmTV-Xq9t*lr)mmMb[9Ns^Z05SV)N\I41+dlmFd8(0n3:?VQonbjQ)Y;Z#=2\M,2EL(ZOcSV/=GHmcfgmZ-pcH),Hl,
%o>[hT9/FTB7h8dXp[1>rBSm$h\TIeK-(RtM7W.@/F7OQeDc%:906R*XnKZ5)oI0Ul[+Ue4k!jOUcoa?K4>Y=,$YAq!o5<E2o[,?E
%B<est1Yh-Uf5IdTBDgI52JS;SAe?D[S\7u!aig#nqfON,f^GH7mFnDg0>9KRHS;nH^"<-VG5e<*]NN!qidC8;^rX!W4C3G8HM;#o
%F^la%nF_0Mopp;,?S*9]bsOC)%pkT<CIW2_@kF=&fN^M\J(e3ZT"]N\eoLH4-i1]]I.AKU[Ie#0Wj)07[6H9-q0)<-bL>S9mrD3r
%4Xr'Jh0#n.:X;cW]RF%6-,m42S$*dWT'"?`4kkD`B^=@)q]03uBD#/NrqZ,*meZach8ZAUHhHe)kO-@Mr:<D6F^D09D6COm=Q8:t
%_hGYNMdkeZSk4A0FIa$3LJh`tq!KnYH?jh!q>/IOb!(2nrAEoRBihUDlZsfQ3P.;@XZ$S[OA.@@qafd'I/@(7Ygn&b]/\\1aZk%)
%0'9:Lh.HZ:?94YWFF'4of>$YlY-6&6/$3IO7uQ]R+&eU#d\FssNJFE=Ri?,n=3eggGC@,D^=R+;VH+M*DTZPfoB+W`/nVHcBs+\H
%q/'iNnPXR;k?d<F)qQb#?EHG==a<u\gj4A?qUnn]EUiAGnV9GKl`7AFGdZ2d]<@fOZV.J3O01[[\iTAQ]jB@gd!YfarTBBrTLh-D
%Su($3K&([\rUc'/I_G-dLRCZe=!o*(mOYZnaj.4j2RdaL>iIhPZYQPr-0t,:2e0"?fKGM+]=X=U+7jjDSW1%jr+DShI@+_5hYXa1
%rG\B9\[20;cTel4cWZrFDc32[g2H>;g<?$LB42:UH#p6$/flRFm-=o&`E2B``*R_<:t\!\Fh$GU+!5C'*1S+"hHR''V.MnD*SEs/
%T,d7%0'jTa[P#jd*u.O_O0]p7Y9(GCI.?@/EO9n;,!S;'-TbDUG"s[Pf>!n0Ae,?ljtq.)EI@W>Ssq`W>Wc5?CVK`=p$LVa_V3bf
%l^bo)V(W@\GPP%TkO1T_i:d&4>Io'oHF<_LrR'ZUgAB%hiq<V#d<tTF[CH/4U%nH]fuM(0L"+/u>j;4-O6?1KT2M<0o8q4p[GBC)
%:WIA`[m/E'b1:4C2.o/BV;>R,/m46qcdKkSlXsE0bW78e]it9<BPb)kjJqSCbNBD<K)8sAr1j/e`Q>+Vrl+l1gYUY6F1uh%^OL]1
%4P;r;4?>\TfXn7!aJNq/A02/df3<.?I!katpnj]CMNsA9Mk9H2Qeq_jpK=\i><B>+0>A5Sp.jMR0<Qs7LeGS'f&bcIr7U1SZ^/08
%DlRSSq^[qqX7CD.;)1<fY*Ii`YC7m"GILF'rG(a:[_<f3>cN1R?Z&$?G36uel]Z_9\o)u!]B(F+Ds[&,2Y/CSD_'-`0:j.a.\HOV
%X6RS+k@&N3+o>@nXQWGqO0*N)p?JJ6X^.J^HW'&'hJ@W?nE`f][Zl(AfmL-@4HnYt\(mB@8u0/?MtEp2`n;SPZai&>iV_T>@',cN
%<hGXc8'@+2U,#4m,B1/L$JVW1G?1`S5&a6n5P5(f@BYZ*/T>>i)eU<RH`578KDZ:$\1j<A(BtCfqV$WcZd8dX=$&1Ig(>$=a@]bd
%RmGnp@;dn0]6D^GYLdInr>G<V/'(SKmGsQuLHVLI/+=8D_^U5eb)%m`AU=i'_lK]`(fJ-*2NKKCYBW$SXduB99<F)0-EgWY9Z,iT
%Q^-n/3LWc[(Dl?-Y`10]4@\9[\BN;950?pVRs_j4FY(.Wm)9[\X.n'JEBp`pUR5qQ(T)(EX3_-U[mVRm/C_jsT*&i&!Yq`[_2GKH
%5MB=sBJHIM0h!(NA[e8F)HMR`O?%\RcHuNl;QDq$kXa[$\CZ.*PE[$N!\KnMd'[^eD^!0Ki,kHGnV4FC"lRR(XmtkAgadsEBU">n
%;^*2#_V`kaNQZk^N7i>.nsk_D)3eUDhFRD-Qao7]Gh^S3hRe:m?I[8MCAC?`Hd@gP4WOY;X$*WH\$pW7`+6<mdLM<X[#e`'4UucC
%Ch-aX=Rs?L?FcO)3=f[5+&pI*J"+Bl$5I8`boPN5eG_UVhob)(W,jCiR$E\*M]j\%(tu6g@J`2O<0i.OWnVM#f+$#P(=S!]G&&M3
%eJdWmkRL`qUf8;,K8^"D%<bfqM!INKoim&M]R).DC9-RrS#ru*/?_q<(E77HoTuKS#i0d]?PLm_^%7MQ;UMPIm*s<h38J;6A3ftU
%7DuG$*=>p;/kea<M5`MV/ULdC)]J2q%QN<rNJA")hOY,\a3hpZ)4ekYY`+em+H52UK,>ImWVLaO&#ir&X!</K[U\2q^u:q.^e!p5
%*u$Ie12cU_UF(\`UPKb)UrX-T8U%VJe65p[@mJD!C+ER@f,GO65d68dX@BJBltt6C$)nQ/Zj3Df<i`Vo>tBN!g=8NO=b!3F5e`?9
%*&P-$aBilW%c2s?eAFfn29S:AVSCU>#B$mcLr^.;<\Ln:KkLsbr@(..2E1h#U:It+=]D:baGuc\]#To*+M/*.ek[j(KH9G*!C7ZQ
%)G7@I!X-2q;J,c\IPY:&/mWS6*X!]^:lnMOlL7.3?o+j#XliC?R-$/"ZeOskLK7O8MK1Y.eB=Np3Ob![B)B5$&B/%i"`=^c!eMCo
%*@UJGTicjci!)8K5euNI>P&ij5lD*XGqC"_Tog-O8F(#HL4Vkj]0Hl;pM(!X>G:V/O<9Yf[La3CNESj_`IUqE7K@IRe2!SV2td@/
%YUBo6QMcW\J"TH"bO1Ag%_%;>.$hBF5qNmJF\#sN%m=L;)BBYV9EIWH)Dm/k_2s^$4*:jb^9%[clV\afYj-@A^V$S;USh\5=2OYM
%ZDJ$chrqP;?B4lQD?@Gt+T%?o6)#o=_tGCY7;t]ZACDJ&^s1gMEk(l)IcqV0g*!*78S.n+Wq\66;R7A@:Y-j)\'OO#>G/bM?duNb
%`1WMf/*cJ]j/kEtX9s@[TiD?]B+Y!N]:B2MH%nh<dXeQ>J)%fj`aWKDh32;X+7^nlXt?F?I-(>j92@?JR-JrYoW8$,"qi@O+2O##
%4i_Ro**7.2/o$`Dm8889F6kR/QFe_[$H?'U\sC%JJf9B-[[Ci;JjS9Z)fi):G[&!<2WI81GF72.aHi.l.U*a]>]s4ih-+9&(Do-$
%]rg`=Q3Ek$.NK+i^p;We!SHV/etW9>mt:"#CodCQ`/!i%DJj02'puB4A%:m-Y3'JYWn0N)psiBX1RHrI(;D:@7ts0W%W"(V4K+G*
%/Q":u:[Gq<TNM>&oG6V-Pn:]t)nT&141X#!A;XB)M<1Fgqt;?:h$f##n,4YWL!2057ONL#dQ*$bI2Q(J3]MF1bZ;-)U?S/UMt94^
%Yg&[T21,(UXW=$"HfN*6h(VX[X`*YDRKq:cL>)o@p[H>E>kd'/>Nu!6p*=[RfV(hhh.j4]21#3bHc!]8B>U$NG;5@t[,XL0s,_o<
%ONVH_G,u`je/B(p/i;,=DLaO5!BV[7Scp"hS9rcEi/%/U#i^%8Vg!,%ER`JR(:CWLp[<P-h6YJYrHjXmXj_(feHo2&:n9lET7L`!
%+5?F[P/btZE!44F[\]'HSXM3b+m=#lVOQ?tr"J&RP]trgF`m,`#b]P/#`TBC/NDN!@670@VLsOE8ftm1Efn/s?OVk0[*oe>L*-sW
%l7l_pPgH;_M1LQZ!K%_E...4o6APaP`u,9TM[#1be`R3[8`'XOjPiYlEs2,\&@g[mRe4i5ogo\45bhg5=Q[&[Q4>8^AC_4LFq;tU
%@>=E2Hlt/"T&AU8NJf]6SLn`[s0(CUN.Zp?j8XR!jG&p8##AWHS70h'L(?X<\%C#,SK#N70TeG?(WEu5,Di,X$+0Z]d,shsJi;(L
%TPa%h:"LV_9pZI=eg6&JX;a<cQp=jWD-_!:J[P^8r_mLr.ZZp[r<d7ofV=N8Y4q7RdDR/R!c<EEZqZrTlECEF`Z<cdD>-DeE'uoK
%KnobeKq_'M'51%3NM'"7$+)#*p>83+AO\qSbp&f4+GN]DL`T,]TIk^QJi:M;TIk`';;'YKO0H%f`#`,%FD?J3/Wpr=:S@*YL:6?P
%[0\/mBH)//$Rq,;["WVJ!1Q<n!6%:P,Dc`6-."Q($>BQY'*)kmPJ:Zs/0jr.m2i!97'%4n&qfBS[/JP%2I4K3!r^pgBH(l'$e`K#
%BFC6Y!c/2U!u),3O!H(!Q9a1=g=d0QRfI+08Q\a+DM/M)=),&d2BG7"SRaZG!c:ja[E2r<_Uq4[8AY_,/L6tmfG#M6-l.[]8PGd/
%J[T9Wg(J'<Iq\`@%JWEV/.rol:`;GafFAS)A8,a43fG>?(JXQI-V4"k,GAQAXReN9d(0[D_GJ<r1Mq+.:Me#5HJ5[$Q/LVgj.WV;
%-:>R)FUPJ#if9#VV[M7@!\&^-92Gn3)%pr:[^hJ,(O9X&eZ^T&JK<,uQim]L@=hkq&&JonGA;?h23R5p:2oa,`^Od*oS=-DS>:%T
%Yl=kH9c-U94h+r-30"gq\SZnp$:)'O"X>$)`&:9H+ehN[%MOMg,F*j/I0;c,JnTWiU2^D\`OnqBr&$aG`G!S&Ec0&]J[)J1Z/b`U
%SB_/)s3(42!+<WoEZMKZ']okaFq7G2*=H7'H6b5$Sj;Ao%$?;)9TrV@$U$3PN]TX$>sprIDFZrr5Ra>g&3Z2D5[+;,b0J$?BM5#c
%^\(O1A3[F=[bd'>+_#t2U$.WW"POK%,A8l$!c87NrQ!:9h3uK=UZK)>e04McQ=.NXE^B=g,#=5b9:u`f9ha)\=)KBUbDe`n).j#Y
%8JV>D!AT7:61d]W!c87N&[\gBEktDAD%`L9#$^U"L"$eqLtb'\&a5fPoLP^=.&70Vq7\(P"Dr`:$L.=QRkQ%Z9fNa3((`h](.=3/
%-IA&D)aTrW<M+8%TPY=7bmk3t$-kT@XW,4G*hjMlCE>m),[/<hR0g5D[)qRdmOFAu1WLTk!kVP?g&eTa#hf>h#fVDZOi.CV&nmb$
%>?_/GP5oI9C8Slm<_.YuFq;u4&W<?F`#s@-D1=FM:"K_$Sd(ZLgUKUT+CTts/J-8qck[0[-l,43,UUm(5he+fD$dRD!42nVrt)O@
%.g@/1$]#r?$_g-('51%3mG8O0,:(Vo!RTCTq;YVEIEMm:icYi0kPZn8d6s:J`Z]oA.9o?HP0Z+H5I>Q]d)+/\F^YYF><iUj=:dWY
%Qp=jWD>0pSY:Y=6$%TIe>q?D$?*d]Og&b^h`Id<9`!"d,BU_Iq>68XT!,]PD]L)7oOEQH74[^q!(IOsS61b<6rb?,9Z5$9X8>'hd
%Tri,$%msQF`?5S+!AT7:61d]W!c87Nh4)8mKEU!U!89cs:G<ug2JGQMD2&WGTLBK)nm0'7g87Y\"*RD3D=!rJOK_'u('nRsBFBV>
%'FUX*&eeqOTPY%4[KP;2!89bpI0Y4<TsMT<a0ZC4E+',CO!H'$D$dT*S&,9G'>Ls^J@=l)T#8ppGm(JX`"7e0d3FJSZmF'gct:H(
%g(J)rO'Qq"IV:MWUE>sl`6cMV+F5:fJ[P^8#hl)>5[+;,,>q&9'E&8PLY/A`$=3;iT$]rlXH4dU2MDL;Q)p(-5I>RJ4r&f1h2[#o
%J/CVX+F5:fJ[P^8mS2XVXV,<:!,1]P`Is?O[^H[Na4;TIlo1t6'8,KT[/JP%2J'<Ta%W.Cm%H"-*i0UFOSZn%L"*=NFO*Ke&3YTQ
%^Dbh'9-M8m*$rrima)^tO&j1HQ93#kL")(VRW:749"p:H5hko[Ur#[:NA1@Y-A"t\&UnR;@^";D7(BHi&jt%[B`"j(D9AY41KbkA
%IqW=m"LN.i!H!Cic&$CJM^0XrQ9a1]g=d0QRfmC4,V1"qr6Z\]88SQhnFMG_nmmG2J[R"lg?`@(FSqi7CDR@G>M#qlL:2WR,5aQt
%M$^O8co-ll[KP;2!87J\bE*<6Ris#P2Ba:JZq-pR3.E4#2LSJmTdS,-it$!X?-J,oCC<L65SOe_Csg0(g(J(g6<dXqD3Fs:JasY0
%[QsQq6!HS_Ti_jhP*eL=!c:l7O=&=4!RTE3Int/@9/>Uu<^EIi6/:lOnufl6.!d-nLctgpbVVgS89:fYmC(A?%r?X9JB^Zug;Y2d
%7+Zl'7^]Cu/<"<E0a(lMoLNGCC'gn7R?9'e[0])Udtg7HksV1J5R[Zq&3Z2DT\<b6C4]735t20\9a%J=Nrh95/uj&&WC-$g.fA-h
%(VlPl`#sAXC4@b6M<R&S*)r4,e]&W[K!bU!lF3g:LqRshh23n[71ho7'3+j%;/P%RC1aa`If*%pE8Cko>2Z:j6FAF#$t.oTOi.CQ
%&ldmik2DGqg'"(;e0@f7O:eGB-&)H%)a0@OTNZq^Gii[kC'go"8-?81KEc25ILR"i/,PUV87E,n6++HAeYZ%C2%l7`nOKupB2f/e
%Jk]&b<""L*!"5Mk&ee5;:i4?;3tbM^!)s>B?rBDFeYME<Wu7dj0VLoJKBNWArN3"VATfr&lusP$<"&)K@M'NW?kF<U_'5,g87E,n
%6++HBeYZ"BeW[>k`ZN_tLZ:kj/a*am2,G'nN?F[g-XO<44fV5C"tJuX$[;MG/bj:9*T=3Q+niul_MN5+M^I0")X(OhC==K0$(7lG
%N^'NI#CG2;rb>k@$_?u3iL1NV9Md<,[HXut-)`^.W##6N<.nmSLY+,X=V4CKd6ocn"9%O_D9?BHOfX+/&ulfn!n@\kJSJ(N!*CMo
%8Cg$><1>L>A'#YQpnM#c/K,4m*FVnTLbci(,FY!m>(UKfVL^(m2?B`lqLZ?C?NUb4>3H@^U49^0R[BaOJne5m#+D4=pnQR5rHjR5
%Yc,5uV0cLse!AL*NPkd7IhG%o>J,I3libbE9HAWWmb`XNBah'>@APg/"pY]DAqlF+Kdl6<E66SGA9NbYV4KSu7#FZZDO[(Om'Nl&
%JKt4U_dQ^YU)I(d[((Zd4g"%Y!s(F#i0]s`\/'k0E+;Mh%$:nlOVj3=%86<rA805k/OctTD#amj'p(&0bd<%f.:8*E.>?7"_K'He
%E]rgB3bHP9Z5MFh-IS4%_^*H,LGk7B#uM/PKXr%'$Rc[0\-""E`ZSA$C`:CDE/ZX*WU8(&O's/Ulfa'I#t&_B&,5'A'8g<dK4:F,
%D*koU6R<!I/2b<\BttBL27g[W"%YO+9q<HLL/^iF`<@`eXf+Q)63YjZ99BWr&u6AQ[!di!8/2jHb&*qHSFB4;XXQ9m+YcK#;C65Q
%KJ=J1A]B/82RXAlotm!qJW$n/Rmr3A6Tr=a@%t"[4\W*.Nc&#$6!@tq[i@gb"2SM^a)k!DOQ\<7M,'$^P6!m/cpkIC\<!&D79tc9
%!hB)r[m3#OIjrXL@;rQ.Qi!-kib$O*hdbBWEO?,UZ)Cqd@'g$oC!p/6Q@\j_pE2P'F**DX:b].EBcJjeR=b7GNilqHENC>T94VUI
%:gbOV?:\"<C&rO=KRS>R_6B47Z8(jN'cl#ZTs&QBGI200IaZn/8M`!J2KCaRI";m8g#"C(BIg^&(;O=[;1rPXpYgk5]+%9W]Al6#
%s'Qsd+d^m9oR#Q\U=Q9AG6(0FMR@No/@4H.6#dE>5KhndODupc@V1FQfZF%dS_PZohX+K_U+Wkm(,3A\34R1id"tu5\0DkS)\roo
%(jaAW_iOkQa5@/si%XL<LB%U:&i*KU]V/:NZP:Ba3)LZU:sbo_E!D+SG_h0nhU5g:?O#9e-oLqmD.+:>"9;t!0#SYA`uCZtYR;Y2
%"hb<*=iRc_&VL23dsu(C5Tr+;mUA9u$>YAB"UZA1AEX:m8Ps:;:m%DKVKL)!`!en3VBN)BLgs&=J,i+a?r86>.0]AJ$:bFb*"8\S
%"r1A)A6tN>*bV.8;@pf%!=j*5d%*"[Ljtqk3MN[0+_l$20ua5^0QB,RBOES`.4@1)=Z@*caPg*=k\2Oi^t`Ja0R*p3o=?agBMSc[
%&W.c?EpTVnR'Lc_SnSMS:CJ'B.?5uZ0^)H23,,'B(/PA'K5.uW8DXfQNfR+$_^#4+cDQt>8R_m4>DA"`EGh,#+&&,"U"LF7-C2Vm
%Tm6f)'Q3Daq0/SZbdSqi]a93?:k"PDnk05_m/W>l+;1OZkSD'p$u<\0_k&f7KT)%02Fb!2g>.boNkb;TPN`9A!OFXk"10[Q,Gm*D
%M'WYS,:jts+XDRI##T1@kTI)oFcNeo5eJ?S&!_+i`l[$<W%e<Id1&?2M9,hp!$s?^H5"4>),LZbasJmT'b1B[K7bHMMMX\uQmb+l
%\,d;!6cM-/3[]_8a;a>C@m`Wl+pnWJJO%([QtQQE#K&3f@"o/W*W`5Z%+*;)30XeHquii.-?1%15*Z/qbI/*9"5<"V";l]H_dFm8
%!e2+J\sG";5sS`Ybti;s^CCE;.1RmLM\-'oK\&pu,7ko(l<uC9,mpA3!QZuD7g;+%"f-(RN<#X]5<\<<VFC]t:kFB]_W3\SF=<NO
%!.;1Ndd77V*LmV)6,ttkaoGllTG#i'JU0<ZbQdQi_l/UV_Z@SM[BOTY6;oiJbRL4o:a:)gQlh-(cp:,4aOJ\ID4h^KOt=h/5iJ(<
%1)@qid`4!`JqSol"g\d`VM[oM#(14e#D)gAciXIWHk;$?oXp10O=!Z$h.MbsG4u<3<->Qo`bm[?ie(kr&R#'F&.WN^*Vn%.kg76'
%e-/fL[q5%Moe=CEmP?])7-PbbbP2L21K@ieBGZDSg5'SG\&-XRVZ>ri71gJA5Y8LWF:e+bXI2&o#j<S*`^b58p'od6/fkC6FotBg
%&h%fp"CAu&r2p),!%h1o^THf]I$#Qs_ZF/3fEe@8rGb`\`_%+.#NcaWJcB)CNIeD9)R+WeQ3?8<!SK^Z`t?lG)Q<(m.(CD=6Lbj+
%7YeuA6\QH?`gds*N[1aS`[R?D<9S0t7u1b85rg&7aZ?5_G=Vj<^r`m;MAu/_jH_!@N+4?5F)\cH(dpF-l'O+1DA3ljFUk("0]4XF
%"U(VZ9t2uER$>b%clli3+GMY,'_?3-"F3R"._qc1M$-8PF;-a^/mp,l#,hcoS#o9bm045cK,+t:)\722!N@,:'mR[T!QC[]9L1^X
%2jb(7O%=tijYjmr#h,a*qb:NmS#.;/"TXp!Wj7X:EK4NgE=`FeDZM..O"<RP;MS4JE2LMu&e51n]Zl69+;N0FMEq+$%b6-gP,ZRZ
%JOr<77(!%n_:bCVXTB.BN%YV@&pT1c8-K0\VG4t?)\@Z2cH&,@%Tg+GeNa]h\^#`9:<a<*IO=;p0`Fq:0ND@LjoH#-;&"TT1=[&g
%&iC9h'=O0R+_fs%&.i"c((('W'nXXrML[fsFE6lC9a`>+%KVh6e\E1,[#YbaRXk'-0.ZZ'8T6GCFU0ZZ%-]-:`[MVa1>XG`mC'L'
%#V]Y.R&(7j[t?.TNC1ape\hhpAf*_^`/,.+k(5\R+ae@,s8El<KJuf!)%7tP;?sI18lZ*+.\MDt8pARrmO.=%6ti&G$X\+UN*&Ya
%j!9VZgp!;n"r4M+ia4HR"EVSP?K65'IN+b2ZR*rKX2SrMVq5$Wp'FmjZ;`+_ZCAEd=b,FhL.ErEjt2_,%0^(2cl--<[]?l[cH=n4
%mGk<21q*g?#,/;Y[[<)W"0ZT#8-XS#rj[IH)jWiogf__JY%t6!mOQY5BM@$$Zk&dNX`tpo*hXN=8)7.rLrnju>?UO+e][ATkM=\e
%HdF=QQTnVISA<ZC*cE3a`Ec$q[hU$uP_]b@gK,"r*_9<Da*AD^Q327DP0feYMhiJXTGjr`'05@1HJ/u+VpS,*!.j76MgesAU4P0D
%Y3ZIV@M-#65p!:-HjZh,+Y(Ph(7J746h-pb4gApJX%:TS!n!"lTQ$Q[s#VA6/U,tMTlrE@8J>sS+Su(\YiAuc;;4YBDk$h=NQ7'3
%@&BDe7hHVV5\2-hLpR8c@Bt\.KKLl+\]^Zm-<0)k-^djWcu9"!G?PorKqK/W"n7ukRcAQN!<^T.-LW7(;r./T"slIu*O/oY'gpuD
%Q3liN.Y<5s+&DqbD5fp3PW>*TW-=I`C=tZ1JS#[s-o-d.0K/uR\YA"s&lR(99,-/fKji?H0"Vh[;f#8fct]<s),lUOIj@B7"$IMr
%je,4u8u,>bMW%Jf"aFSC;:6,\g!CE$,XB=:MGO=7_,Ya-#uC8@-4P@-b]+4[:khO"4p@[2b)=hKI"Wp:mbb@q1`B:XrP`s!f!Ehk
%Ja6k[Rh[;)=r)6oD:VC]*jX/K"d_/6_5;L85qgm?(2*bN<OGiuEV+Q'MIWO2NmHtN'ZDJH)@c=DVoIW^lX.U>D.Hr$YrFHa_pn`W
%ECQCb\n)g!XsE4E^Hmdf$$nQcMse4RFPMHbISE\4M[U<S[KTgo![8j>4I9_1!;;-"Qs<K.#H]@S0,:OEQI0_PWoZP7OKi's\l)/X
%(qAP@`6^.B=$4Qc+Y?:6#^QLhN`9dQ%N<0m_aI_)"WG46oso+(;3is/CtXhBFc\_+kB_-&Q;2#*#tc54U;[E:SpH8G3+O8Y?D:"$
%8rDMG;;IC9DlFuPqGVOaTl3Uj5%G)RarL:jW=]cb%*?qVlSlulN+M9Jgn8ggrN2o6GQ*65!D>D4*^amgqGK6fhWU7^/0&l>1Fq7n
%;*uq:kbH=gkpRo))bk*37j;^Cr^o(pEg0QM9gQunAkLf$.RJf*q=Z[.Q(LNLJ$Qhs6&m0P#MWNIiI>_i-3/ZMnq0:?)9;#!MWq_W
%!YUu_Wb=dn7F]$kQ09JN$0Y[q1:XP2&QpD3O)rUpL5B[WjO54cT)_aO\7ia![0s+EAJH;mTddo,l)$i89m)WQKQ.+G`A%Zhg)Qn9
%R\aC-(=4BJQT,_H7(6*%h9/YerYH%7W7r_K;cmQN,J,P%LUU92DNKnl8i/Gi*U4`J-I_OJaAc#9_aHd`U5!=XPAS7bN5i)8]SiH^
%ed=Q$NpaO>gN)5d:70]9GrJZ=PqqHagOtN/][g)bfP_mF\%?/mG:!bW+GA3"^@L)Gk('</@]#a*@)CDj+;3H1=TJXl$hRlg!/C1d
%I"VGS)N]\=V'KN]!`=^\o#1gH^p:KhEk"#?93S/+\Er6hW$DY(eg!o]Oo\,\hq<`QT"S1Yd&!E=EBG>+W$\MjddB[+6Fd9S:`P[n
%iu#6&'jVbi075,edpJrX5UN6?6$VP196ca33kG)ARVgNR$[ODb+s)n<<$2g0G$Ks(?EPMSe*Luj+BpWr\`5Z`1^u:<!?0DO[$<jr
%3Vp*9"/d:PqsYkMOW(q53/T0cAJgMkF1d#b"/KrHI11co`Bf$?!DQ2j6"i&&.Oo6M-l<@Un-fX/G;]fckkbiQ+;Dr9_A+2n!W&"4
%letCr\9nS9!Up)7T0a5r#CQni.Y&)-Ej16>(]CBTFFBsgcJj^;l?@so6mC3F6rFYfM;HlWb6"-sE:R^s;P=MS\fW?8<*Akc#.5"(
%S(pohkL/fd>W"nc4(p\\g(##:MecOS?q=t>mhcHO`$'V1o"P9-^mtUgTmRmNKET@&8J\j^#kYrag8Yp>k,/Xk8<qhs-qkHZq&#8]
%7M$L&66'+D,V#g(QID6MDY3?._uYDun1HVPl3?f;ejDD>mT;=)".K:US9PKb3e1It`#0;YG$=rS,0:uU"Brjcea&_t&I(@pBK4Z%
%d&&jM0]D"B]%%ZX50uYdq74jE\`p&k(Ab>!+"2Gg@QOYu\f*X5^$B\&SY:R+Nb,`e9n)^OQ^Qp46&2[(-F>#bS0/%t=q0)7\J]EJ
%\JUgsTV]/R'Pt1R%Qu$RNXI6@\LBg'V,:+*IP>kD?<g3*].Fl(K2.?+kk8P^.g>Va_ZVDuQuEJlBqjks.GMr!#.-pVG,+_coWA[_
%A&n"C[#p!pO19#l3asZJ5I@IWa6K>D$X'"HEtQ0uAolm6*F2@N_@OPe-(>.gd;rQ7FEC0"aD_/i%fq,`[A57UZT)^(&p^$eLchk,
%D26CO"?Kdcj5Mn3frFMg5unVJJJ@3:OO%n0)!D!s0FW/c0\kR,UudXajb-!j=Hp!MqQV^o`8ndo(+.d$oRU6n@OG<6@&>UXc.'+N
%9gkT-QnhG#N'9Hr-0FE]J=0"LGo0)mJaH"YpO*K,`6<20Onlc<WO)n&TLTQ]F`]nb6:S\3\GH>%3m`9j2)I6;RHU:m"bJ&[4F*eh
%&RZ7@B*QkTd6DZ>UC.E"d2J0iLQ#UV9VqmM%>p1Z$B:+!S?(ehD&qi.5bJ?,%GDOX=to(efJX`hf`aC$d6p@=R*fV_e"Z63jB-:4
%#,mMQ3:InE57pdqPQ?GhC6<-;;KXN<;5FEN8*Bt*Sh#tTI\K@gCs*>8d&i/_#Yer$LC01h"lt+J*4$b-Zi-V<k0HO'J\!!!7(d">
%@AVq%Y!tHB6mIdNPq0M$?5nVK0LlY&>E&a&Z7qr&DG&Q%0O>Ue.+F.H$k=Hn#W&KGOSR#kP1.tl5r,WrdLM];3.6<SBF];;q^+IW
%E/5Qk\tEmMOLsUrWXmHHRhIas*o58Q,FN9PA-(iI0cWeH',$+>_D;%+6ekX'CB7$f,l-Db+`rK,4"=ob[W7OOE4=I]24cCa!iaBV
%GBN[l(:;bQ1TibOWM$t--CLP.[qPA16pnWYB1"!1=V<`H/(PHB$dL$QOq\JU;*4Cqm?U-'J9aU3LGmppk"mJs?mXDKS;sNMqC;I3
%\$kNqqdb16$.E>L8M^63cSP2IVC>K2>R@sVK9g\TN$2r.$p"E093:h5i+kgqPj14qU;X$W_[c@ZM38H&Ed$Rb2ck/RMC.Deed]tu
%`tS`WW<3<%%X01d)MIFd[7Bth%d6m0+p^LXF$L4$P!sPBOS/i]DA^N,jAjKB#8KGAi\nC,j7#KiSl@+IOXDCa5M[L)V[lmW=bZ1Y
%7hOu.'ET%0N8c%cTQfue",l\rJ]5YEVi*(f/\#g_?cR=l%P7.s#eHek!h+d+ZB_Hj85pqVGnS`X$u%[^O&@`1;'^?_<!$b:i9gqN
%H-GgHndlC0($lLQrR1hnl)a(3693=X#EkZ-I4\BZnc4<XUog_[39$7BUu7A9C>ScE=GF#^W\f&qjtFN$UhNF6fV#7S)ZmEFK.;q)
%VHT^okHDWkoHn[E+E2E"pXZZk><NuA7/BPjph2u37AnY2_(*TN<9s?17K6RFTd",Q9Jn8VPSL%>4&YJ7`Ee4s'q"2'9X]4C=[3o[
%WUX\PNBt1A!DIHR$Y#DNW!a/mE+]Z:H`.-I-NRPKZA8U;r4E?J;-t'*$**`YnjU_&C1H?!D3828"`_q0"ll?+YKaR4<IgI]8_b[P
%@agr?!)5$[h5:."QDq5TSDq&!7]*j^[aL20fXB2tG]qGA74FDu_bp[Ik("5"I406]-c&I,Ba@WpKT38o_LtKiXf_.K3?i?J@i#?q
%6YQ1)4T9T=oTp_8q[hmuJpO40&B5ATQB\_8We6#NR^=bYU&>P"7t9$OJH<Z."Ap_`,FEE'E?kmu3#I'Z&+2,ODSruO-4F?\N/Mi_
%>iK_D!.a[N!OE%h(/QSK?H3m'[ooE<%sXEi6^,b<3spdiZCnemBHb3B0N-DH(T>*#T\N#gA_LI@%ai?K=;jR=ZHs^9l?I%ONd%Z$
%&3!R`BT**+2XLdCD1ZNG.tS#MFcPI2d&Nc),g$o[<MLQ<%l1p>gEPK0EAt)c-o26K!2I!=9i2CX4gb$D[\3a5$QI'cra,HGXDg*p
%+D/tljtQ<^#M'&pQk'YVI3>6COuu'ul&u5fO\eB>&IRuK9C9M>dupOE%V"?qMqh)ic`,2DAdrL(ns<14V>F1?;GCUeZke8YW;;@5
%5R<ndggDU)'`eqD9H:VX't7_8UhAY`#IL:(Ka^J6KW51IQUtg65[6?lTV1!=\D-QF5`#a;[k-YP)j?44r@R\HHg^YEDs6(eCHtOm
%WD7cT4`J7sqdT.'`Rlm6P`6GH%9nrg<$ef;P]m,<A=-tALtV!=TT1-;:k94ZEuK1OP8ou3`DtA2%)n9KUJ\%AVLB2f],PM#1S*No
%A;A.`Ta:fa:2KRpT[>AhF&lI"g8VVD8HP4d9S+-i$)+4/J_%kt\dmsO.6n)q5J[8Bo)[-AC>03+!&R@SW!u]"gYTdO,f?XW-;*&l
%MF%e^\=uO$\G=,[>?U@l_b!["[tmV[LJWC1J9V@#d&Plu*YGo=""-MB2i+I;Gn)94[^[R#;*oe)hC&`l@H^l%P0jJf+r;:c+K:QD
%PbLZh7,8&>VC!l.aOlYicbSaOD!Q4\WndVKY"^'H-!u?&YC2[bbmfNDEeDVfH^^^X^Ff^AK)'9?]/2sZ$PLc$JWAkj/Xarq5"=ie
%j@P,sO8LUS]p"a.g>QbYF7`(*P"J"$-mS%'LZ&OP>ULa\k%F0),0_gM+C[a5s06b\HB5&c*H822/qd0*OHE(TZ078U>%\+<;61oR
%MPL_K)99]M93GBne,6oI49EdtAoEgD7'nN"[^&5Q8rP.q0P0MUf+&/4'dnTfAsi-YU&21m1GqHk'MKuu5g(o$0SJ:aBO%L1)$6/+
%,aU[Uj(`eNdnB&'3[&rDb@i:K=@X@:L#Fg4@[$</YN+2(LS3k<5/shAe\FO$dIp<7!r'9l,?(-YJ!4FF@`ptKN0HiI;04*Oi$'O$
%1mW&qWe^j-8#A@>bp)Au17GLG`Nj1:'HdgG2&bXt"*\mPM(!%SJC1T&St]nHTd=/Qks[PRE`A3ce0*sel&`),_kS#"jlEpf1B5Q+
%7dJ.,m5IU)47uUg*1?)JI?UDk);064]hD@jJbDX;(+Zq6^\lRRoUV1`_@u_lTn^^S:+<"!:UO&P1E+@Z6*HpU\%3nLCA/,mc@st\
%@2m@r!%K7?[?:gt-jFF[TM4D1,%qPH\@rq?<Pc1#2$8+qiA!L5E'p3p8#+ui'E%6,4@DK9\oK^p8]8+(&tegbU:BI\mh86k(LbX;
%FBDt\]'B#Hbctn&@SNDZ?;+6!V3Eli$TAJV<.UiX@F5kP^lRANb+_dAnDH+!!n+V:Q%14&2J]99)RPueWO6gM]g@%D!e"R+5Ok47
%hJ=4?.0Zc,[N`J?K^u'l2DY2)/KLR#-f'Tbe"r8,aq@oMD/bR<^"IO3\KW[X$),G!J\ERr#M+h4)f-i8OEF`c[*a)QO`5q@RoUPH
%2"H/,$5=?1VGCWT6PT0C+Gujn@F0uBc[MWhF[MSPO[`)!8/&LV#8EB[!fb8ZE4J>QA,$b3/>6asV@=ecKc[)s#>Z6)"9VYj,=Tti
%55m#qWUPr8CXS^_j]#Cb*lgi!/KtO8+?WhbHo["7Mp2a'[Uf5C9O6o;%b_"a()A`an.Pnt="'Ms-Xm,\dde4B(jaWDUL;MH3T+cd
%8U9$\:_I&4d,.7QLp!BdH"3PF5\H6X1i`dcj-7CYeBs/),QIk[oc:2/T=B9g8GkfS^f+U&AD>NcX2#t8OQ6]+2\7$YPZ(HD!&-NR
%*]hDMIE&TGQqnH1s!&=17s2()gTVrdF:=j63j,sRPcL1EP@HQnHD3K9"E?Q'N;P;IFTJUrk^>fnCd_`WHj2Vel*O$764%d*.>j@E
%)Q:0aNP6Ml%I&=VbbW`>J)]I4E/^J@>;RpXe$0Us<[?%dajE4FD,5qAl#bteg;Nncget&GTGs"g4*<M$AB4rb,_HaXi[J:G)H&Tk
%o%Lg9M4r4Q<4dOVk:D@NZ.dHR<*E)V(+tF$g(hYg[JkZ&Dqf'JOkb5r2rO.DhZt&M5YXFCApViXg)Q0o$dS1mZc8$0=>U;ld&e<d
%h4n#[Z/:$%pQ)7oZHan*M:0'ml(J-ga^C[>I#*`?a+&=f3";^=&bjhlfgm^b/Y;PQ9)VHS^JYT.RUm[(W>hfFGrbZe[f=dmdZAE_
%6a=-2Um?WZQ"=DS7V[A+o:D*g7CHSh19[2t-s9C^U`q?B8>;o!8@J#80NeI6?1kn$>2SHMe&c"7f7GMHU^0qrG$HJ6H4%#dN@$`K
%.rVMY]53!5)Qc(9/2A9:lPsb=$gD_>g!;U.LFMYo\6STdLLqQ7++LM3k$%n22cuqZM739*1'fb+P+C+Tlo35g8WeDu.eCe\3lYd2
%$h>o!<IjReN(08uOtk`k$V.2qTTZ`+8RcJZ4`i%Xl'M4km2u4DUP6N3FT^PmUo:!6+GWY*Y:NsN!BO(>"\2/k*!T<0aJh$p'quSA
%'Y?s4!Bd7?8"<pEpB(S;8Sd.I)CJtFU5j!o$nb+D$7X%E,YfNN)F:dl59sr_8DY/4Ce=g_LfBYfeU`k6RF_>cNKgn4r^j&O"Tih<
%Z;E=)`@8rZiFfYum382'N8"RRL-0__YF;?hMU8Vk!h)\b3li6-r`CC$)+kC*q^BPA3.r@o:#:UR`?+O2o=q#53sX&()]2.0IJA1f
%gAE.4+m@4BP>6QaZW[$hoqVN](PrioBkr*H'*Wr_Rg>906q'T)4Cm)lpaIlr8]Tg/lMK?dfh_'q>$BYK7j(gBe!^bZQR(-nS$IDC
%>m@O!?s\m=pf"G?nPJ'>7AIa>\(@nTUN6$Ls(l:C%4&;ULPg85DHaYO\P]4`k@4iWlQYYt4+M-ofm0o"?q9B:Z=E&p+2S(Qqbrt`
%RNCRXSs1[.Rqj]0gAOeR1&HagPLFtZ(9'Lhg2]do-?&Ea-MnuI^/fYEoO=^1Gi/Q='2dj)F9%bMJ4/(ZF&aOGDV'@YdbCX^lq_2?
%Mdt)DfC+f$`pQ^.LbSSa7^7;rp*p2TC[X8k-cb`=T^"A3j(Z4loCm:a<.*IoR<qMI-a5^Ao1$1%1'&;fh=dk0)A8^r-JlP-;kb%8
%<dq/@@V]meUfqdVf=J9'kD-*]A;]c9FO?_<r3O#oj9@WZC/45nPFH?gfp.4-$p@?\>@H2>AD'e.Q.DW'a.t&&Xd&UaS6&81-F;J"
%jr3q-g7'ViPu1?Fp,``A>ZEc6.8D]1PFfC@i^G%Mg<;(FhQ&g6]$ZoMFeWR*WFMiP)r2>,c3c^s<^V?48DRDXi)OKaY5"`eHV>G&
%7=d$`h/']D)"kJ;CWnWm&Tk>kU7[pcY?l.ZWnJ2t:XjXA`c9t"Mb_rbin$:M8/ZNpWbHtC1a4jJ5rU_;%q`M8R%8(`Ypp[<a4n&`
%pZsfd`LrT23u`<mRk)B$R_V0DKkR:54>VEnFBaHlS.HL%NBFY"VJQr[K:2#BabBA#bk-O+aS332f!sSQZSRr/iXb.-P\+6ldH*q/
%,uj\@07KI+/Huq6AqLWRMFATMQ3-*Q=m:iX@TQH[g&pSVXh)J2:e`ja@;\Q6`$+7u:gr@`#oB^p9Aj[2EE=S[e&#,L)Zp%/;'mBs
%Z.V]&Z)^b2C8-?1IV$Z,F#A(i/-@>-KFB?Qr8g22<L5[b]A2<f-eI0%UU<711KQd^C$qg@2htXDA=)YIkkl94n:^X02,^Dc/B?J8
%,.T]>j?$^e9k-G5Jo<[d'i!#oJES#:>Ng3.<'JAgfH6SD8pe)&TuV;]Gpi551-R*]s"SaO%r=CIIDT4ph`<DCH/8m#1`;rb'<_20
%4a]E]Q,LRsFIIU:\*S(\`Ikt&o$3)]lXGuk.AFQ,PQWunq?&JM<aD!CZ5(S?kr%.sH`<POocJ&&$8r4p-D^`ADiYd0Pc_ITcqJU>
%V*Y"I3YIFmL;.BHYK8N.'7pYo[dUhf=`E9PiL!,`Hgl^WD)[9^;b3Dt.N^N7D<YMJNW$rZjHh^Fi(EX(rMN:3:b]>gmaAQuS7H4Q
%#q!dD%8kU9p*b8fJc%R)UB[Q_#>1<[g/2\\V04/?Mkd5?7t[qTB\SMl!7@8of=.Ym#bfcgpYVBgA.kfYEKOQu1upC_n`[7R"5]T4
%J$;=>hB;7DRk*1b<6Mn&Ns"gAVuA9?bNmR2.W-T#@pV0$%cJiPM()th)<Cc;?)RGj&,.GMfO%KW%2u<Vf&9e'dLS(QL=P(C.]@5(
%M+_5YX:(cY--/m6!q^QU<#TEeP*3O(D0MEV3JK'SnF9#d75#SP0"HJQ%R(O&S9AMOQ)rAD>V3g6%dMN+F\uL`m$g6'lFraOHA%Ec
%i@`gq/\;9*>Vc_#$^2"kj`L3olh&@Pa]'sX!\Oe]M*JpN7gRWU="tL?rI$d'"&![Dp$[&FfpkRD@7>$a`"?&O8+,7%$MS_uf<0&\
%?'-oYHfDC3YsoV';"qU7"nY'd.bRE8ZSYN*K0*r>Vb+-'E)8HG]-t6kLN`fGUE?M:K^V_W4I1kq!?>]ma8$jo+>JVnb$U#\E])N+
%0Bm0.D1J90PoaD2o)fkHD0)h\;su5oCN>n+3CHdZVBJqoo@0YM$jKq7oA5.QmZ_$/POWNBIMr,gnhgm(JnUW-(fJ<V+MV,WBhb2:
%F]?f=a=*9h\tl>n?M7EEGaor8daJ@CY</REkc`823Z`2.o3U/Bek:l24ofmer3)UhVF8`*[r/1g'ZYMSDrlC5rBVjgR`osYj*P;"
%I,,'l7JN@R%/sH'f?O>am-/*gSKO0CYu($mm'$#1q5]I!iKr<je^@4g*ac*7R)re1[qK7ng]"]6-<a17^1%DFp_=j5HI4i'FjtLC
%eWk9PADZMEI[$YmDu);IQr:.$hU?!LN#+=f@Xf[tO,$Wj<r&"QJGcU?&s/sLcG*430p61S.OXqL'og<)_65e/L>,+H%!`sC>d\U^
%@J1$Ol$lB+$0&pJCpRRaVNIe+2?2:Tjp7369#LITQ3FdXLDr'=J%<iL*='2sc)%NWXV-,K=]\E%mJ6-B=bG4k6rbA_$`OMZ\A;eL
%8t,/c]2ACS)I1[SDUNen%puJmJnn'a40l)9J/n&f$k-PDV9hMp(;49!nmg>9PR=N]dWDh/^G]F/g``]6PJ=V@P^if,I5Vl&.`qBR
%]dg-NR'&E4U4*4L"0(p-7$k`O#UFH]rXLn3Iij@C?r]Pef3sA59/?7bT9@F#&irl><@HOFL%K]7[pMr_4o+tX;(RL)i't,=i*0a:
%n<s2nP;hotjN/jmo#>7k;dEGr=1O(9e]+1f.+'*go?>6lg:<f9.^B3!!S7M-*79L2Z%^>)mB:5J*]IFZ!,2T8jGQG8DpM5bBuI[9
%/ru^U4c@#L1V!(#q)oOGrSS.,rp%!K$YAo7MZ&h-4QaSs4O&_tKBA\=^E!ZM4Wku<Yol;57=VH=r8rSig8[YR"G3$R7$EgFWO$&A
%=S2R;&.coRY=h;+_olqAN1O+-\342(dRM@CI7d)$b$T;aKE#MDk:^D).WtE80kkG0Er0YEl!$Y14jZo0c98c<]MU0%lZI'+ODl(t
%4LXO#W!A&a\KO,kgq[hjZfpS:V6Z\4m+GE\\<aKjd86-FPr%%-hLldk$jrl\W',?>aV&-@*OY6,W%IBQB"#nn&P_H6'bD@s`M_i>
%m?3jFGS)B-ekf-8e4[F0GNq:$Tj?RrXZ_YYlVV6N)A>e5c%hOiUY=+kEnIKh*QS`_[s'LRSWk,YQ^q)%+g<+/Q1*EX5p\dZP<mD+
%,a3oPdG(hc'QZn:i+>eUU70g@HmR^cPcpptUQ?rXBh3(ts%"HQs3b;9UW$uR$N2""o1Hu''KH]^pbX(9^nQDp"_^E#=:81&%lJ8d
%$6VZQd38%7Q2Bn#K[DDo7#UY1;S^VhP%Y&4=$ol19%&YNdD]9mEmRG4O3j,=^(YUBekI2#IBbO@G.?5a-#G(-%c9#)>H]:OfnEjY
%aCjtSM!#&,p<'>j&pYtud0eb2=Au%AqL*6^+$5'=KLbF+eT&hSFdU!;?pc-a@c(&M<MRK9D'g^A-,M@-^SDm5mnq&E18C?;[aRK:
%1/!%l+`/H1cAQ8\l-R\cUIKEr(j_8ncYaQWj\HL<C8sG(bJh0emn=Os60]<``+EWq(kL&Po[M]jUsO]r_r)_V,bG?[@+opM=[l;I
%m;>q^TA+KpHE*^Z/)l+E&1BXG'@\U,Ku%t9;.BcZ/"\@i1G\RK[^)>]6&IM"I;(ap88SlYAM=(X:t]mH)Tl9lg;)8jZ&Dj+o#6.Q
%Wl]a[p+3\4_qk6gRjr!Ibh4(RY3:OLd0=][lIln*]cQGi4^Xo^EcQ)8,-_]eW```"i%s?\KqneFiTa_rYHcd7a(hFeqTNQ/(a1&t
%AOHDP<?[f-=+.I[?d[e0o_L\W@8eBcXaEsuYt6:DB14E"%$DB1g.:VCIb99QI2$-a"tr5AC2&^R`.8YgAm#m$7/[T";0L92D]cBm
%adR+@ZsU'8'[WbR\mInP2EMmF/C`h1'X[3dURO]WFE,9.JQQb+L+"AX%>]r;\DYDM4^/@F9be-@I32u<=MB2-atdKkUb2F_<-Q]U
%G"@N0s02ZsKNV&VkV@n/]qLIY*LV+QZ5q'3/iqrdPi6e#+rTaL;<oPb""TYQ]^h%[:`(Xl-)lr9f;R@A-b;nn]j%O-6aNS^:?=Kb
%=907?dRMZE]"H:W>^l-875gj=dH`FFlp&*4E'8?QkVj\Z_K2aSDIfL4hA(Q^DQ.;kbY6ODe#g:ZF"5U%:^3n(1)MZ4ogd$A,ka8=
%^T=C?]2\rq'5;PIgD^ImP$:@4!`]a@Tn8.i0Lt%@WB0p0A::M<>4r33k@CNhmcmh@!W#E;KXml?C*5UkP<>+bdp*4Ffb9!n'FWM.
%'3TF\bQ0E/\O%u2RY.ZuXmVt01)1&V*tPT^`'4ZUe-c9[L+.h$YFiKr,.6Z6$>/l^JuV=nGMi%3eWQ*;/CKNeltR=(2/S/\$:5>d
%MrC<sUBnih(Op\YFgCkO9/QCnU!+WpOf&Q.&F86V!eU8cgXF2/N2!X'Uhgr(![;"X2uFqH=$=Z]HXjoTRBAM\JC#BD`7H'dmEp`)
%6L)icKF2\:/0nseMWJn1<*#c*GBl_IbS:gC.#5LDibjddB0g$:7s"*[rf-.%%[4;OSEWeZfoJYB_hYP>j+33#(Vkff4OT_9fV9_f
%cDT_g:F$o:OoUIo2aY/,8a:/,%O*G1.hQ'd6?KHDHRlBD$3;k<bPO/DA)<Tb`BDn+]=iN3gagf"6Tse$l8Oa\7GAf%7pajRVumSQ
%enL5\(t6CEI%Phn5*GEXM&6/hpW'g5PeN?hmn>>]b@b'rE:mZLd8B&g4mpf]\bu0n]oOX@^0B^>lVTZYUT-4fhX([G!=HAO!STa+
%gHX?@40A1?>UeC8T.jc\_R_h.j1O?1MQtPL2R,X_qB,t;!q9g^dMuehAIiN$l:?(OFpbi/#2Ek%eU-eT;70R$j*ihqi'UT<5,7HI
%1'%K_$$hh9L[K-V=6`'%>1$UVO'8L4jGIb&hb\=gB"PuYpM)MF@T#+sUAt4&57m?O;4PY\O2ccCfH8WT:P#.;2BDV+%@*>D)t//p
%V.,F+.l=T$1BE$l0!")gRdo1%$]&?<im?)JGk'el#bH@&bA:-cA<F=^]3(na27ZOL.??[5lPkAP.9<^alm,-.aXRsfE`7nSTJHpC
%]V,[NaQL;,!r4l+hL'/^mo-Cq$&-J4g&jlF<\Q0CV#YK9<K>r%n4EiaF!(5N%91cR>?6RDZJHqnZKiLjlkQO%<abFrjME_ji]A[H
%%JImS_.A:E4:T>WSIEZ<mD;1)5kjX[E@3-;,/(9["=r#0E8=b=fQkscC6hRXDVgHX=1-kcViUP.QfGN@KBuQgG,=&)YqUA3Eb,DP
%'(_R5TX*g,e_Ep[hOfMcB-I+SLjg,6s)SInq.D]J(C>>!i-b'a5P+ncgW]]nq(e;6Zq%)WD73BRH_=^lmj+OJh?/1g^6=!qInr9Z
%qGXQkr5tuQB!c2kpcr13nYDf"iWK-/NVVpt4?ae1F3OGZ.NcESQ-0F/,+/u1=_.,4V\eUA:7oYk"+?<Y7uk.&kgT&da"!WPl7[U-
%/uoNT79UeiF-Y>^``OM[ar-,]4tt2\C*2-p.^r1Ys"&rg7!]rQG*UqiqBEc-f.8]T^ikVM5A^?D`t.f2OrrPeaRZ[b5Jn-4o6X?5
%mY1Q<2ZNFLc@>eZLDV*3o>CV,s+H0brq630Ikp1#P!@fL)HNIEe&qc!9]>mNfo0e\5pX;H=#_dtZFpgc0IG-Q'n>6dQ*)6q.-!<c
%eZQlbLe&:-(O/,:qNrRRT+'\8YK1iIn]O3SM0I#/P0Gr^c"Pc*ij6;3!C#bfL,jL9s*Oo["Kmt!_K\'6kH.;r?G)ukK(\3ujUI$T
%So7\V+7E.3Lr2WGW:\kh$RM&GE)][5'C0%>NjbubKX-*\;4G<NTK>ROg^_*Y@->FsismV_1EN%Q_Chfkjm]kaCN9!)/^?Zl`8fIc
%kRB@SWKn[6Cb[qUq/2+AVeHnW>W88HSoW"!V!G1!E>\*kB.n`M#G8uOB6!DIMM$u0niN0\PC=iG%cg'99_t_.3RAR61?k^BjE*B-
%TWt%\PiLB!1?Cc.UrqXZMd4(n30Pml*BfZ>#PoWM%e!Q]bN\eoA!QJXbX/q_)/-LBB&E>_f'Iat8t1NXOZ1I%0+qpn`^T%FNUOF[
%kE>#DN/R$_ckkqfGg@R`%d^DjTYn2h1?ce+(FaIeWiI+#*W@F([1'WX@%A%4))fAG\.StMk:I+\03MQ.'YhAUApR*1E(nn'BbWEA
%Zu*GTee<s]2>^A8Bd$nL=SH$q>K&BpZEcr9KNG2O*!TlG"r8=)c50;%@:s2G7UZq_Zd^;_+WcL*&G#+&"A_2"AMsRZ!,JU?I$SS9
%6U+kTGk6Zfc<fB>a[R<@AfjTo%sFUZbW3bpQ*b6%,d5^lk(hu_'Bim>Dni`ApQJP;5G+(aBB7sq)>Rt<gXBZ?P*^eYIt)dO%eSk%
%:&=,E3rA1ugu,)cCm%STfn$jWZq3JFC'XTUf_FgTEB>,aF%lE%clG?"4a%),EpsS-=cV?IT9mGSl)2Sj5[P#ZO^G7]n9"T#\8"P)
%4SeN2+m;@g\uqT)kQsrYaX_p-=Y3XNniO3'c/NQd.*Dg5EBXWVfu^f%a:h4L+cpGJ9uJ9/QjPC?X9S3ZdtDH\^(@olm7dj"nkkL"
%AnA-J02r;>X,H*O8E0"PEh$1<iKrGNre[P^9EfZ>R<$nt<Xd/t(^DC5[52h$Xbp<k3U=7r$I0sP3C#f"e^'JI"=p"T'$6Eb2W&*'
%WCsIl\JsU.hq&XcoC/2FgSL*qO/hUiFK_lS8U[F5dL!_VX2>m00&G=,7Onm[N3[7VmCYT&^2?0FNj[`L$31t&p1sPMT6`r/UWGbq
%(Yt(oBX$ZD%+6X@$U"=-YAXE:_BP'X/lKcmheXp!YoZbL==[MNf`Ma_o]7rbpB1BTeGIR4o!=ka/13[*aaZBmntRr0c:$u`\dI%B
%IWHiB=6`f$Idrn+&UX)ZB@,S_"RR2kRAaE5=(.#$E[GZ7oL7\Ib+=IFPG(+VFO(*YqW4dA?)W\N?/MlBhfWEF!BbT"9E_Q[70k!F
%j!odZ#5oP8m\qn[N][uq#PoX+&+<XhnpqYoTmU7&74]OKj=6OX9Q_)pVrN8e<B:lALJ]WIqESD@o\hr70thP],,j,\?UXR<&[0&t
%jk?cF4rsDGmLG&:*<Uku(P&0"%c=D,%f0l1T$DtC:ZFa#G.3To_ub=T8SrD[7Kq$GI#R>dhL4UeDgd`$$16!N!L^bVI9Q?Cd'f/l
%_q*Tn]bA6S0Sop7;GUH+_YB%,Le1;u]Lj7[/S-Q[H_i\)cL&*5H?.V_7.(87j10Op)Ht<m.)Lm]rTs)rC,\:HJ)*1OM7i5O@+PPZ
%6A<&We??dt?Bma#h0P1CI<"\pq:#eWY<K`ce`pGDgB?MGn@"!3Z%&0.Z;ugK+62?RrH@LgHuA"MV?&)KZ0^(R&b-HogZ?GI>iO^(
%q]J*`lh@_fpad1EMhOr//:9:ohPhc'abq^<j>1MUOr&C!a_)7Jm$#bh_k+sbJoE*#AL1\p$ft>8dUa^Xnn#Pq7)GIRj#JH5->*hG
%^.OiZ]Z?Q7-&]-5pNDZX6ip.0c:VDRc@J9a;WhlOc`oGWZ=i"37J\Rr7K+jA=<u7%H*8u:S^\j;%a03a6\ipr8tqM8J)YX1[HeN]
%)C'qNhArO]@11Z()_cC3")>hK(Z:Pa9)%fV>_,e)$5r&Hk<P^7?[?0ANleK-`iWGI)3kIqWq5BJ^`8EQnuXQ5g<]DS]gRB/5<rC0
%Tja32OYku3]g*^gS7AiuRtB)#le['gWFpFG$,q/odW>@8E654(#""2ao=8.U9^B)oH+K?E")"]RQ`>S`O:uAPQK"#T:jD;JH20<\
%1SY8Wq_:;-,$\.i=A0jbhQ;-(aATS%be2?+Z6/fMD"d9Gq>51Ip&%M(H.6_+C6*-9g7YA3?P\"fA,!!d]0UmdG0FU(n6%;i((6b=
%=SQRrQubi>TJ*Uh8jVm@a[3_a'<;PVQRJchHj2Iq9Wh1oE?\Odng[ilaZ,D8.s[71<(rfQR$3Xpa)')_bkgS)UfjXSXBAo88=O1+
%(O9Me6?a&T,qh#dH,h+OcGoc%$ZdYAefDCqT9["/TCj4_"Bq+2O[8<7(+F?-h5_N!\)Jloc3F6(gG/!8d>bR1Np!q$BZ]#RYcG-Q
%7:OW.el.;V1d\5!fdj,>m0hXJjPW$@2d^f=kmbj_d:PlK,.p;!TI8G$i-CO*/3E@',V.pOk_>4>U!Y\F=S.Zo0F2?h&08:C63@9P
%HTod#B-3`\H.K8"GX0g&(I:s&k3TX+O\h\s>@0oX3>mR?F89MS4iXg`p75+9#qori107HcWZ>t@d+%^-f'U&jo)d%m\/tP24uke)
%1Y[Ckqi@3558l]Wm%c2^jfEk"S$USL:m^d*k&G`W:;6B0Qg;c(RDb;Qo>PXncH\a^:=#Hkan])<b6ba%_@Oo^6Vl,#h;oV.hn>VW
%Kt*YLjTWhA>'BI_Skt:3:Xh^:cIBuDf2HfIg.tMBHFhCnRDSdT]a\/?,L&<FHF!jFKZk025:.$#6MBQ[CAd2CR&p$f7"#lip;qZ2
%5^X:hn(P3uBL@iQ$nd"p@Agr:H4G&i_DYI6;f6>35dF\(+uPjqHD8b(XBqm_AVDI4c>U?S`U(+qD0&fLW6'@4?t<Cag;t0Q?Sj%q
%r4a?0"Qe#`#C!6VXC)&?:ed[qMm)HlWpAd9?<pVbYU'lYF"_7"q[a^;]_4j$lQ61hr^\\tT+8of^h^"-Zn5(CcFg8lS+chuc_YmD
%5C+g3@`X[@M\0[3,&0t2*+8/hrVGUP^Bf2a)6r_t5@.C[_cu>TVRJu[jA51LUDYIuO->dWKlS5di]4%IPnlI!*S&b#W*,8Y+&:\i
%pkmEqViEriI.)YJ>#SAo)V+l1Z7)R)U_%829\\>#5FX3P-*>!iSbc)=TV3l9*ASuU!8:OhHN1iCkY3*jUJF%l>NBVBgL(LlfNK-<
%kJC2j;P+c^VP\A*rs83B$],h*B'V'sV;gPBV*6H6gEmTrH/2dk];6s2P?J&?_^!bOQd7Dn2;XlW3LT90]ae@:Fh4!QnDj7n:/a`n
%>oWB#kRXA#l07C6_jMLrlI-eDX\:LP9!**Z6;:?$a+M/`PBn\*L21:!YH-"JeuW(4NJaj)"$J*TB(i+nhOh:)X(ieX>%:]fT7o>p
%`f8h`bNmZ/G?["SUGloZe\;NR*ifut09[MSAAn=`10[u]s7(@\q!IPMqQHb)qt:?,n^$N,;Q&rReFY>j+;9Pq2#\%i"TfEYiA\mG
%+/B>Ug?#:I1!2!Bm(3@b%R'S/e(COW'(asX#7;h4p_k9=Clc(ZJtLD-O2]P[\+LGDRhi_\26<7P1rO(>9.!+!%aPju-_;8,5bOHN
%N&7';IT2;ZI<,Y$(fC6^l[3j7\(?IFF%nOaA?J]Z.;g+co2;3tbf3H@8MQKjBLGfM?He#X&UtL/kfR<_2f[iB7!k9gX*^[4CM"nG
%*br\g8efN0'.l)BH?T]iXL.p/UmCtgdiRX;/.6B+SuDr+`>Uu#O"T7t-IJ53gWBup]--cK?.q61^.tR&"7&&CUZGVD:L.?&W2PhX
%#%GF&)m7\M[]qMkTuWYVVG2u8$X8RSqVD@Y=a(mrHqO2$_7SOsW!A+NI`*&;[;(YbloppENBWmG'@X>4f'3Ki5T4r&DO,!kpsDf[
%q(@YoCTu[@,L;QhQSY`VlZcO/6,1$6+&8^1"7,iX-I'g3B%eaOl&bMn+#+_]A4TtK>**PH7u5D(AU1MIoPe#*;cbMS0Pt3k-5^#]
%e>)lbdJo99PTV9-W[>LQQ>F,!;Rko7RC]3)E("cEORq;^qJ_VGZ)#g-iEJZ&7,*2KQu%(&%;VD&qmsdcn##salRRdTH%:@dqLWE^
%E]07`iilfaa.Ocg[HC`L<;-?8Bg#6qh"eIu?!?\rqYq`:5SpoLd[QpC_KT2phB[&h[pJh^`-hgP>)UR=<SOK>";3GoOQ\>\`dSlq
%<$8AeCL:C,c1]e3a^2\c3'O>0!o!s9*`mMSYZ]3Kbu5R231925$1*.kqr9b)oX8V?^\OA6q7F+S^\Qo^^AaV:q1in'q>Ql8Du]@R
%YCHH*lYjQ4QZ]8A9_.*@e(:e\hYcNtfAD&WolpG\T8d3411gL=KDQ40rU'(1IdN2OdjP1=2dcU@\%c4@,AoNDgTu\8e(<LTme>>,
%!hhULs8=2@C*+ml4]?Np4o'SUo@r_`Ii[P+ro"B3ms=kd2uih`^A64g:?90=s8'@rf;\\Op<9RUrpo`3rVc%Ho$m!o?GHB$s7?)=
%AXdUent06<qqJSeJ+p^mIeUS.hY,dC^>sTW1lF8X-LgiV<1590PB$9F0YC>@9JUON)2i\W)*fR0]k;V1^WQM%J%urpTpgbka$7OH
%SC^e/RS!R(TRu#@W6DF5Vm4qJ_g*=mEi'?4+6j=r*U]n#`3LK>WnSYK#*eIn&*\7=$7]>lLa+9f;,i`$rj"j,][YQ:U7G&E_gZqM
%*k`mTB%O$,(Y:*S:1jC.MNhq@r"MQAJ@XZPR<%UPq!]4Dr[cGXj$r[3b@u'5(6I)LdO.k-01mAO"4<<2hDM8f/fO*m?'h"[WbK38
%qW1[Q]>'N+%MVChcgac,YqP85okd6RPRh,l;IPpu=G@%j>enasbUh'r2;5siA=q6lqo<3VETrY_C]<4@q\M2m(J!Ld1D=6,K)'i[
%2CGV_`jXEt=NYM]hu;Tk`W'VM"f&1qdhUaB:huin`o<jbjVR3_!u1gD/UBdcb8\a+b8[&"gPsRO9ILG/L9.gFP?uuNi&L8WJS<_+
%A#K1lc`,M44R&fVGr"KJ9_;0<*?XE`fVu%a<9iDN1%q[)hf)=rhXH1#cN+iMeY1@V3E`*I[$b+%?$>M6"#VAE>FrKIH,DXbH,GgU
%*36WmFYd$mA/UtH6&-6H6@F!L7]uFP%14_+32\BIGY2$$$(KLgTg!5!JQJKYji8Y1l+%O+B^\.'iB5M%pF?Df^7_p)G3[=fT5E@^
%kt92\AJo^3&R'(l4fR,07FuP>D5uQ<h"tlZDqm2A*d?Wkf<r'AEGkhJk1bIIfkkp8p\-l/^rO=NQ\">!FOtUrn4AUdY]^n/T1?B?
%gOYDuk4"giB"o:0VR>"2^baQ\mD(4nQ?YL\rOpN9E#cVIh%%(lmGi*>gR#U?E]`]8_43`8mIQ<ahKcNlRrQn(TpL![n:IPfh@4j)
%O'K`m_#:sm2Xi;dVsS*S$K0^^PY'^)Su:1kD^=A@gO\h^ID186@Rmmo74er:KOI_VO1TsE$XCA+IIHb:*!>t2)V4ChMtM8OPF>"Q
%)gLQ'mfr4KIG08P07W]26/4R^)b[c4c]V:h9:%a<hQIF=>&^FYI@1"g2Fk",5r\7\g;1gbs'X$\dF<,q;csaaY.2s%;'Dl3)p^Z_
%i'M;0QJ&E-a59.H,];^u]"durQi<WGZ7?Fl`_;Da,DBe8LsQ/QN'D-Hi8OTD^\i;t`&Zt4*&CA],4_TgpGjS(p7.U>R`VVZf06n[
%:R=oK'_s`PS+FZ-=\e!<Cu4H&OQKY>+"bt$=";Y<I9q\+kLDR%p.ZZ7,#-miOFD0lc22ND]X7.'OK74;eV)F=XJEXtnY#>Rhuo`=
%'&(G=?Ttp8StFI2[8WWnb4]C=`BB,(=hbt.PHeg[)0k\NOg)2-OMY*n,>h[6[pCbW(%&tQ&j7E)m^8*2gde[j=2%KfGZ`neaoZfu
%iMj;!h"(1.Jt91'T"aniQfAB7-s6Mk(q>YRh9@61\%G+uj'8PBWl7<<Ao=_h+H%An>H5I4dAbGNPLoUuSF?QRpR[H'S[,oj:XEr(
%QcFe:JqZXDp:DJ.f=ZJQ/$)_/'i'U;(C=`O.B*?Oi8"ro3>ln1hgEc7muGnPRShXmd%$T<iaj>*W=1;j4:$rB`f`I4F"0fMQf=:d
%#e*HM[]js;nFCZ^cRuL%q0d0W*l.RD5K*?dlYjQ<k1=OdH2XZ:OoP@PpV6aGDf8!XCe8q[29.rMhU2,4-Z1U&-hbR.4Z\\%ASD?l
%YUF`)_ZJ<Y"L`-WjQ%g+%kXWBS=779/4NXgpU=dRI<<*j@uVoEIWVj4j)X6o0@@n;hS"C>/lZqN.>;]+V1P(5g3XV$(L3=(bjs5r
%598e+HsRh#0NY(%IS9X92ZJ8i_cd`lhX#"C<%89e6"Zc%P?3V%N8He.#i8I%.YULBF4]UD]bKDm[@c#i]q<iepTMAd8f#b:\'%\4
%p!Uj,(@,?#[%;48ko`bKo]l4+\K\`E;1Gk,s*2h)I)]!\Q<*6m;$h]^mLj^.6#un%Z0:9jWDf';C*>Gr-`(1FogEO$8.o9#ji]5Z
%;X6s2;#1'u\PaBLV!VUh80]2ndWICB@TrR&3q<t3;\ZR11.fe`Y)Z)uUl.PX,P#mu8169"8Mml]%+ph;jZq^1BLEW7Z-q6B5gfr,
%=7HLsjE$J8_N4C)SK0Un3NBZXUQ)+HIHO'tiiu\%f)8L-6&RLT4\rbWAM.+<Lq.NSg>*77Jur'jj0$mKmS%IZ/*tcbVNWRFI\`*U
%CSZA4;b]bfHZL0O,rsqiEIDMa'au[1>QqpHfZ)I)qgh/8ZgZY63;&c.m!VrEJ8&iOm1\iLYS9kKnVK3m%Q!&+h^&Zjc\4hX*foYM
%<+1[!Rj/<84X&nJbb5j4_-]dubAH.7Kj)R1/N608S0(_Socs.QD(:q=Oe&:=J&10-NGq@D2b+Xg+sCngM4gO6ai5h;I*BrTO)-2F
%=H7$['l'MqLK,s#L;g]BZAu]`Tr"tLNLN;)<.NbA:2RkieC/_3JOJ<`5*5=LeKs%Ag-hip(iN/$RI?F=Uu`hD*r9-m;`dR)4HJO%
%SH<;)ipl0\cFn!-Hn5M`/2EC\<tZXQIO-NmFF4t;o@H=rTRbUK<AZPd?e:'sFo7KLD5:.IOmA<sJlaANgN-$%p[MRd8`SURKp#H\
%5&QB4!4e=Q*02]:j_/Ko[Ze)CIpJ*e:D#BH*a9J$N.,ha&M:Y/4en829XS:TFWdjHc*<h+8uI[1n^u+jl4R-UCm_j@#2%$QrfY<f
%=opOQRq#);e962lK'uA.e8juu+Xi-3=,m\BIorXJ%_$<1S6GWCSt*t_E$30Wf2G>P^N`?*Fl8*kfj&GjXk86jbiOZ+]5c=&V%`NX
%2hr0.D3!c@d'>j/kOm3-R8Z41S?1`A*nii^R=\5ni[-FU<&qd2=*%JAm'A(dmD.0Ra($/cXjf("8ldGW-m93->"Bo7gNosNWL;"\
%HJfb6k]keJgg=AXU3Q/_adS]aCXf'%EhgWLl?<EE,!+ujhWkF%W*A)JPQ@0Ci73WF[7ADg^Rt,XJNrRq3Vr<ArL/("r.fONEK&Wt
%JJ>3;(s>,7WT"C^F/nptTsSrHN3_,YBRoCPG8lm3V_i3gJ'ijd7BZC0E>qqVSNC^Ya@aEAhed$(D4m#Q#JYYo&_jWSpgn[q:;S7-
%3FFjm=R\<#a%sna0E5=rq5MY3%2N2-QE?Gu9)u?d/>i8,=KDoEj,OKKdh345%.D9^<^d?q3QR\[G?0MbHLp6/<0.S@6):mdr(s,s
%O=E;S'r)hK.].ku9o+rX_Oa'YQ]nMRe1^4$-"YDK"\6Mj3k(=PJ\sfFCbG@@p/CmR_bt.XQEmi"F[UpDri,)XX@=>f7#aYUNaPb(
%c)d]iTXL*YFk`nJ"iOo:f5V7:j'hoS'PM>":mA]\)lk.pJF'bVbI3_G",S!f01B*D'XprAZFk&20nBtIqs"*qM>>L]\4K9lj3J,N
%1YuYY/bQgDgG>o@BqnS0gChhXm38M@(gBQ(9*+(f\Zhr0\NfapD2M%2]1+\V:XMadSmfpq4Y'd:,Um"7P[LQAB-Yna5OoPYOh(D_
%F#pd-Cg6^h8k(bH+o%rB2PSlCk:L@[B;<q$M#4)5pe/lNn>*0eGp*_n[JK;,b5IBsR(O>OTb\8Hm'k*:<E[,ERI%+73`h#EfG.4]
%[S`qU#nJ/F-V&F<>N\sOC+b5gH^@cV!T(]U&nuC5YVjM@2lYB=Rp%@`>Epm"WImN/f!"hrG#Ek/X%0_E_KH%tcc%Q8iS\2m8.BEl
%o'T5"5?c_&TaBV_f(32h:Lb_CT.-f<>4Uf%*3;918jA<IRPb8B;l<;_%jlgYk?AE3kt"E0p0H"uWT9HW]AlCYM*<=V@rj!@L3>7p
%2#%quA6IIWUqfuL$t-9qpT1mgW`L1n8RUK/NY3bcrl3O3f_)>8=aqEK<f^-Ik7YaO-&4"Y!9IYP_[JKX<G)"<**Ro09T&0Lf9YXo
%@I(NOWDs8+$-/'o^[)1<-d7L=Y#H/b6rT$BFjdh!6G.a_V.-gT61s1GY*f'ic2hkt=2&Q!qoS&*&Zk,2b;t?'hj(;bGOCsL\Ypo6
%ls&"B4\2:6Le01@P9tESC0W(H,4.>4Fu^Ub@%1k#blB,5L^oZK-hK<?SRJEopttH3R[RINK?B/W.CVGh3omU(8].oJc?M'?`fiE4
%"M.X18S7ELe=;+n-Ifp[kK/`uXXgt`-dA,/+%R+2ea$LIpQCrO96Ga=<-cL$qTX<1'Z[2?b7jJY:PUR_.GTM&cmMI?\ko9(ZkimQ
%M<*Oo"1>dW*[C_$:F>pXCKZVJH*+rJC#>:e/dgP@7GF68?,Vl@D&1R\=K5if>e&4]V+9!ZA$"54M(f[?>e?1\m:BYYG<L3Xiip+1
%4aBb'iZ#%2[>U$:KucVj';7%@b#Z`TO+mdi@RZ2[=0c4=s2`dNI`o[3qPRO)G3;T5bBLF_o!FRsE!V>Tg*e8lY)['Xr>E7J8>/*J
%di<_kQ)qE:?[eXWbU.4;k@8*QiOfmidNe1M9Ll-gGA=HAB[QRQ@OA^MeSFoDYR\T8XC'C.MRmP@kE;.F/TZ/N/2'\Gqa@`_ZcUPQ
%,Aae_.b"-;1sPcdZ_$^<pb@9to7mC@=[73B;:A<$PLK4LUM.WV-Rof1HIR2N".ogtF#U/o\0>R8nYj2"[CO\O$n++$kpCN'C@s^4
%2d2[jjK:qO1Ta#ij3&3&eAq2[@2EL#T[a*hOs[N)LH5pN_7EJo82O9m`h550D-FI%T0UMO2#Ofd*D7^*l6^BnmXtlKC&GNrbQ)56
%?.OKL",+.O#fq$aO(&!p;^*&Go4j^X9N&Z'(EZD=o^.j:;[:j.FKVKdOJ8D695[%^<=,p'Q^G(AMN]15-J(bO!e<h"=qfl-'s@i+
%Q9_:Dc]tBg^a]heOlh$)Nboe*/WB'V*ggZ_C<%PA%WdmKiJ0&"W2!AY6f&e+9\cB!obal`aIVgOg9<HZ,S*2pUq3Tq4LI:)q.XtM
%Niid28PG`-#hhn&.pI9Q:9Nk'aL[eHK[CF?E%`sIE^s8d>(X0:T!C!sMiYYZ0.:EaP\jRE"Ebb&`2V3(;t7^EeBBT)nhUN!BJLdP
%>T`<QEP-`n'm2omH>1ScL+J1TBRLM:@^gr?q&mqmY?M.p8HIGjnWR.?bSl^&"N-7i`c87,B.WkBm<r5Or<.l!;k\jBk+rE4OO/`o
%\<#EW<2MV[*X/Jrs#19(D_B"6>77sV'&\,A@BF08r%%OMXN)Pu2%a$1R3%>C'JZ'!4(p9$8YG;l98[lYrQ7&#OE4^O;MiE<SNc7H
%VC!nq%u"N2Rc<<9>!Tl&2ki5JpZN%oV4eGJqe7X*mif^Y:"/dgK[2kA&-2oW*T<XqBql@q4&ZUOTLiup&'dnoX8o%gZFj9kf/XpD
%;ruJH2lfc$Btqp(Q_C9i:'7Fn3/K#`bN=Q#h8Hs."(48Ko>ueDbq'7Q,(<&6$T!WS?-dA`6]35b$'CJ'&(==,X6dSQ<Lr4R)(G1R
%KJ`]ZIQAhM8o0$$XsF5JV=>!/RNe#L6lTDn;FYfR:C`F>RI>&IC*5Pb*3-PZ1Zh)lJ=^d234(NlJA(FRJQ@DiH52V1--=T*GP3>p
%B>_clN.2#Ybo*,HO(?/`@+O_9;5_"]9g2r50sBH/$QK'!HfRu6eEKbDm[Q%Om'bt#P`#cd[.uc`m>IPfPVMIa<^\JN*ooTY:n0Ae
%9?ubN>qH%67A6@c4][u(?n^l[GuO#_GDds]+"CJX3Q@sYm6],J)H:Q"UGdLj):6AGpD74g=Ad(#p=lGSUW,F::%mF^J2*f`lfOiM
%_30Q-AlhLc@ee(Yd06f\E@Ub'9gC]t_@el/>h)^n$05tn9pXf'<(or``6g`KDGVd`ZTkPmdsHDEI\_agH2;.!IP+"[,d(\P_SE89
%VfrR?`8Vhm/A2g$FK.p_e4UoPn0J1?"1ocB&b,VThu2$-#\Eu5YL),*p/f&J#f-GS)tVT2JJNqW<He=^lOmJ1@gDI`OY&PiDGer0
%D-3\4TTk)]HXZX=?\<;&%(5dkIT\UV&4B6,#'?Z#:("A)&3#s<LT$Qap]XqM24%WI>SqSrmNt"WZI7_"-LtiTbtelk;d$4L3ju:"
%X=+>HdcHds2=OD@W0hT(+UN-.fDDpZ4*rXdp\2FkHhFk_MP4=b5cA2ujT"r]R%4)!Pq5Cok;s'bOeXpui(6bkF[(PqV1bT'g67Qo
%3pNN%6'rQrX5T`b]K$drA2Q:ef"V?1e\U>7BG)]A(6A?:.j:^TQF2kbI10Xj&fe7=SkH>j[eEG1)c9`[cK+6GZ97das)]b$LtAU^
%ZZ'=DU-8rB#B@S.=os2R<eiZqfM58"FlH=bGXllX6$&N.oe6$ojF-l56t+5u#<N]qTV*(i`ka9:N=1$Go7ko6`TIi[$Ya]A^X+4I
%:,JuJ3B$knKJLE@:lpLP')^lP6i52!*PjlS6QAp139#GY9h:"6X,b+VNu0d^1E/qV-_nK#'FuPAkV'ilRN)iA(4fjk?q)"jg^&NF
%6oeW(-TC+8VVZ^TWWG7RD<OgN2D:!/)HAH[WG[_GUbRH<73%EQiaM7&DZ;9,D=$*h$kh$:41`s)/n0e8,GL+,!uk<#4dYPBU@gki
%@(k!sj9@kYe[hNIbsu:u:Pg'E;&f%UWP&b1&@['A5o&T[#E#cP9M=S!j=,J`DEuGj[4)l8$bp^cA/M<m!@DOm@]<$'6mVJod(j"]
%3<W_f,mm0rb\<bsr=BduQ&+rJbc^#\aQ9U!V866TK4Lg?CKiA48/*gB0m'2:2d*Xi<la@5;I!4C\l6gi!:-Z09d/=Gb3CD"bSp,G
%D"eTB\M^'u(!2D[,-=,malm@AMggOF>(3(0'pS'N&n#$"l#"L0_!S%&!<e]OeZ;2\R$q$3V5p.^d]@DHE6'3Q."*O*9!`sS:RVb]
%hSmi_aV]ZK5L@3\Z;mmGmTK0Y0+Up]3]j`oM:]:0+NSaq_?\h+D('O.(XiS=ODe^fAE?/4C\qF7`eRd*3DlC60:9B+S4G/(3IRV2
%'p6QAcHBhVFj5$I^]c,,Nc$Q(4VASYC7Gq2kE>Bk;8bEF137E1Ac*42m(oJR*A+0FaQ+M.(eb&2;"rSn=NqtKLgLUY?c\Q9/9[-P
%K`+OLo:[hcY;;1HBY:'0:e)OLXqai_U$3$&&6%sB>r?JR2N!idri+`K"-c,][2l"m\U.q'=unLuLMThJ+e!DE&6$J.XeB1C3me@m
%m0G8&%aJT2T[aX!8thfMLpRqJdZK+*Uf^OL&\D('FA.17`*E5NK<5"9,?BuL3g6YE*:QTFn_BRH&oo4n8%trJ+"a`(:dRB;b$i77
%mC&HF.Ef)\\7nT"RZd\0CtNERWOj1<jI_8U2$W<%E/^U'pe-@uaan\^G9E,%X%ilh=UtXc?*tS$DKI5P&*.rY'_-NedW+*8erZ'0
%>Ae&KD`%e(h'Y@rfT-lm)<e5r9pC*d\O"k#R_5FZK*pW.E<WtWSbU?`;h=EoXI`Nm^<^jKB`L[Q&t>XDV>a)5@senU5!55%-/$h#
%'irT.=bkW>ZsbegQY2M/C0/R-b-5^E;4?LQnqUqPW70A*5ao5_8C8h`SpHKm2*\qYS#6^PqtIkR@E[DGfJ;tG3+E:()I(t!AD@U_
%-HE]8qrQ8YWN:+L(/[A%HB+*dd6pg")MB%*mP;mpZfrW\HF\C:1kK0rJbr/Cb&2la(SguYql&:c;5nhf&[?;>PKt)gjpBeeSFL7p
%fn"W&iq/6/G#[cUOmk6\LPl^a%!!F+MF`V9E36]-6.G,D#m#kHD-LsdAH9CT;HCgM8:oHA@uJpEP_kq<Be"h+^TP]lLD66m`bn:a
%SeA!l&\DS_L':udYiaeo<%QW.S0P61,?PMY%G=uX8s(5r.[=i?n4K;=rR9JFmk$<fIm6EqI_Mus#u[O"rC)<In%;2aWs)j`F)cnt
%0dp[N&o+>dS?^2,(;0$m,Rb9BDT%.q!K$u'#N8<eO_RrKRUVhi>q-/Dop_Y9KH/&uT?td!$M6:kg^lng*n1O7XrKqOc!`79X22H<
%Z,uI2qGME_H=BMVZ)T8apX'kZ*QqKhFE9+Mg-RXE(g],0iT>OP;:#leQ6dkH5r[4XFLoD%GV\^<pnNbME"4GpZVa9A/BA4L>4sd,
%dep[`83igHjnPLmrh0Rp1h7WRXC?A$:scsoAiT-98=/Y?ZX]@93*:t,+U2Wj`;D7aLmhE3*h>]2N%+5fE!l<n?A6a\F1J6:nP5MH
%D,50V8C&UW7L5tb_o;#:BOTK6ijr*E*rFng<:<YO!,Bj_WDO_A=p=P#$?^!K.lC8a-=LFWlQe>c@M,2oQCMRbP[kh-Y(\#tG,Jqf
%T$eE*8R5RH(88P:DqqlP\8H,a-r3(X3(]R)$?T5VHP[]JA(j4bqd;J,h*b]6FseNR,grg6jX+bcP:^k=CpGg[:Q6C\ApF$Z42JTJ
%'t.Ugd`LX&/d4JsA@Q5Ti06JG/P>LY9U!_F/F=EGHmp>UOllHZ(5Pk8!kYp(XL47*7[\(F%RDXT!:+\DcARI^<bD@0o$_*Ql]k?5
%Ae>7:$f($#RYsZ`Wb^3s6WcI\OUm*fC7RZcOf>#-9WNCFWNg(MB<)#`3ioRuR6f>_5XL>jGZudE+:AK^CR<p*bG-`%8bh^k\dKsL
%7\!hR;8-1j*N0@Akcf?WqBQZ)TBa)M_1`i$<_aN`s6:V5$Lmm-bhI`#?*IgV.$,W:m'hdsZmIQZX<'dp,DG29pfV1P/JZ#d2C`A]
%KYs&E/L__krrm'h;t%1G]N%T:VQFjaH^[7R1`->-bmtRaLcY`M,4>UuosVc]L:1kKG[Clm&,7#[3&Itgp',3"*6(>dFtG;Hmj6LT
%^ZKgr"!ELj(/p&Ul,8F'IU^XoI=WV??R_$'E4*:<VN;QLmD0EJZXq67/M(^Q:/*Mu+$[V'?8Mb^DGm]4iXF-sUUs%.h40]l=tcC`
%DacK/=]$oJ$='^4PSh8Z8[U2($WX5gVg3okU2<^sb3!!GkQ)u!XM^1O8h;#=cfij7)(T[LOIHr$p:Q&PnrmX2FCuQt1OMI65^WX0
%LLE>Snl1CG7J"/7/]P-=N4JRp-Hr/u:[@\b=mnCnm9lUt4C5sX*%iT1m`gE_`m?;)-7]c<_m[f\V'YSk2@m\oD^o6Mn_A`JVXedY
%<5G=dm/^(`%`uu]]`VnB<'#:bEd8gr9172;X9_s(S/q"[AknCJg+eM`Ie]\mVf>#BlqK,OMt>5NXm^56E/IG&K]],CNGMNj#AT"r
%=&5N+@_PajC98;Y2>+q500+<q^o!Wt]8usl$[p[_5-P>CW.`_0O!7qd[q7"f_I(e1D`dP5WD/pQkpP(0UWuBad5H0+0rm3k(u"+#
%%2k+?202R9(#3Vlji(%fHF3"nWLi$6S(Lp<:=(/.#IpDX?.1A+aH)tdBq3mW"M]%K<p\I%lr=?R"J`d&oi*dY-]7/65'0HLX<[;F
%R%R!^R8JUo:!)c7l="lNMJh%;J4c[^<\9bVFZWOZYf8.o@7O9]H--nrD6)*AUnPppa/Fi$-QOWb^>GidAXX,F3Y]a)TESbK8/SMU
%ZGEJe0+P6!L.djfWfn-WVsrM?MfmmY+q2)ai8@NYW9BdNk1re"QTl=D`9?X3DF1%?9r%>okp<W89["sQ%m7o2RHV>&Z5@)$SS?P5
%AoDY:0t#!HA&i#VAXA*#.+*[3mK.Wbc98b&b)dck[n)PuJfhR<`t\?UT'W6@.6D$p,;4*)2q(/.??Y/5G,Gd[):ojQUS3%+bd8JP
%*jooPa*fB)3_Jl*eo51rO?gdQQNt,jT@gHGh/mEu\NPTH=u"bEPE`[Yl13khPd/ZnR(4[(9`^ng93f>\'>.)F-_ZjaZ)HM]-#DCe
%Mr/U1ZeMH=P5=<hBcHai8m_%^Q@S#ij^G;Rop$tr>Mi)_,58.d&Zj!Qd0ND`Lj(BLUe1][EqfD5.Pptm#L9DGl0\M.-2K_?2PWU'
%s.,9]heP:dB]*c4GU7bbh-EK@PgmSV.@V8PZHKnG6ln*/?l.?&EC=cCa^h=[h6sS!0AX">H3`R/lDKJ$s0:<$8MOlf=\6IsAAsUT
%4,^j9mFqR;bZ4'O-)2#%Ti&cjP;Qig9Jh(OPf%</#J*Ze9AKEFr8_tA1,<6nSFWi4rN_R2l5*ghP(+(/!%27c]>O%FH2jpGPj?\-
%Qa/</0"!9kFiYr:GZ#TsO^1a!)7ts_^3a52(2lg0LH;F$1[EJGSh?Td(j_>]l;m4-cSpoFd]jW6\84bQ:I%sC'C_Sq2nA'rG7&>L
%@=2n)po'\UUuBTs==kl*<;W7$S1GjSrX*l:8bVXTp>AYOY\*s.jTQ=?D4UkMP/F9YShOLZqMT"R[\?;'/sNlX7S^WH`Nn_1%2>&<
%N3bHi>4KCR"t@XLNfteMNXr2NIf<*NOf`(.edZ]_[HB.fWm`Q7"LkGKL)AG61706*p2H0[i2U.bQD_O!LQ4d1&4E>NN^Wa@]O=T>
%D*oHPI)<81;g,4>Z8EsEcWki=^6#i$i#PK*P+-(r34!t0jR.k"k.Ag&GQfO4p)NVg@FYlILZ,3ge:+R-]Zi;r8KCXh$3"W*D;p4L
%F1c_)STETDChfS472'&1gXV_=4_qNK>``*bg7.J4gA:M,7k0'F$Pf]DLl>lY)mb<i@]pQ:]#cDkbq6j(:-ghfA&WBjBWc4Ge!3<n
%KPRr8<(Q3=n2,,PBpTIdPQbRuCF'AX?![%T9ioJ8F;q_noob:smt'HIk&"@J[)kl-`V$rXpVagoT.p7I#rHF@J2.h(#a![)JGZ"S
%i^gh/(<dG)P^J;7G*<ltaeP2_htuN2Of0.Q>]fIAE4?3gHHPpJEmbXJCR24c.0(NG9.WS9q3.KR,r71`IQn>t!K%g&(eOO5.d:d*
%Zkc22#oAFE[A45-rPY!CG(9;LBfa.;jBXp,Rm=d0rm^r'/dI3Cl9[A#"&FlL=Z:H(]g[H4=1X(tMDC%B^-%n7Gt=_FL><>2dF4QD
%<,8>gEj=X.Gj>[>B!5.lR*8d3N5_oEn1-A7mW#uT5N(r*5b7W*2?\mj%M.mIZbM.5=,h+8^#d?V`PGn0aY4=3\`FPWrr:CdM^)E%
%/V5%R6;(N[8Mb+]g$bD&2d)?uW`SQgfV=_s5Re7u$8]1u?,ogd<XrQ?<P)dU-S+ZQ:&S!94/,tC(btC"a]/:_:Z2Um-o7?i^O%Yj
%9LtG)a?.cM`@@0Lb&-%s/8E*@\<%!Q=Z]H"^T''8k'XTspFH$1Pt"Vb]=;dN>#r>pVGQj$;M1^Tp"aC[4L$A5q<8&3M8C#$2(D[a
%cYh!JmF_CPjF7mZ8=W8/mRn*Rcod!UbP0EM1gQLM8kLEBU:@"iHuBnD<RjK3\aq7BEE'&g1K#`$iK.-1h0A#N7l+G>oN@?NnS6-O
%TSo=jN:)n;?[bc$r\p(CrK1*H^<_]78VNom+,cuajeNNjAqfAV3GB(8bs%<!Yu_7NIFdHjQ+^G*q1HKnB2B1.\M[&j*;aEH,i+D?
%#l,kj6#E-VV\[bY;\TQjC-7hKD?VGk"N);Fr>%W:3SDTs[\+We]tUkmc67_q'r@)"'U@7U.a"tXI0t<ZMtG&qH(+'K]]/goq9aKk
%1ifRC<D7nKMJ632omIS(!<302OBe`=Hb9Cql_gGVPTIaSisa?I*7&URe0ZMMjtsKD-4k.c2cC:!W_A6W94)c?oMA%rV3VFGR]&U,
%PEQ@Y_u'"ig$.Fo]laUn4qh&fO)0@=SEBjWV,_Ie$;seb7>XsNnSSFXH%,oYGoGY\SbA,fT3qQar:aRu6iG9eIJ_c#YQ)A@^O,K[
%'#+,oYCH<>s7tL:Dr,sAh-^34n,DtU04-rVrq9RQr:M/p5<\r4]<D8,r?&cNqVb5bs22T:iCB4VI.>25r?)(0YQ*nf#<N&#L]~>
%AI9_PrivateDataEnd
